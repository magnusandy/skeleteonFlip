{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/images/title.png","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/levelOne.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","excalibur_1","sword","skull","potion","coin","card","startMenu","optionMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","Resources","Texture","gameOver","0","2","3","4","5","6","7","8","9","Sound","Config","maxHealth","maxAttack","gridPadding","gridSize","skeletonDifficultyFactor","buffDifficultyFactor","backgroundColor","Color","Gray","Scenes","GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","resources_1","SoundManager","soundManager","backgroundMusicStart","this","backgroundSound","loop","play","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","e","t","__extends","setPrototypeOf","__proto__","Array","constructor","create","CardType","SpriteEffects_1","soundManager_1","COIN","SKELETON","POTION","ATTACK","Card","_super","screenCenter","col","row","onClick","faceColor","type","texture","_this","onEnter","baseSprite","clearEffects","addEffect","Darken","onExit","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","sprite","scale","addDrawing","setWidth","width","setHeight","height","on","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","screenHeight","screenWidth","_a","maxHeight","calcMaxCardHeight","maxWidth","calcMaxCardWidth","scaleByWidth","scaleByHeight","Vector","Sprite","setDrawing","getRow","getCol","isFlipped","skeleton","White","Red","attack","Yellow","Actor","scenes_1","Victory","onInitialize","engine","onActivate","victoryActor","asSprite","drawWidth","drawHeight","goToScene","add","onDeactivate","Scene","GameOver","gameOverActor","playerIdleAnimation","SpriteSheet","getAnimationForAll","stop","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","displayMode","DisplayMode","FullScreen","suppressPlayButton","start","loader","Engine","MainMenu","game","startActor","MenuButton","optionActor","titleActor","onDown","buttonScale","card_1","Count","index","initialCount","setCount","leftSide","top","count","java8script_1","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","Stream","of","map","a","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","filter","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","Math","random","attackCardCallback","potionCardCallback","ceil","floor","createGrid","coord","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getCurrent","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","GameCoordinatior","healthCoordinator","attackCoordinator","updateLabels","checkIfCompleteGame","initialize","coordinator","gridCoordinator","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","skeletonCountForCol","skeletonCountForRow","forEach","allMatch","coordinator_1","GameWindow","remove","levelOne_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","keys","k","addResource"],"mappings":"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EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,EAAAxF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoF,EAAAD,E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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([226,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nimport { Color } from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu),    \n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    gridSize: 6,\n    skeletonDifficultyFactor: 2.0, //easy 3 (30%), medium 2.5 (40%), hard 2 (50%)\n    buffDifficultyFactor: 1, //easy 0, med 1, hard 2\n    backgroundColor: Color.Gray,\n};\n\nexport { Resources, Config, uiHeart}\n","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.backgroundSound) {\n            this.backgroundSound = Resources.backgroundMusic;\n            this.backgroundSound.loop = true;\n            this.backgroundSound.play(0.1);\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        this.currentSound = sound;\n        if (after) {\n            sound.play().then(after);\n        } else {\n            sound.play();\n        }\n    }\n\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((Config.gridSize / 2) * cardWidth)\n            - ((Config.gridSize - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y\n            - ((Config.gridSize / 2) * cardHeight)\n            - ((Config.gridSize - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const maxHeight = Card.calcMaxCardHeight(screenHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (Config.gridSize + 1))) > screenHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.85;\n        return (workableScreenHeight / (Config.gridSize + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.85;\n        return (workableWidth / (Config.gridSize + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","module.exports = __webpack_public_path__ + \"32e41cd2c45011981855c5231583be07.png\";","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    victoryActor.setHeight(360);\n    victoryActor.setWidth(480);\n    victoryActor.on('pointerup', () => this.engine.goToScene(Scenes.MAIN_MENU));\n    this.add(victoryActor);\n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine } from 'excalibur';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound);\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3,1,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(360);\n    gameOverActor.setWidth(360);\n    gameOverActor.on('pointerup', () => this.engine.goToScene(Scenes.MAIN_MENU));\n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 96;\n        this.logoWidth = 480;\n    }\n}","import * as ex from 'excalibur';\nimport { Config } from '../resources';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      displayMode: ex.DisplayMode.FullScreen,\n      suppressPlayButton: true //todo think about customizing the button\n    });\n    this.backgroundColor = Config.backgroundColor;\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Vector, Sprite, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Supplier } from 'java8script';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n  }\n\n  public onActivate() {\n    const startActor = new MenuButton(\n      Resources.startMenu, () => this.game.goToScene(Scenes.GAME_WINDOW)\n    );\n    startActor.x = this.screenWidth/2;\n    startActor.y = this.screenHeight/2 - startActor.drawHeight/2 - Config.gridPadding;\n\n    this.add(startActor)\n\n    const optionActor = new MenuButton(\n      Resources.optionMenu,\n      () => {}\n    );\n    optionActor.x = this.screenWidth/2;\n    optionActor.y = this.screenHeight/2 + optionActor.drawHeight/2 + Config.gridPadding;\n    this.add(optionActor)\n\n    const title = Resources.title.asSprite();\n    const titleActor = new Actor();\n    titleActor.addDrawing(title);\n    titleActor.x = this.screenWidth/2;\n    titleActor.y = this.screenHeight/2 - startActor.drawHeight*2;\n    this.add(titleActor);\n  \n  }\n  public onDeactivate() {}\n}\n\nclass MenuButton extends Actor {\n  static buttonScale = new Vector(0.4, 0.4);\n  public drawHeight: number;\n  private sprite: Sprite;\n\n  public constructor(texture: ex.Texture, onClick: Supplier<void>) {\n    super();\n    this.sprite = texture.asSprite();\n    this.sprite.scale = MenuButton.buttonScale;\n    this.addDrawing(this.sprite)\n    this.setHeight(this.sprite.drawHeight);\n    this.setWidth(this.sprite.drawWidth);\n    this.on(\"pointerdown\", this.onDown);\n    this.on(\"pointerup\", onClick);\n    this.on(\"pointerenter\", this.onEnter);\n    this.on(\"pointerleave\", this.onExit);\n    this.drawHeight = this.sprite.drawHeight;\n  }\n\n  private onDown: () => void = () => {\n    this.sprite.clearEffects();\n    this.sprite.addEffect(new Darken(0.2))\n  }\n\n  private onEnter: () => void = () => {\n    this.sprite.clearEffects();\n    this.sprite.addEffect(new Darken(0.1))\n  }\n\n  private onExit: () => void = () => {\n    this.sprite.clearEffects();\n  }\n  \n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((Config.gridSize / 2) * cardWidth)\n            - cardWidth\n            - ((Config.gridSize+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            - ((Config.gridSize/2)* cardHeight)\n            - cardHeight\n            - ((Config.gridSize+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function, Supplier } from \"java8script\";\nimport { Config } from \"../resources\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / Config.skeletonDifficultyFactor);\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - Config.buffDifficultyFactor;\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"58a173980e88f9c87fc59189eecffa32.png\";","module.exports = __webpack_public_path__ + \"965a27cff1d4258fa5cd446cc3aad69d.png\";","module.exports = __webpack_public_path__ + \"04bae7f03193a414f9a11713d3a05357.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"7f0a2a655d51479def4f8b21fd3b5738.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport { Resources, uiHeart } from \"../../resources\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.addDrawing(this.sprite);\n        this.setHeight(50);\n        this.setWidth(50);\n        this.scale = new Vector(0.25, 0.25);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * 50), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * 50), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream, Function, Optional } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Label } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport { MainMenu } from \"../scenes/mainMenu\";\n\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinatior implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinatior {\n        const coordinator: GameCoordinatior = new GameCoordinatior(\n            engine,\n            NumberCoordinator.create(50, 50, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(50, 100, Config.maxAttack, () => { }, Resources.uiSword)\n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, Config.gridSize, engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n    \n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n       const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n        }\n    } \n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinatior } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport { Color } from 'excalibur';\nimport SoundManager from '../engine/soundManager';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator;\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    const coordinator: GameCoordinatior = GameCoordinatior.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n      Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n  }\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n\n  }\n} \n","import * as ex from 'excalibur';\nimport { GameWindow } from './scenes/levelOne';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\n\nconst game = new Game();\ngame.add(Scenes.MAIN_MENU, new MainMenu(game));\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}