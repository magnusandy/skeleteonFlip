{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/engine/sizingManager.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/actors/bars/exitButton.ts","webpack:///./src/engine/fontManager.ts","webpack:///./src/engine/progression/playerSettingsManager.ts","webpack:///./src/scenes/gameWindows/gameWindowBase.ts","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/title.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/scenes/gameWindows/gridGameWindow.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/scenes/gameWindows/storyGameWindow.ts","webpack:///./src/modal/modal.tsx","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/button.wav","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/myMono.png","webpack:///./src/images/helpTitle.png","webpack:///./src/images/optionTitle.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/menu/confirm.png","webpack:///./src/images/menu/playing.png","webpack:///./src/images/menu/credits.png","webpack:///./src/images/menu/intro.png","webpack:///./src/images/menu/cards.png","webpack:///./src/images/menu/help.png","webpack:///./src/images/menu/options.png","webpack:///./src/images/menu/start.png","webpack:///./src/images/card.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","cardsMenu","introMenu","creditsMenu","playingMenu","confirmMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","optionTitle","helpTitle","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","buttonSound","backgroundTile","Resources","Texture","gameOver","cardMenu","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","t","e","SizingManager","engine","this","initialize","singleton","console","log","isMobile","drawWidth","getUIItemSize","getUIButtonSizing","padding","maxScale","getMenuHeight","difficulty_1","playerSettingsManager_1","ProgressionManager","getGameGridSize","ps","isProgressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","maxLevel","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","difficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","setProgressionDisabled","isProgressDisabled","resetProgress","getLevelString","resources_1","SoundManager","disabled","soundManager","disableSound","backgroundSound","stop","enableSound","backgroundMusicStart","volume","loop","play","backgroundMusicEnd","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","Scenes","progressionManager_1","STORY_GAME_WINDOW","GRID_GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","getGameWindow","excalibur_1","BackgroundManager","tile","numberOfCols","Math","ceil","width","numberOfRows","drawHeight","height","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","texture","safePointerUp","onClick","event","ev","type","SpriteEffects_1","soundManager_1","helpers_1","ButtonBase","_super","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","addDrawing","on","EventTypes","PointerUp","onClickWrapper","__extends","getSprite","setDisabled","Actor","CardType","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","buttonBase_1","ExitButton","FontManager","generalMono","SpriteFont","getMono","localForage","PlayerSettingsManager","toggleSound","progressionDisabled","chosenDiff","chosenGridSize","maxDiff","soundOff","chosenDifficulty","maxDifficulty","serializeV1","config","version","size","storeName","description","getItem","STORE_KEY","v","DEFAULT","saveData","deserializeV1","newCurrent","saveToStorage","newStage","gridSize","difficutly","isSoundOff","setIsSoundOff","isProgDisabled","getDifficultyLevel","save","setItem","VERY_EASY","NORMAL","coordinator_1","backgroundManager_1","scenes_1","exitButton_1","GameWindowBase","onInitialize","add","goToScene","coordinator","GameCoordinator","onActivate","getAllActors","forEach","onDeactivate","remove","Scene","java8script_1","difficultyLevel","buff","text","buffFactor","skeletonFactor","difficultyName","level","Stream","of","EASY","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","setPrototypeOf","__proto__","Array","constructor","create","gameWindowBase_1","GridGameWindow","currentOptionGridSize","resetGame","card_1","Count","index","initialCount","setCount","leftSide","top","asSprite","count","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","map","a","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getCurrent","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","updateLabels","rowCounts","skeletonCountForRow","columnCounts","skeletonCountForCol","attackCoordinator","healthCoordinator","checkIfCompleteGame","mm","gridCoordinator","createRowCountCards","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","allFlipped","allMatch","fontManager_1","LevelDisplay","startingLevel","createLabelText","fontSize","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","PREFIX","updateLevel","newLevel","Label","level_1","StoryGameWindow","levelDisplay","React","ReactModal","react_dom_1","xButton","skullImage","swordImage","potionImage","coinImage","heartUIImg","swordUIImage","threeImage","styles","margin","flex","h1","holder","imgHolder","cardImg","ModalRenderer","isOpen","setOpenAndRerender","innerStuff","render","open","closeFunc","props","createElement","E","__assign","document","getElementById","introModal","style","howToPlayModal","src","alt","cardModal","textModal","content","borderRadius","borderWidth","borderColor","appElement","float","position","right","onPointerUp","borderStyle","minHeight","display","Component","modal_1","Help","bgManager","addTileMap","addTitle","modalRenderer","centerx","centery","sizing","createButton","button","RadioButton","defaultValue","onToggle","currentSprite","toggleButton","checked","setCheckedDrawing","ifPresent","func","checkedSprite","uncheckedSprite","Optional","ofNullable","isChecked","setChecked","radioButton_1","LabeledRadio","label","defaultVal","textSize","buttonSize","labelWidth","getTextWidth","ctx","radio","getDrawables","NumberSelector","min","updateDisabled","isDisabled","leftButtonSprite","rightButtonSprite","disColor","topLabel","color","numberLabel","Colorize","leftButton","rightButton","Black","labelText","addBy","nextCurrent","setCurrent","u","numberSelector_1","labeledRadio_1","Options","arguments","onConfirm","progressionToggle","itemSize","callbackForEnabling","addGridSize","addDifficultySize","addSoundToggle","addProgressionToggle","createbuttonDims","toggleCallback","Victory","victoryActor","GameOver","gameOverActor","playerIdleAnimation","getAnimationForAll","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","pointerScope","Input","PointerScope","Canvas","suppressPlayButton","start","loader","Engine","MainMenu","game","sizeProperly","options","help","placeActors","actor","resource","getHeight","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","storyGameWindow_1","gridGameWindow_1","mainMenu","keys","k","addResource"],"mappings":"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AAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA6E,EAAAC,EAAAnF,GAAA,aAAAnC,OAAA6B,eAAAyF,EAAA,cAAApF,OAAA,ICCA,IAAAqI,EAAAvJ,EAAA,GACA2U,EAAA3U,EAAA,IACAwnB,EAAAxnB,EAAA,KACAynB,EAAAznB,EAAA,KACA0nB,EAAA1nB,EAAA,KACA2nB,EAAA3nB,EAAA,KACA4nB,EAAA5nB,EAAA,KACA6nB,EAAA7nB,EAAA,KACA8nB,EAAA9nB,EAAA,KACAuP,EAAAvP,EAAA,GACAsH,EAAAtH,EAAA,IACA+nB,EAAA/nB,EAAA,KACAgoB,EAAAhoB,EAAA,KAEMgnB,EAAO,IAAIS,EAAApmB,QACX4mB,EAAW,IAAIT,EAAAT,SAASC,GAC9BA,EAAKjS,IAAIJ,EAAA/J,OAAOI,UAAWid,GAC3BjB,EAAKjS,IAAIJ,EAAA/J,OAAOK,UAAW,IAAI0c,EAAApC,SAASyB,IACxCA,EAAKjS,IAAIJ,EAAA/J,OAAOE,kBAAmB,IAAIid,EAAArK,gBAAgBsJ,IACvDA,EAAKjS,IAAIJ,EAAA/J,OAAOG,iBAAkB,IAAIid,EAAA/Q,eAAe+P,IACrDA,EAAKjS,IAAIJ,EAAA/J,OAAOM,QAAS,IAAI0c,EAAAvC,QAAQ2B,IACrCA,EAAKjS,IAAIJ,EAAA/J,OAAOO,QAAS,IAAI0c,EAAApD,QAAQuC,IACrCA,EAAKjS,IAAIJ,EAAA/J,OAAOQ,KAAM,IAAI0c,EAAA9G,KAAKgG,IAG/B,IAAIH,EAAS,IAAIa,EAAA9B,WACjB5mB,OAAOkpB,KAAK3e,EAAAzE,WACLuQ,QAAQ,SAAA8S,GAAK,OAAAtB,EAAOuB,YAAY7e,EAAAzE,UAAUqjB,MAEjDnB,EAAKJ,MAAMC,GAAQlc,KAAK,WACtB4E,EAAAlO,QAAcqF,WAAWsgB,GACzB1f,EAAAjG,QAAsBqF,aACtBsgB,EAAKhS,UAAUL,EAAA/J,OAAOI","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([283,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nimport { AudioContextFactory } from 'excalibur';\n\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/menu/start.png');\nconst optionMenu = require('./images/menu/options.png');\nconst helpMenu = require('./images/menu/help.png');\nconst cardsMenu = require('./images/menu/cards.png');\nconst introMenu = require('./images/menu/intro.png');\nconst creditsMenu = require('./images/menu/credits.png');\nconst playingMenu = require('./images/menu/playing.png');\nconst confirmMenu = require('./images/menu/confirm.png');\n\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\nconst optionTitle = require('./images/optionTitle.png');\nconst helpTitle = require('./images/helpTitle.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\nconst buttonSound = require('./sounds/button.wav');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    cardMenu: new ex.Texture(cardsMenu),\n    introMenu: new ex.Texture(introMenu),\n    creditsMenu: new ex.Texture(creditsMenu),\n    playingMenu: new ex.Texture(playingMenu),\n    confirmMenu: new ex.Texture(confirmMenu),\n\n    optionTitle: new ex.Texture(optionTitle),\n    helpTitle: new ex.Texture(helpTitle),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n\n    myMono: new ex.Texture(fontMono),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    buttonSound: new ex.Sound(buttonSound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport { Resources, Config, uiHeart}\n","import { Engine } from \"excalibur\";\n\nexport interface IButtonSizing {\n    padding: number, \n    maxScale: number\n}\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 1200; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getUIButtonSizing(): IButtonSizing {\n        return this.isMobile() \n        ? {padding: 0.4, maxScale: 0.3}\n        : {padding: 0.4, maxScale: 0.5}\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 3;\n    }\n\n}","import { Difficulty } from \"./difficulty\";\nimport PlayerSettingsManager from \"./playerSettingsManager\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private constructor() {\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager();\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = PlayerSettingsManager.get();\n        if(ps.isProgressionDisabled()) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return PlayerSettingsManager.get().getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return PlayerSettingsManager.get().getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public isProgressionDisabled() {\n        return PlayerSettingsManager.get().isProgressionDisabled();\n    }\n\n    public progress(): void {\n        if(!PlayerSettingsManager.get().isProgressionDisabled()) {\n            const currentLevel = PlayerSettingsManager.get().getCurrentLevel();\n            const currentStage = PlayerSettingsManager.get().getCurrentStage();\n    \n            if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n                //on the last stage of the level, need to find out if we can move on or just move up stages\n                if(currentLevel === PlayerSettingsManager.get().maxLevel) {\n                    // on the max upgraded level just increase stage\n                    PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n                } else {\n                    PlayerSettingsManager.get().setCurrentStage(1);\n                    PlayerSettingsManager.get().setCurrentLevel(currentLevel + 1);\n                }\n            } else {\n                //move on to the next stage, no extra logic\n                PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n            }  \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        PlayerSettingsManager.get().setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        PlayerSettingsManager.get().setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public setProgressionDisabled(isProgressDisabled: boolean) {\n        return PlayerSettingsManager.get().setProgressionDisabled(isProgressDisabled);\n    }\n\n    public resetProgress(): void {\n        const ps = PlayerSettingsManager.get();\n        if (!ps.isProgressionDisabled()) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        console.log(\"gettinglevelstring\");\n        if (PlayerSettingsManager.get().getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${PlayerSettingsManager.get().getCurrentLevel()}.${PlayerSettingsManager.get().getCurrentStage()}`;\n        }\n    }\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n    private disabled: boolean = false;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        this.disabled = true;\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public enableSound() {\n        this.disabled = false;\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.disabled) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.volume = 0.1;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play();\n            }\n        }\n    }\n\n    public backgroundMusicEnd(): void {\n        if(!this.disabled) {\n            if (this.backgroundSound) {\n                this.backgroundSound.stop();\n                this.backgroundSound = null;\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!this.disabled) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import ProgressionManager from \"../engine/progression/progressionManager\";\n\nexport enum Scenes {\n    STORY_GAME_WINDOW = \"storyGameWindow\",\n    GRID_GAME_WINDOW = \"gridGameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}\n\nexport function getGameWindow(): Scenes {\n    return ProgressionManager.get().isProgressionDisabled()\n        ? Scenes.GRID_GAME_WINDOW \n        : Scenes.STORY_GAME_WINDOW;\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(engine: Engine) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(engine.drawWidth / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(engine.drawHeight / tile.height); \n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows*numberOfCols; row++) {\n\n                tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    public getTileMap(): TileMap {\n        return this.tileMap;\n    }\n}","import { Texture, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n\n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nfunction safePointerUp(onClick: Supplier<void>): (event?: any) => void {\n    return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                onClick();\n            }\n    }\n}\n\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture,\n    safePointerUp\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport SoundManager from \"../../engine/soundManager\";\nimport { Resources } from \"../../resources\";\nimport { safePointerUp } from \"../../engine/helpers\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n    private disabled: boolean;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>, disabled?: boolean) {\n        super();\n        this.disabled = disabled ? disabled : false;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    public getSprite():Sprite {\n        return this.sprite;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return safePointerUp(() => {\n            if (!this.disabled) {\n                this.sprite.clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n                onClick();\n            }\n        });\n    }\n\n    private onDown: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.2))\n        }\n\n    }\n\n    private onEnter: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.1))\n        }\n\n    }\n\n    private onExit: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n        }\n    }\n\n    public setDisabled(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/sizingManager';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight()/2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import ButtonBase from \"./buttonBase\";\nimport { Vector, Engine } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport { Supplier } from \"java8script\";\n\nexport class ExitButton extends ButtonBase {\n\n    public constructor(engine: Engine, onExit: Supplier<void>) {\n        const texture = Resources.uiX;\n        super(texture, onExit);\n        this.scale = new Vector(Config.exitButtonSize / texture.width, Config.exitButtonSize / texture.height);\n        this.setHeight(Config.exitButtonSize);\n        this.setWidth(Config.exitButtonSize);\n        this.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n        this.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    }\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport ProgressionManager from \"./progressionManager\";\nimport * as localForage from \"localforage\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\n\ninterface SaveDataV1 {\n    version: number;\n    soundOff: boolean;\n    progressionDisabled: boolean;\n    chosenDifficulty: number; //difficulty level number\n    chosenGridSize: number;\n    maxLevel: number;\n    maxDifficulty: number; //difficulty level number\n    currentLevel: number;\n    currentStage: number;\n}\n\nexport default class PlayerSettingsManager {\n    private static STORE_KEY = 'player_settings_v1';\n    public static singleton: PlayerSettingsManager;\n    private static DEFAULT: PlayerSettingsManager = new PlayerSettingsManager(false, false, Difficulty.VERY_EASY, 3, 3, Difficulty.NORMAL, 1, 1);\n    //Settings\n    private soundOff: boolean;\n    private progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    public readonly maxLevel: number;\n    public readonly maxDifficulty: Difficulty;\n\n    //Progression\n    private currentLevel: number;\n    private currentStage: number;\n\n    private constructor(toggleSound, progressionDisabled, chosenDiff, chosenGridSize, maxLevel, maxDiff, currentLevel, currentStage) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxLevel = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n    }\n\n    public static get(): PlayerSettingsManager {\n        console.log(this.singleton.serializeV1());\n        return this.singleton;\n    }\n\n    public static initialize(): void {\n        localForage.config({\n            name: 'skeletonFlip',\n            version: 1.0,\n            size: 4980736,\n            storeName: 'playerSettings',\n            description: 'Store save data'\n        });//try with no settings\n        localForage.getItem(PlayerSettingsManager.STORE_KEY, (e, v) => {\n            console.log(v);\n            if(e) {\n                console.log(`problem retrieving from store: ${e}`);\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else if (!v) {\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else {\n                const saveData: any = v;\n                if(saveData.version === 1) {\n                    this.singleton = PlayerSettingsManager.deserializeV1(saveData);\n                }\n            }\n        })\n    }\n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n        this.saveToStorage();\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n        this.saveToStorage();\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n        this.saveToStorage();\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n        this.saveToStorage();\n    }\n\n    public isSoundOff(): boolean {\n        return this.soundOff;\n    }\n\n    public setIsSoundOff(isSoundOff: boolean): void {\n        this.soundOff = isSoundOff;\n        this.saveToStorage();\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n\n    public setProgressionDisabled(isProgDisabled: boolean) {\n        this.progressionDisabled = isProgDisabled;\n        this.saveToStorage();\n    }\n\n    public isProgressionDisabled(): boolean {\n        return this.progressionDisabled;\n    }\n\n    private serializeV1(): SaveDataV1 {\n        return {\n            version: 1,\n            soundOff: this.soundOff,\n            progressionDisabled: this.progressionDisabled,\n            chosenDifficulty: this.chosenDifficulty.getDifficultyLevel(),\n            chosenGridSize: this.chosenGridSize,\n            maxLevel: this.maxLevel,\n            maxDifficulty: this.maxDifficulty.getDifficultyLevel(),\n            currentLevel: this.currentLevel,\n            currentStage: this.currentStage,\n        }\n    }\n\n    private static deserializeV1(save: any): PlayerSettingsManager {\n        return new PlayerSettingsManager(\n            save.soundOff,\n            save.progressionDisabled,\n            Difficulty.getByDifficultyLevel(save.chosenDifficulty),\n            save.chosenGridSize,\n            save.maxLevel,\n            Difficulty.getByDifficultyLevel(save.maxDifficulty),\n            save.currentLevel,\n            save.currentStage);\n    }\n\n    private saveToStorage() {\n        localForage.setItem(\n            PlayerSettingsManager.STORE_KEY,\n            this.serializeV1(),\n        );\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinator } from '../../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport SoundManager from '../../engine/soundManager';\nimport BackgroundManager from '../../engine/backgroundManager';\nimport { Actor, Engine, Color, Texture, Vector } from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport ButtonBase from '../../actors/bars/buttonBase';\nimport { Scenes } from '../scenes';\nimport LevelDisplay from '../../actors/bars/level';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\nimport { ExitButton } from '../../actors/bars/exitButton';\n\nexport abstract class GameWindowBase extends ex.Scene {\n\n  protected coordinator: GameCoordinator;\n  protected engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.coordinator = GameCoordinator.initialize(this.engine);\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    this.coordinator.getAllActors()\n      .forEach(c => this.add(c));\n  }\n\n  public onDeactivate() {\n    this.coordinator.getAllActors()\n      .forEach(c => this.remove(c));\n  }\n} \n","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { GameWindowBase } from './gameWindowBase';\nimport ProgressionManager from '../../engine/progression/progressionManager';\n\nexport class GridGameWindow extends GameWindowBase {\n\n  private currentOptionGridSize: number;\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    this.currentOptionGridSize = ProgressionManager.get().getOptionGridSize()\n  }\n\n  //Override\n  public onActivate(): void {\n    const newSize = ProgressionManager.get().getOptionGridSize()\n    if(this.currentOptionGridSize != newSize) {\n      this.currentOptionGridSize = newSize;\n      this.coordinator.resetGame();\n    }\n    super.onActivate();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport SizingManager from \"../../engine/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport SizingManager from \"../engine/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Actor, Scene } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/sizingManager\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine) {\n        this.engine = engine;\n        this.resetGame();\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const coordinator: GameCoordinator = new GameCoordinator(engine);\n        return coordinator;\n    }\n\n    public resetGame(): void {\n        const mm: SizingManager = SizingManager.get();\n        this.healthCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { }, Resources.uiHeart, Config.maxHealth);\n        this.attackCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword);\n        this.gridCoordinator = GridCoordinator.createGrid(this, ProgressionManager.get().getGameGridSize(), this.engine);\n        this.rowCounts = this.createRowCountCards();\n        this.columnCounts = this.createColCountCards();\n    }\n\n    private getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    private getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    private getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    public getAllActors(): Actor[] {\n        return Stream.ofValues<Actor[]>(\n            this.gridCoordinator.getGridAsList(),\n            this.getColCountCards(),\n            this.getRowCountCards(),\n            this.getStatTrackers()\n        ).flatMap(a => Stream.ofValues(...a))\n            .toArray();\n    }\n\n    private updateLabels = () => {\n        console.log(\"doing counts\");\n        this.rowCounts.forEach((count, idx) => {\n            console.log(\"row \" + this.skeletonCountForRow(idx))\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            console.log(\"col \" + this.skeletonCountForCol(idx))\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (this.healthCoordinator.getCurrent() === 0) {\n            this.engine.goToScene(Scenes.GAME_OVER);\n            ProgressionManager.get().resetProgress();\n            this.resetGame();\n        } else if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n            ProgressionManager.get().progress();\n            this.resetGame();\n        }\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\nimport ProgressionManager from \"../../engine/progression/progressionManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return ProgressionManager.get().isProgressionDisabled() ? \"\" :`${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport LevelDisplay from '../../actors/bars/level';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\nimport { GameWindowBase } from './gameWindowBase';\n\nexport class StoryGameWindow extends GameWindowBase {\n\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth / 2, mm.getMenuHeight() - mm.getUIItemSize() / 2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n\n  }\n\n  public onActivate() {\n    super.onActivate();\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n  }\n} \n","\nimport * as React from 'react';\nimport ReactModal = require('react-modal');\nimport { render } from 'react-dom';\nimport { Config } from '../resources';\nimport { TextAlignProperty } from 'csstype';\nconst xButton = require('../images/ui/x.png');\nconst skullImage = require('../images/skull.png');\nconst swordImage = require('../images/sword.png');\nconst potionImage = require('../images/potion.png');\nconst coinImage = require('../images/coin.png');\nconst heartUIImg = require('../images/ui/heart.png');\nconst swordUIImage = require('../images/ui/sword.png');\nconst threeImage = require('../images/numbers/3.png');\n\ninterface Styles {\n    p: {\n        padding: string,\n        margin: string,\n        fontSize: number,\n        flex: number,\n        textAlign: TextAlignProperty,\n    },\n    h1: {\n        textAlign: TextAlignProperty,\n    },\n    holder: {\n        width: string,\n    }\n    imgHolder: {\n        width: string,\n        textAlign: TextAlignProperty,\n    }\n    cardImg: {\n        width: number,\n    }\n}\n\nconst styles: Styles = {\n    p: { padding: \"16px\", margin: \"0px\", fontSize: 20, flex: 1, textAlign: \"center\" },\n    h1: { textAlign: \"center\" },\n    holder: {\n        width: \"100%\"\n    },\n    imgHolder: {\n        width: \"100%\",\n        textAlign: \"center\"\n    },\n    cardImg: {\n        width: 100\n    }\n}\n\nexport class ModalRenderer {\n\n    private isOpen: boolean;\n\n    constructor(isOpen: boolean) {\n        this.isOpen = isOpen;\n    }\n\n    public introModal() {\n        const innerStuff = (<div>\n            <h1 style={styles.h1}>Introduction</h1>\n            <p style={styles.p}>Welcome to Skeleton Flip!</p>\n            <p style={styles.p}>Flip cards, find coins, drink potions and kill skeletons. The goal of the game is to flip all the cards on the board without running out of hearts.</p>\n            <p style={styles.p}>In Story Mode, you progress through increasingly larger and larger grids, you can unlock larger grid sizes and harder difficulties by collecting coins and unlocking upgrades.</p>\n            <p style={styles.p}>If Story Mode is disabled, you may choose to practice any grid size you like.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public howToPlayModal() {\n        const innerStuff = (<div>\n            <h1 style={styles.h1}>How To Play</h1>\n            <p style={styles.p}>The top right of the game screen shows your health (<img width={20} src={heartUIImg} alt=\"heart\" />) and current attack (<img width={20} src={swordUIImage} alt=\"sword\" />). If you run out of health you lose!</p>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={threeImage} alt=\"three\" />\n            </div>\n            <p style={styles.p}>The numbers on the outer edges of the grid indicate how many skeletons are hiding in that row or column.</p>\n            <p style={styles.p}>Tap cards inside the grid to flip them over. Remember you need to flip every card in the grid to advance, so choose your path wisely!</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public cardModal() {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>Cards</h1>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={skullImage} alt=\"skull\" />\n            </div>\n            <p style={styles.p}>Oh no! Flipping over a skeleton card will hurt you, taking away one health unless you have a sword to defend yourself.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={swordImage} alt=\"sword\" />\n            </div>\n            <p style={styles.p}>Sweep Low! Flipping over a sword card will add to your attack count, no need to fear the next skeleton you flip over, the sword will take care of it!</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={potionImage} alt=\"potion\" />\n            </div>\n            <p style={styles.p}>Tastes like Strawberry! Flipping over a potion card will heal any wounds that you have taken from those nasty skeletons.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={coinImage} alt=\"coin\" />\n            </div>\n            <p style={styles.p}>Take that to the bank! Flipping over a coin card will add to your riches, if you complete a level you will keep the coins you found and can use them for upgrades.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public textModal(title: string, text: string) {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>{title}</h1>\n            <p style={styles.p}>\n                {text}\n            </p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    private setOpenAndRerender = (isOpen: boolean, innerStuff?: any) => {\n        this.isOpen = isOpen;\n        this.render({\n            innerStuff: innerStuff,\n            open: this.isOpen,\n            closeFunc: () => this.setOpenAndRerender(false)\n        });\n    }\n\n    private render = (props: Props) => {\n        render(<E {...props} />,\n            document.getElementById('modal')\n        );\n    }\n}\n\ninterface Props {\n    open: boolean;\n    closeFunc: () => void;\n    innerStuff?: any;\n}\n\ninterface State {\n}\n\nexport default class E extends React.Component<Props, State> {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <ReactModal\n                style={{\n                    content: {\n                        borderRadius: \"0px\",\n                        backgroundColor: '#a77600',\n                        borderWidth: 8,\n                        borderColor: \"#402f08\",\n                        padding: \"16px\",\n                    }\n                }}\n                appElement={document.getElementById('modal')}\n                isOpen={this.props.open}>\n                <div style={{ float: \"right\", height: Config.exitButtonSize, position: \"fixed\", right: \"24px\", top: \"24px\" }}>\n                    <a style={{}}>\n                        <img height={Config.exitButtonSize} width={Config.exitButtonSize} src={xButton} alt=\"exit\" onPointerUp={this.props.closeFunc} />\n                    </a>\n                </div>\n                <div style={{ borderRadius: \"16px\", borderStyle: \"solid\", borderWidth: \"4px\", minHeight: \"95%\", backgroundColor: \"#896000\", borderColor: \"#402f08\", display: \"flex\" }}>\n                    {this.props.innerStuff}\n                </div>\n            </ReactModal>\n        );\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Actor, Engine } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { calcDimensionsSingleObjectTexture, IDimensions } from '../engine/helpers';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport { ModalRenderer } from '../modal/modal';\nimport SizingManager from '../engine/sizingManager';\n\nexport class Help extends ex.Scene {\n\n  private engine: Engine;\n  private modalRenderer: ModalRenderer;\n  //private button: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.addTitle();\n    this.modalRenderer = new ModalRenderer(false);\n\n    const centerx = engine.drawWidth / 2;\n    const centery = engine.drawHeight / 2;\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.introMenu, sizing.padding, sizing.maxScale);\n\n\n    this.add(this.createButton(dims, centerx, centery - dims.height * 1.5 - Config.gridPadding * 1.5, Resources.introMenu, () => this.modalRenderer.introModal()));\n    this.add(this.createButton(dims, centerx, centery - dims.height * 0.5 - Config.gridPadding * 0.5, Resources.playingMenu, () => this.modalRenderer.howToPlayModal()));\n    this.add(this.createButton(dims, centerx, centery + dims.height * 0.5 + Config.gridPadding * 0.5, Resources.cardMenu, () => this.modalRenderer.cardModal()));\n    this.add(this.createButton(dims, centerx, centery + dims.height * 1.5 + Config.gridPadding * 1.5, Resources.creditsMenu, () => this.modalRenderer.textModal(\"Credits\", \"Made by Andrew\")));\n\n  }\n\n  public createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n    const button = new ButtonBase(texture, onClick);\n    button.x = x\n    button.y = y\n    button.scale = dims.scale;\n    button.setHeight(dims.height);\n    button.setWidth(dims.width);\n    return button;\n  }\n\n  public onActivate() {\n    //this.modalRenderer.setOpenAndRerender(true);\n  }\n\n  public onDeactivate() {\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.helpTitle, 0.6, 1);\n    const sprite = Resources.helpTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth / 2;\n    title.y = dims.height / 2 + Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale;\n    this.add(title);\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier, Function, Optional, Consumer } from \"java8script\";\nimport SoundManager from \"../../engine/soundManager\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n    private onToggle: Optional<Consumer<boolean>>\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean, onToggle?: Consumer<boolean>) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n        this.onToggle = Optional.ofNullable(onToggle);\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    public setChecked(isChecked: boolean): void {\n        this.checked = isChecked;\n        this.setCheckedDrawing();\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound)\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n    private setCheckedDrawing() {\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        this.setCheckedDrawing();\n        this.onToggle.ifPresent(func => func(this.checked));\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine, onToggle?: (checked:boolean) => void) {\n        const textSize = size - (size * 0.25)\n        const buttonSize = size + (size * 0.25);\n        \n\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = textSize;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(buttonSize, x+labelWidth*(3/4), y, defaultVal, onToggle);\n        \n    }\n    \n    public setChecked(isChecked: boolean): void {\n        this.radio.setChecked(isChecked);\n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign, Color, Sprite } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/fontManager\";\nimport { Colorize } from \"excalibur/dist/Drawing/SpriteEffects\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButtonSprite:Sprite;\n    private leftButton: ButtonBase;\n    private rightButtonSprite: Sprite;\n    private rightButton: ButtonBase;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number, disabled: boolean) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n\n        const textSize = this.fontSize - (this.fontSize * 0.25)\n        const buttonSize = this.fontSize + (this.fontSize * 0.25);\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = textSize\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        \n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+buttonSize, null, FontManager.get().getMono());\n        this.numberLabel.fontSize = textSize\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        \n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButtonSprite = this.leftButton.getSprite();\n        this.leftButton.x = x - buttonSize*1.5\n        this.leftButton.y = y + buttonSize;\n        this.leftButton.scale = new Vector(buttonSize/Resources.uiLeft.width, buttonSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(buttonSize);\n        this.leftButton.setWidth(buttonSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButtonSprite = this.rightButton.getSprite();\n        this.rightButton.x = x + buttonSize*1.5;\n        this.rightButton.y = y + buttonSize;\n        this.rightButton.scale = new Vector(buttonSize/Resources.uiRight.width, buttonSize/Resources.uiRight.height);\n        this.rightButton.setHeight(buttonSize);\n        this.rightButton.setWidth(buttonSize);\n\n        this.updateDisabled(disabled);\n    }\n\n    public updateDisabled = (isDisabled: boolean) => {\n        this.leftButtonSprite.clearEffects();\n        this.rightButtonSprite.clearEffects();\n        if(isDisabled) {\n            const disColor = Color.Gray;\n            this.topLabel.color = disColor\n            this.numberLabel.color = disColor;\n            this.leftButtonSprite.addEffect(new Colorize(disColor));\n            this.rightButtonSprite.addEffect(new Colorize(disColor));\n            this.leftButton.setDisabled(true);\n            this.rightButton.setDisabled(true);\n        } else {\n            this.topLabel.color = Color.Black;\n            this.numberLabel.color = Color.Black;\n            this.leftButton.setDisabled(false);\n            this.rightButton.setDisabled(false);\n        }\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Actor, Scene, Engine, Texture } from 'excalibur';\nimport BackgroundManager from '../engine/backgroundManager';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SoundManager from '../engine/soundManager';\nimport SizingManager from '../engine/sizingManager';\nimport { calcDimensionsSingleObjectTexture, IDimensions } from '../engine/helpers';\nimport { Consumer } from 'java8script';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport ButtonBase from '../actors/bars/buttonBase';\n\nexport class Options extends Scene {\n\n  private engine: Engine;\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n  private progressionToggle: LabeledRadio;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n    const itemSize = SizingManager.get().getUIItemSize();\n\n    const callbackForEnabling = this.addGridSize(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addSoundToggle(itemSize);\n    this.addTitle();\n    this.addProgressionToggle(itemSize, callbackForEnabling)\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const createbuttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.confirmMenu, sizing.padding, sizing.maxScale);\n\n    this.add(this.createButton(\n      createbuttonDims,\n      engine.drawWidth/2,\n      engine.drawHeight - createbuttonDims.height/2 - Config.gridPadding,\n      Resources.confirmMenu,\n      () => this.onConfirm()\n    ));\n    \n  }\n\n  private createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n    const button = new ButtonBase(texture, onClick);\n    button.x = x\n    button.y = y\n    button.scale = dims.scale;\n    button.setHeight(dims.height);\n    button.setWidth(dims.width);\n    return button;\n  }\n\n  private onConfirm = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    ProgressionManager.get().setProgressionDisabled(!this.progressionToggle.isChecked());\n    PlayerSettingsManager.get().setIsSoundOff(!this.sound.isChecked())\n    if (this.sound.isChecked()) {\n      SoundManager.get().enableSound();\n    } else {\n      SoundManager.get().disableSound();\n    }\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.optionTitle, 0.6, 1);\n    const sprite = Resources.optionTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth/2;\n    title.y = dims.height/2+ Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale; \n    this.add(title);\n  }\n  \n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 - itemSize*2.5 - Config.optionPadding, !PlayerSettingsManager.get().isSoundOff(), this.engine);\n\n    this.sound.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 - itemSize*0.5 - Config.optionPadding, itemSize, false);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addProgressionToggle(itemSize, toggleCallback: Consumer<boolean>) {\n    this.progressionToggle = new LabeledRadio(\"Story Mode\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 + itemSize*1 + Config.optionPadding, !ProgressionManager.get().isProgressionDisabled(), this.engine, toggleCallback);\n\n    this.progressionToggle.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  //returns callback for toggling the objects\n  private addGridSize(itemSize): Consumer<boolean> {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 + itemSize*3 + Config.optionPadding, itemSize, !ProgressionManager.get().isProgressionDisabled());\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n\n      return this.gridSize.updateDisabled;\n  }\n\n  public onActivate() {\n    this.sound.setChecked(!PlayerSettingsManager.get().isSoundOff());\n    this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel());\n    this.progressionToggle.setChecked(!ProgressionManager.get().isProgressionDisabled())\n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport {calcDimensionsSingleObjectTexture, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1.5)\n    victoryActor.setHeight(engine.drawHeight);// set height/width so you can tap anywhere on the screen\n    victoryActor.setWidth(engine.drawWidth);\n    victoryActor.scale = dims.scale;\n    victoryActor.on('pointerup', safePointerUp(() => {\n      this.engine.goToScene(getGameWindow());\n    }));\n    this.add(victoryActor);\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    const dims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = dims.scale;\n    gameOverActor.on('pointerup', safePointerUp(() => {\n      this.engine.goToScene(Scenes.MAIN_MENU);\n    }));\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\nimport * as Bowser from 'bowser';\n\nexport default class Game extends ex.Engine {\n\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      pointerScope: ex.Input.PointerScope.Canvas, //make it so clicks don't go \"through\" the help modals\n      suppressPlayButton: true, //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport SoundManager from '../engine/soundManager';\nimport SizingManager, { IButtonSizing } from '../engine/sizingManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(getGameWindow()),\n    );\n    const sizing :IButtonSizing = SizingManager.get().getUIButtonSizing();\n    this.sizeProperly(this.start, sizing.padding, sizing.maxScale, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => this.game.goToScene(Scenes.OPTIONS),\n    );\n    this.sizeProperly(this.options, sizing.padding, sizing.maxScale, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => this.game.goToScene(Scenes.HELP),\n    );\n    this.sizeProperly(this.help, sizing.padding, sizing.maxScale, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.title.addDrawing(Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicEnd();\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"00f14d085530ea0ae58c17a32b3fe27f.wav\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"21c2960a6ef19bc7b845d01041d556b9.png\";","module.exports = __webpack_public_path__ + \"5bbe8e44117d6281e0990e5a0213c814.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"fb261f33ec74628ffab99997289e2f44.png\";","module.exports = __webpack_public_path__ + \"d848ad40f4eee6a0b29882906e9b4c24.png\";","module.exports = __webpack_public_path__ + \"64c5b08a042975010b476c3ca33efd4d.png\";","module.exports = __webpack_public_path__ + \"d23070e309626133deb93bbabf5d25bb.png\";","module.exports = __webpack_public_path__ + \"5d8c965fd0efaf1fa74941ad5cbb8d3c.png\";","module.exports = __webpack_public_path__ + \"135852ebc677f398779a9ac03e3c396b.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","import { GameWindowBase } from './scenes/gameWindows/gameWindowBase';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/sizingManager';\nimport PlayerSettingsManager from './engine/progression/playerSettingsManager';\nimport { StoryGameWindow } from './scenes/gameWindows/storyGameWindow';\nimport { GridGameWindow } from './scenes/gameWindows/gridGameWindow';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.STORY_GAME_WINDOW, new StoryGameWindow(game));\ngame.add(Scenes.GRID_GAME_WINDOW, new GridGameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, new Options(game));\ngame.add(Scenes.HELP, new Help(game));\n\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  SizingManager.initialize(game);\n  PlayerSettingsManager.initialize();\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}