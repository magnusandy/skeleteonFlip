{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/levelOne.ts","webpack:///./src/index.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/images/title.png","webpack:///./src/actors/card/card.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/resources.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","101","t","e","102","103","104","105","106","107","108","109","110","111","112","this","__extends","setPrototypeOf","__proto__","Array","constructor","create","excalibur_1","StatTracker","_super","enabled","x","y","texture","_this","sprite","Sprite","width","height","addDrawing","setHeight","setWidth","scale","Vector","setEnabled","clearEffects","opacity","DISABLED_OPACITY","isEnabled","Actor","java8script_1","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","Stream","range","map","idx","toArray","add","subtract","getCurrent","getStatActors","numberCoordinator_1","card_1","resources_1","gridCoordinator_1","scenes_1","count_1","GameCoordinatior","engine","healthCoordinator","attackCoordinator","skeletonCardCallback","updateLabels","coinCardCallback","attackCardCallback","potionCardCallback","initialize","coordinator","Config","maxHealth","goToScene","Scenes","GAME_OVER","Resources","uiHeart","maxAttack","uiSword","gridCoordinator","GridCoordinator","createGrid","gridSize","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","center","drawWidth","drawHeight","of","getRow","card","getCol","skeletonCountForCol","skeletonCountForRow","row","filter","isFlipped","type","CardType","SKELETON","count","col","getGridAsList","forEach","setCount","ex","coordinator_1","GameWindow","onInitialize","onActivate","ofValues","flatMap","onDeactivate","remove","Scene","levelOne_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","game","MAIN_MENU","MainMenu","GameOver","GAME_WINDOW","loader","GameLoader","keys","k","addResource","start","then","46","COIN","POTION","ATTACK","Card","screenCenter","onClick","faceColor","cardType","passedInOnClick","flipped","cardWidth","cardHeight","on","fullOnClick","calcX","calcY","gridPadding","asSprite","setDrawing","skeleton","Color","White","skull","potion","Red","attack","Gray","sword","coin","Yellow","gameOverActor","playerIdleAnimation","SpriteSheet","gameOver","getAnimationForAll","logoImg","backgroundColor","toString","logo","logoHeight","logoWidth","Loader","Game","displayMode","DisplayMode","FullScreen","Engine","screenWidth","screenHeight","startActor","MenuButton","startMenu","optionActor","optionMenu","title","titleActor","buttonScale","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","Texture","0","2","3","4","5","6","7","8","9","gridOffset","skeletonDifficultyFactor","buffDifficultyFactor","Count","index","initialCount","leftSide","top","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","a","Function","identity","getCard","rowIndex","colIndex","rowNum","blankGridRow","columnIndex","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","initializeBuffs","needMoreBuffs","generateBuffCard","Math","random","ceil","floor","coord","93","94","95","96","97","98","99"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([214,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"7f0a2a655d51479def4f8b21fd3b5738.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"b4c4a5b43037b15315c6c75870cbb701.png\";","module.exports = __webpack_public_path__ + \"8c1509dd1b13c9b73931d6618c43997a.png\";","module.exports = __webpack_public_path__ + \"3e597a67bfe1e56605598b0b20f7c961.png\";","module.exports = __webpack_public_path__ + \"419e057f2b0e2d8670422004f5820c24.png\";","module.exports = __webpack_public_path__ + \"040adb5051047f4fef1d17a65a486b10.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport { Resources, uiHeart } from \"../../resources\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.addDrawing(this.sprite);\n        this.setHeight(50);\n        this.setWidth(50);\n        this.scale = new Vector(0.25, 0.25);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * 50), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * 50), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream, Function, Optional } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Label } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\n\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinatior implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinatior {\n        const coordinator: GameCoordinatior = new GameCoordinatior(\n            engine,\n            NumberCoordinator.create(50, 50, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(50, 100, Config.maxAttack, () => { }, Resources.uiSword)\n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, Config.gridSize, engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n    \n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n    }\n\n    public coinCardCallback = (): void => {\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinatior } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport { Color } from 'excalibur';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator;\n\n  public onInitialize(engine: ex.Engine) {\n  }\n\n  public onActivate() {\n\n    const coordinator: GameCoordinatior = GameCoordinatior.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n      Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n  }\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n\n  }\n} \n","import * as ex from 'excalibur';\nimport { GameWindow } from './scenes/levelOne';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\n\nconst game = new Game();\ngame.add(Scenes.MAIN_MENU, new MainMenu(game));\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  game.goToScene(Scenes.MAIN_MENU);\n});\n","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n}","module.exports = __webpack_public_path__ + \"32e41cd2c45011981855c5231583be07.png\";","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector } from 'excalibur';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private screenCenter: ex.Vector;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.screenCenter = screenCenter;\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        this.addDrawing(\"base\", Card.sprite(Resources.card));\n        this.addDrawing(\"flip\", Card.sprite(this.texture));\n        this.setWidth(Config.cardWidth);\n        this.setHeight(Config.cardHeight);\n        //this.anchor = new ex.Vector(0,0);\n        this.on(\"pointerdown\", this.fullOnClick);\n        this.x = Card.calcX(col, row, screenCenter) + Config.cardWidth/2; //adding on padding for drawing from center of card\n        this.y = Card.calcY(col, row, screenCenter) + Config.cardHeight/2;\n    }\n\n    private static calcX(col: number, row: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((Config.gridSize / 2) * Config.cardWidth)\n            - ((Config.gridSize - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (Config.cardWidth * col) + (Config.gridPadding * col)\n\n    }\n\n    private static calcY(col: number, row: number, center: ex.Vector) {\n        const top = center.y\n            - ((Config.gridSize / 2) * Config.cardHeight)\n            - ((Config.gridSize - 1) * Config.gridPadding) / 2;\n\n        return top + (Config.cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    private static sprite(texture: ex.Texture): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = new Vector(0.5, 0.5);\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import * as ex from 'excalibur';\nimport { GameCoordinatior } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\n\nexport class GameOver extends ex.Scene {\n\n  public onInitialize(engine: ex.Engine) {\n  }\n  public onActivate() {\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3,1,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(360);\n    gameOverActor.setWidth(360);\n    gameOverActor.on('pointerdown', () => this.engine.goToScene(Scenes.MAIN_MENU));\n  }\n\n  public onDeactivate() { }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 96;\n        this.logoWidth = 480;\n    }\n}","import * as ex from 'excalibur';\nimport { Config } from '../resources';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      displayMode: ex.DisplayMode.FullScreen \n    });\n    this.backgroundColor = Config.backgroundColor;\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import * as ex from 'excalibur';\nimport { Label, Actor, Vector, Engine, SpriteSheet } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Supplier } from 'java8script';\n\nexport class MainMenu extends ex.Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.engine = engine;\n  }\n\n  public onActivate() {\n\n\n    const startActor = new MenuButton(\n      Resources.startMenu, () => this.engine.goToScene(Scenes.GAME_WINDOW)\n    );\n    startActor.x = this.screenWidth/2;\n    startActor.y = this.screenHeight/2 - startActor.drawHeight/2 - Config.gridPadding;\n\n    this.add(startActor)\n\n    const optionActor = new MenuButton(\n      Resources.optionMenu,\n      () => {}\n    );\n    optionActor.x = this.screenWidth/2;\n    optionActor.y = this.screenHeight/2 + optionActor.drawHeight/2 + Config.gridPadding;\n    this.add(optionActor)\n\n    const title = Resources.title.asSprite();\n    const titleActor = new Actor();\n    titleActor.addDrawing(title);\n    titleActor.x = this.screenWidth/2;\n    titleActor.y = this.screenHeight/2 - startActor.drawHeight*2;\n    this.add(titleActor);\n  \n  }\n  public onDeactivate() {}\n}\n\nclass MenuButton extends ex.Actor {\n  static buttonScale = new Vector(0.4, 0.4);\n  public drawHeight: number;\n\n  public constructor(texture: ex.Texture, onClick: Supplier<void>) {\n    super();\n    const sprite = texture.asSprite();\n    sprite.scale = MenuButton.buttonScale;\n    this.addDrawing(sprite)\n    this.setHeight(sprite.drawHeight);\n    this.setWidth(sprite.drawWidth);\n    this.on(\"pointerdown\", onClick);\n    this.drawHeight = sprite.drawHeight;\n  }\n}","import * as ex from 'excalibur';\nimport { Color } from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\n\n\nconst Resources = {\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu),    \n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 8,\n    gridSize: 4,\n    gridOffset: 100,\n    cardHeight: 90,\n    cardWidth: 75,\n    skeletonDifficultyFactor: 2.0, //easy 3 (30%), medium 2.5 (40%), hard 2 (50%)\n    buffDifficultyFactor: 2, //easy 0, med 1, hard 2\n    backgroundColor: Color.Gray,\n};\n\nexport { Resources, Config, uiHeart}\n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        this.addDrawing(\"0\", Count.sprite(Resources[0]));\n        this.addDrawing(\"1\", Count.sprite(Resources[1]));\n        this.addDrawing(\"2\", Count.sprite(Resources[2]));\n        this.addDrawing(\"3\", Count.sprite(Resources[3]));\n        this.addDrawing(\"4\", Count.sprite(Resources[4]));\n        this.addDrawing(\"5\", Count.sprite(Resources[5]));\n        this.addDrawing(\"6\", Count.sprite(Resources[6]));\n        this.addDrawing(\"7\", Count.sprite(Resources[7]));\n        this.addDrawing(\"8\", Count.sprite(Resources[8]));\n        this.addDrawing(\"9\", Count.sprite(Resources[9]));\n\n        this.setWidth(Config.cardWidth);\n        this.setHeight(Config.cardHeight);\n        this.x = Count.calcX(type, index, screenCenter) + Config.cardWidth/2;\n        this.y = Count.calcY(type, index, screenCenter) + Config.cardHeight/2;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((Config.gridSize / 2) * Config.cardWidth)\n            - Config.cardWidth\n            - ((Config.gridSize+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + Config.cardWidth + (Config.cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector): number {\n        const top = center.y\n            - ((Config.gridSize/2)* Config.cardHeight)\n            - Config.cardHeight\n            - ((Config.gridSize+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + Config.cardHeight + (Config.cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = new ex.Vector(0.5, 0.5);\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function, Supplier } from \"java8script\";\nimport { Config } from \"../resources\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / Config.skeletonDifficultyFactor);\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - Config.buffDifficultyFactor;\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","module.exports = __webpack_public_path__ + \"965a27cff1d4258fa5cd446cc3aad69d.png\";","module.exports = __webpack_public_path__ + \"04bae7f03193a414f9a11713d3a05357.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";"],"sourceRoot":""}