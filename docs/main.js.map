{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/engine/sizingManager.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/actors/bars/exitButton.ts","webpack:///./src/engine/fontManager.ts","webpack:///./src/engine/progression/playerSettingsManager.ts","webpack:///./src/scenes/gameWindows/gameWindowBase.ts","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/images/ui/x.png","webpack:///./src/images/title.png","webpack:///./src/scenes/gameWindows/gridGameWindow.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/scenes/gameWindows/storyGameWindow.ts","webpack:///./src/modal/modal.tsx","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/button.wav","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/myMono.png","webpack:///./src/images/helpTitle.png","webpack:///./src/images/optionTitle.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/helpMenu.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","optionTitle","helpTitle","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","buttonSound","backgroundTile","Resources","Texture","gameOver","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","t","e","difficulty_1","playerSettingsManager_1","ProgressionManager","this","singleton","getGameGridSize","ps","isProgressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","maxLevel","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","difficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","setProgressionDisabled","isProgressDisabled","resetProgress","getLevelString","console","log","SizingManager","engine","initialize","isMobile","drawWidth","getUIItemSize","getMenuHeight","resources_1","SoundManager","disabled","soundManager","disableSound","backgroundSound","stop","enableSound","backgroundMusicStart","volume","loop","play","backgroundMusicEnd","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","Scenes","progressionManager_1","STORY_GAME_WINDOW","GRID_GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","getGameWindow","excalibur_1","BackgroundManager","tile","numberOfCols","Math","ceil","width","numberOfRows","drawHeight","height","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","maxScale","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","texture","safePointerUp","onClick","event","ev","type","SpriteEffects_1","soundManager_1","helpers_1","ButtonBase","_super","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","addDrawing","on","EventTypes","PointerUp","onClickWrapper","__extends","getSprite","setDisabled","Actor","CardType","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","buttonBase_1","ExitButton","FontManager","generalMono","SpriteFont","getMono","localForage","PlayerSettingsManager","toggleSound","progressionDisabled","chosenDiff","chosenGridSize","maxDiff","soundOff","chosenDifficulty","maxDifficulty","serializeV1","config","version","size","storeName","description","getItem","STORE_KEY","v","DEFAULT","saveData","deserializeV1","newCurrent","saveToStorage","newStage","gridSize","difficutly","isSoundOff","setIsSoundOff","isProgDisabled","getDifficultyLevel","save","setItem","VERY_EASY","NORMAL","coordinator_1","backgroundManager_1","scenes_1","exitButton_1","GameWindowBase","onInitialize","add","goToScene","coordinator","GameCoordinator","onActivate","getAllActors","forEach","onDeactivate","remove","Scene","java8script_1","difficultyLevel","buff","text","buffFactor","skeletonFactor","difficultyName","level","Stream","of","EASY","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","setPrototypeOf","__proto__","Array","constructor","create","gameWindowBase_1","GridGameWindow","currentOptionGridSize","resetGame","card_1","Count","index","initialCount","setCount","leftSide","top","asSprite","count","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","map","a","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getCurrent","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","updateLabels","rowCounts","skeletonCountForRow","columnCounts","skeletonCountForCol","attackCoordinator","healthCoordinator","checkIfCompleteGame","mm","gridCoordinator","createRowCountCards","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","allFlipped","allMatch","fontManager_1","LevelDisplay","startingLevel","createLabelText","fontSize","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","PREFIX","updateLevel","newLevel","Label","level_1","StoryGameWindow","levelDisplay","React","ReactModal","react_dom_1","xButton","ModalRenderer","isOpen","setOpenAndRerender","render","createElement","E","open","closeFunc","document","getElementById","setText","newText","props","style","content","borderRadius","borderWidth","borderColor","padding","appElement","float","position","right","src","alt","onPointerUp","borderStyle","minHeight","display","margin","flex","Component","modal_1","Help","bgManager","addTileMap","addTitle","modalRenderer","button","RadioButton","defaultValue","onToggle","currentSprite","toggleButton","checked","ifPresent","func","checkedSprite","uncheckedSprite","Optional","ofNullable","isChecked","radioButton_1","LabeledRadio","label","defaultVal","textSize","buttonSize","labelWidth","getTextWidth","ctx","radio","getDrawables","NumberSelector","min","updateDisabled","isDisabled","leftButtonSprite","rightButtonSprite","disColor","topLabel","color","numberLabel","Colorize","leftButton","rightButton","Black","labelText","addBy","nextCurrent","setCurrent","numberSelector_1","labeledRadio_1","Options","arguments","progressionToggle","itemSize","callbackForEnabling","addGridSize","addDifficultySize","addSoundToggle","addProgressionToggle","toggleCallback","Victory","victoryActor","GameOver","gameOverActor","playerIdleAnimation","getAnimationForAll","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","pointerScope","Input","PointerScope","Canvas","suppressPlayButton","start","loader","Engine","MainMenu","game","sizeProperly","options","help","placeActors","actor","resource","getHeight","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","storyGameWindow_1","gridGameWindow_1","mainMenu","keys","k","addResource"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([278,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst helpMenu = require('./images/helpMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\nconst optionTitle = require('./images/optionTitle.png');\nconst helpTitle = require('./images/helpTitle.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\nconst buttonSound = require('./sounds/button.wav');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    optionTitle: new ex.Texture(optionTitle),\n    helpTitle: new ex.Texture(helpTitle),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n\n    myMono: new ex.Texture(fontMono),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    buttonSound: new ex.Sound(buttonSound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport { Resources, Config, uiHeart}\n","import { Difficulty } from \"./difficulty\";\nimport PlayerSettingsManager from \"./playerSettingsManager\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private constructor() {\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager();\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = PlayerSettingsManager.get();\n        if(ps.isProgressionDisabled()) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return PlayerSettingsManager.get().getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return PlayerSettingsManager.get().getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public isProgressionDisabled() {\n        return PlayerSettingsManager.get().isProgressionDisabled();\n    }\n\n    public progress(): void {\n        if(!PlayerSettingsManager.get().isProgressionDisabled()) {\n            const currentLevel = PlayerSettingsManager.get().getCurrentLevel();\n            const currentStage = PlayerSettingsManager.get().getCurrentStage();\n    \n            if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n                //on the last stage of the level, need to find out if we can move on or just move up stages\n                if(currentLevel === PlayerSettingsManager.get().maxLevel) {\n                    // on the max upgraded level just increase stage\n                    PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n                } else {\n                    PlayerSettingsManager.get().setCurrentStage(1);\n                    PlayerSettingsManager.get().setCurrentLevel(currentLevel + 1);\n                }\n            } else {\n                //move on to the next stage, no extra logic\n                PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n            }  \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        PlayerSettingsManager.get().setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        PlayerSettingsManager.get().setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public setProgressionDisabled(isProgressDisabled: boolean) {\n        return PlayerSettingsManager.get().setProgressionDisabled(isProgressDisabled);\n    }\n\n    public resetProgress(): void {\n        const ps = PlayerSettingsManager.get();\n        if (!ps.isProgressionDisabled()) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        console.log(\"gettinglevelstring\");\n        if (PlayerSettingsManager.get().getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${PlayerSettingsManager.get().getCurrentLevel()}.${PlayerSettingsManager.get().getCurrentStage()}`;\n        }\n    }\n}","import { Engine } from \"excalibur\";\n\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 768; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 3;\n    }\n\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n    private disabled: boolean = false;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        this.disabled = true;\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public enableSound() {\n        this.disabled = false;\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.disabled) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.volume = 0.1;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play();\n            }\n        }\n    }\n\n    public backgroundMusicEnd(): void {\n        if(!this.disabled) {\n            if (this.backgroundSound) {\n                this.backgroundSound.stop();\n                this.backgroundSound = null;\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!this.disabled) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import ProgressionManager from \"../engine/progression/progressionManager\";\n\nexport enum Scenes {\n    STORY_GAME_WINDOW = \"storyGameWindow\",\n    GRID_GAME_WINDOW = \"gridGameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}\n\nexport function getGameWindow(): Scenes {\n    return ProgressionManager.get().isProgressionDisabled()\n        ? Scenes.GRID_GAME_WINDOW \n        : Scenes.STORY_GAME_WINDOW;\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(engine: Engine) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(engine.drawWidth / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(engine.drawHeight / tile.height); \n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows*numberOfCols; row++) {\n\n                tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    public getTileMap(): TileMap {\n        return this.tileMap;\n    }\n}","import { Texture, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n\n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nfunction safePointerUp(onClick: Supplier<void>): (event?: any) => void {\n    return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                onClick();\n            }\n    }\n}\n\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture,\n    safePointerUp\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport SoundManager from \"../../engine/soundManager\";\nimport { Resources } from \"../../resources\";\nimport { safePointerUp } from \"../../engine/helpers\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n    private disabled: boolean;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>, disabled?: boolean) {\n        super();\n        this.disabled = disabled ? disabled : false;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    public getSprite():Sprite {\n        return this.sprite;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return safePointerUp(() => {\n            if (!this.disabled) {\n                this.sprite.clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n                onClick();\n            }\n        });\n    }\n\n    private onDown: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.2))\n        }\n\n    }\n\n    private onEnter: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.1))\n        }\n\n    }\n\n    private onExit: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n        }\n    }\n\n    public setDisabled(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/sizingManager';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight()/2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import ButtonBase from \"./buttonBase\";\nimport { Vector, Engine } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport { Supplier } from \"java8script\";\n\nexport class ExitButton extends ButtonBase {\n\n    public constructor(engine: Engine, onExit: Supplier<void>) {\n        const texture = Resources.uiX;\n        super(texture, onExit);\n        this.scale = new Vector(Config.exitButtonSize / texture.width, Config.exitButtonSize / texture.height);\n        this.setHeight(Config.exitButtonSize);\n        this.setWidth(Config.exitButtonSize);\n        this.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n        this.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    }\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport ProgressionManager from \"./progressionManager\";\nimport * as localForage from \"localforage\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\n\ninterface SaveDataV1 {\n    version: number;\n    soundOff: boolean;\n    progressionDisabled: boolean;\n    chosenDifficulty: number; //difficulty level number\n    chosenGridSize: number;\n    maxLevel: number;\n    maxDifficulty: number; //difficulty level number\n    currentLevel: number;\n    currentStage: number;\n}\n\nexport default class PlayerSettingsManager {\n    private static STORE_KEY = 'player_settings_v1';\n    public static singleton: PlayerSettingsManager;\n    private static DEFAULT: PlayerSettingsManager = new PlayerSettingsManager(false, false, Difficulty.VERY_EASY, 3, 3, Difficulty.NORMAL, 1, 1);\n    //Settings\n    private soundOff: boolean;\n    private progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    public readonly maxLevel: number;\n    public readonly maxDifficulty: Difficulty;\n\n    //Progression\n    private currentLevel: number;\n    private currentStage: number;\n\n    private constructor(toggleSound, progressionDisabled, chosenDiff, chosenGridSize, maxLevel, maxDiff, currentLevel, currentStage) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxLevel = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n    }\n\n    public static get(): PlayerSettingsManager {\n        console.log(this.singleton.serializeV1());\n        return this.singleton;\n    }\n\n    public static initialize(): void {\n        localForage.config({\n            name: 'skeletonFlip',\n            version: 1.0,\n            size: 4980736,\n            storeName: 'playerSettings',\n            description: 'Store save data'\n        });//try with no settings\n        localForage.getItem(PlayerSettingsManager.STORE_KEY, (e, v) => {\n            console.log(v);\n            if(e) {\n                console.log(`problem retrieving from store: ${e}`);\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else if (!v) {\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else {\n                const saveData: any = v;\n                if(saveData.version === 1) {\n                    this.singleton = PlayerSettingsManager.deserializeV1(saveData);\n                }\n            }\n        })\n    }\n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n        this.saveToStorage();\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n        this.saveToStorage();\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n        this.saveToStorage();\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n        this.saveToStorage();\n    }\n\n    public isSoundOff(): boolean {\n        return this.soundOff;\n    }\n\n    public setIsSoundOff(isSoundOff: boolean): void {\n        this.soundOff = isSoundOff;\n        this.saveToStorage();\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n\n    public setProgressionDisabled(isProgDisabled: boolean) {\n        this.progressionDisabled = isProgDisabled;\n        this.saveToStorage();\n    }\n\n    public isProgressionDisabled(): boolean {\n        return this.progressionDisabled;\n    }\n\n    private serializeV1(): SaveDataV1 {\n        return {\n            version: 1,\n            soundOff: this.soundOff,\n            progressionDisabled: this.progressionDisabled,\n            chosenDifficulty: this.chosenDifficulty.getDifficultyLevel(),\n            chosenGridSize: this.chosenGridSize,\n            maxLevel: this.maxLevel,\n            maxDifficulty: this.maxDifficulty.getDifficultyLevel(),\n            currentLevel: this.currentLevel,\n            currentStage: this.currentStage,\n        }\n    }\n\n    private static deserializeV1(save: any): PlayerSettingsManager {\n        return new PlayerSettingsManager(\n            save.soundOff,\n            save.progressionDisabled,\n            Difficulty.getByDifficultyLevel(save.chosenDifficulty),\n            save.chosenGridSize,\n            save.maxLevel,\n            Difficulty.getByDifficultyLevel(save.maxDifficulty),\n            save.currentLevel,\n            save.currentStage);\n    }\n\n    private saveToStorage() {\n        localForage.setItem(\n            PlayerSettingsManager.STORE_KEY,\n            this.serializeV1(),\n        );\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinator } from '../../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport SoundManager from '../../engine/soundManager';\nimport BackgroundManager from '../../engine/backgroundManager';\nimport { Actor, Engine, Color, Texture, Vector } from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport ButtonBase from '../../actors/bars/buttonBase';\nimport { Scenes } from '../scenes';\nimport LevelDisplay from '../../actors/bars/level';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\nimport { ExitButton } from '../../actors/bars/exitButton';\n\nexport abstract class GameWindowBase extends ex.Scene {\n\n  protected coordinator: GameCoordinator;\n  protected engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.coordinator = GameCoordinator.initialize(this.engine);\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    this.coordinator.getAllActors()\n      .forEach(c => this.add(c));\n  }\n\n  public onDeactivate() {\n    this.coordinator.getAllActors()\n      .forEach(c => this.remove(c));\n  }\n} \n","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","import { GameWindowBase } from './gameWindowBase';\nimport ProgressionManager from '../../engine/progression/progressionManager';\n\nexport class GridGameWindow extends GameWindowBase {\n\n  private currentOptionGridSize: number;\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    this.currentOptionGridSize = ProgressionManager.get().getOptionGridSize()\n  }\n\n  //Override\n  public onActivate(): void {\n    const newSize = ProgressionManager.get().getOptionGridSize()\n    if(this.currentOptionGridSize != newSize) {\n      this.currentOptionGridSize = newSize;\n      this.coordinator.resetGame();\n    }\n    super.onActivate();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport SizingManager from \"../../engine/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport SizingManager from \"../engine/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Actor, Scene } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/sizingManager\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine) {\n        this.engine = engine;\n        this.resetGame();\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const coordinator: GameCoordinator = new GameCoordinator(engine);\n        return coordinator;\n    }\n\n    public resetGame(): void {\n        const mm: SizingManager = SizingManager.get();\n        this.healthCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { }, Resources.uiHeart, Config.maxHealth);\n        this.attackCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword);\n        this.gridCoordinator = GridCoordinator.createGrid(this, ProgressionManager.get().getGameGridSize(), this.engine);\n        this.rowCounts = this.createRowCountCards();\n        this.columnCounts = this.createColCountCards();\n    }\n\n    private getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    private getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    private getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    public getAllActors(): Actor[] {\n        return Stream.ofValues<Actor[]>(\n            this.gridCoordinator.getGridAsList(),\n            this.getColCountCards(),\n            this.getRowCountCards(),\n            this.getStatTrackers()\n        ).flatMap(a => Stream.ofValues(...a))\n            .toArray();\n    }\n\n    private updateLabels = () => {\n        console.log(\"doing counts\");\n        this.rowCounts.forEach((count, idx) => {\n            console.log(\"row \" + this.skeletonCountForRow(idx))\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            console.log(\"col \" + this.skeletonCountForCol(idx))\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (this.healthCoordinator.getCurrent() === 0) {\n            this.engine.goToScene(Scenes.GAME_OVER);\n            ProgressionManager.get().resetProgress();\n            this.resetGame();\n        } else if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n            ProgressionManager.get().progress();\n            this.resetGame();\n        }\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\nimport ProgressionManager from \"../../engine/progression/progressionManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return ProgressionManager.get().isProgressionDisabled() ? \"\" :`${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport LevelDisplay from '../../actors/bars/level';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\nimport { GameWindowBase } from './gameWindowBase';\n\nexport class StoryGameWindow extends GameWindowBase {\n\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth / 2, mm.getMenuHeight() - mm.getUIItemSize() / 2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n\n  }\n\n  public onActivate() {\n    super.onActivate();\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n  }\n} \n","\nimport * as React from 'react';\nimport ReactModal = require('react-modal');\nimport { render } from 'react-dom';\nimport { Config } from '../resources';\nconst xButton = require('../images/ui/x.png');\n\nexport class ModalRenderer {\n\n    private isOpen: boolean;\n    private text: string;\n\n    constructor(isOpen: boolean, text: string) {\n        this.isOpen = isOpen;\n        this.text = text;\n    }\n\n    public setText(newText: string) {\n        this.text = newText;\n    }\n\n    public setOpenAndRerender = (isOpen: boolean) => {\n        this.isOpen = isOpen;\n        this.render();\n    }\n\n    private render = () => {\n        render(React.createElement(E, { text: this.text, open: this.isOpen, closeFunc: () => this.setOpenAndRerender(false) }), document.getElementById('modal'));\n    }\n}\n\ninterface Props {\n    open: boolean;\n    closeFunc: () => void;\n    text?: string;\n}\n\ninterface State {\n}\n\nexport default class E extends React.Component<Props, State> {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <ReactModal\n                style={{\n                    content: {\n                        borderRadius: \"0px\",\n                        backgroundColor: '#a77600',\n                        borderWidth: 8,\n                        borderColor: \"#402f08\",\n                        padding: \"16px\",\n                    }\n                }}\n                appElement={document.getElementById('modal')}\n                isOpen={this.props.open}>\n                <div style={{ float: \"right\", height: Config.exitButtonSize, position: \"fixed\", right:\"24px\", top: \"24px\" }}>\n                            <a style={{ }}>\n                                <img height={Config.exitButtonSize} width={Config.exitButtonSize} src={xButton} alt=\"my image\" onPointerUp={this.props.closeFunc} />\n                            </a>\n                        </div>\n                    <div style={{ borderRadius: \"16px\", borderStyle: \"solid\", borderWidth: \"4px\", minHeight: \"95%\", backgroundColor: \"#896000\", borderColor: \"#402f08\", display: \"flex\"}}>\n                        <p style={{padding: \"16px\", margin: \"0px\", fontSize: 20, flex:1}}>\n                            {this.props.text}\n                        </p>\n                    </div>\n            </ReactModal>\n        );\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Actor, Engine } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport { render } from 'react-dom';\nimport E, { ModalRenderer } from '../modal/modal';\nimport { createElement } from 'react';\n\nexport class Help extends ex.Scene {\n\n  private engine: Engine;\n  private modalRenderer: ModalRenderer;\n  private button: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.addTitle();\n    this.modalRenderer = new ModalRenderer(false, \"BIG TEXET\");\n\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.helpMenu, 0.4, 0.5);\n\n    this.button = new ButtonBase(Resources.helpMenu, () => {\n      this.modalRenderer.setText(\"The goal of this game is to flip all the cards on the board without running out of your hearts.Finding a skeleton will remove a heart, but finding swords and potions will keep you alive! The numbers on the edge of the board represent how many unflipped skeletons are in that row or column. Collecting swords will protect you from the next skeleton you find, collecting potions will restore a lost heart.\");\n      this.modalRenderer.setOpenAndRerender(true);\n    });\n    this.button.x = engine.drawWidth/2\n    this.button.y = engine.drawHeight/2;\n    this.button.setHeight(dims.height);\n    this.button.setWidth(dims.width);\n    this.button.scale = dims.scale;\n    this.add(this.button);\n    \n  }\n  \n  public onActivate() {\n    //this.modalRenderer.setOpenAndRerender(true);\n  }\n  \n  public onDeactivate() {\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.helpTitle, 0.6, 1);\n    const sprite = Resources.helpTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth/2;\n    title.y = dims.height/2+ Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale; \n    this.add(title);\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier, Function, Optional, Consumer } from \"java8script\";\nimport SoundManager from \"../../engine/soundManager\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n    private onToggle: Optional<Consumer<boolean>>\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean, onToggle?: Consumer<boolean>) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n        this.onToggle = Optional.ofNullable(onToggle);\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound)\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.onToggle.ifPresent(func => func(this.checked));\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine, onToggle?: (checked:boolean) => void) {\n        const textSize = size - (size * 0.25)\n        const buttonSize = size + (size * 0.25);\n        \n\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = textSize;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(buttonSize, x+labelWidth*(3/4), y, defaultVal, onToggle);\n        \n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign, Color, Sprite } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/fontManager\";\nimport { Colorize } from \"excalibur/dist/Drawing/SpriteEffects\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButtonSprite:Sprite;\n    private leftButton: ButtonBase;\n    private rightButtonSprite: Sprite;\n    private rightButton: ButtonBase;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number, disabled: boolean) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n\n        const textSize = this.fontSize - (this.fontSize * 0.25)\n        const buttonSize = this.fontSize + (this.fontSize * 0.25);\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = textSize\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        \n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+buttonSize, null, FontManager.get().getMono());\n        this.numberLabel.fontSize = textSize\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        \n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButtonSprite = this.leftButton.getSprite();\n        this.leftButton.x = x - buttonSize*1.5\n        this.leftButton.y = y + buttonSize;\n        this.leftButton.scale = new Vector(buttonSize/Resources.uiLeft.width, buttonSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(buttonSize);\n        this.leftButton.setWidth(buttonSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButtonSprite = this.rightButton.getSprite();\n        this.rightButton.x = x + buttonSize*1.5;\n        this.rightButton.y = y + buttonSize;\n        this.rightButton.scale = new Vector(buttonSize/Resources.uiRight.width, buttonSize/Resources.uiRight.height);\n        this.rightButton.setHeight(buttonSize);\n        this.rightButton.setWidth(buttonSize);\n\n        this.updateDisabled(disabled);\n    }\n\n    public updateDisabled = (isDisabled: boolean) => {\n        this.leftButtonSprite.clearEffects();\n        this.rightButtonSprite.clearEffects();\n        if(isDisabled) {\n            const disColor = Color.Gray;\n            this.topLabel.color = disColor\n            this.numberLabel.color = disColor;\n            this.leftButtonSprite.addEffect(new Colorize(disColor));\n            this.rightButtonSprite.addEffect(new Colorize(disColor));\n            this.leftButton.setDisabled(true);\n            this.rightButton.setDisabled(true);\n        } else {\n            this.topLabel.color = Color.Black;\n            this.numberLabel.color = Color.Black;\n            this.leftButton.setDisabled(false);\n            this.rightButton.setDisabled(false);\n        }\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Label, Color, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { MainMenu } from './mainMenu';\nimport RadioButton from '../actors/bars/radioButton';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SoundManager from '../engine/soundManager';\nimport SizingManager from '../engine/sizingManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport { Consumer } from 'java8script';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport { ExitButton } from '../actors/bars/exitButton';\n\nexport class Options extends ex.Scene {\n\n  private engine;\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n  private progressionToggle: LabeledRadio;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n    const itemSize = SizingManager.get().getUIItemSize();\n\n    const callbackForEnabling = this.addGridSize(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addSoundToggle(itemSize);\n    this.addTitle();\n    this.addProgressionToggle(itemSize, callbackForEnabling)\n\n\n    this.add(new ExitButton(engine, this.onExit));\n  }\n\n  private onExit = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    ProgressionManager.get().setProgressionDisabled(!this.progressionToggle.isChecked());\n    PlayerSettingsManager.get().setIsSoundOff(!this.sound.isChecked())\n    if (this.sound.isChecked()) {\n      SoundManager.get().enableSound();\n    } else {\n      SoundManager.get().disableSound();\n    }\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.optionTitle, 0.6, 1);\n    const sprite = Resources.optionTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth/2;\n    title.y = dims.height/2+ Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale; \n    this.add(title);\n  }\n  \n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 - itemSize*2.5 - Config.optionPadding, !PlayerSettingsManager.get().isSoundOff(), this.engine);\n\n    this.sound.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 - itemSize*0.5 - Config.optionPadding, itemSize, false);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addProgressionToggle(itemSize, toggleCallback: Consumer<boolean>) {\n    this.progressionToggle = new LabeledRadio(\"Story Mode\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 + itemSize*1 + Config.optionPadding, !ProgressionManager.get().isProgressionDisabled(), this.engine, toggleCallback);\n\n    this.progressionToggle.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  //returns callback for toggling the objects\n  private addGridSize(itemSize): Consumer<boolean> {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 + itemSize*3 + Config.optionPadding, itemSize, !ProgressionManager.get().isProgressionDisabled());\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n\n      return this.gridSize.updateDisabled;\n  }\n\n  public onActivate() {\n    //todo pretty sure don't need these\n    //this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize());\n    //this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel());\n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport {calcDimensionsSingleObjectTexture, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1.5)\n    victoryActor.setHeight(engine.drawHeight);// set height/width so you can tap anywhere on the screen\n    victoryActor.setWidth(engine.drawWidth);\n    victoryActor.scale = dims.scale;\n    victoryActor.on('pointerup', safePointerUp(() => {\n      this.engine.goToScene(getGameWindow());\n    }));\n    this.add(victoryActor);\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    const dims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = dims.scale;\n    gameOverActor.on('pointerup', safePointerUp(() => {\n      this.engine.goToScene(Scenes.MAIN_MENU);\n    }));\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      pointerScope: ex.Input.PointerScope.Canvas, //make it so clicks don't go \"through\" the help modals\n      suppressPlayButton: true //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport SoundManager from '../engine/soundManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(getGameWindow()),\n    );\n    this.sizeProperly(this.start, 0.4, 0.5, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => this.game.goToScene(Scenes.OPTIONS),\n    );\n    this.sizeProperly(this.options, 0.4, 0.5, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => this.game.goToScene(Scenes.HELP),\n    );\n    this.sizeProperly(this.help, 0.4, 0.5, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.title.addDrawing(Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicEnd();\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"00f14d085530ea0ae58c17a32b3fe27f.wav\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"1b708fab0fb46c4291e239a822e3d553.png\";","module.exports = __webpack_public_path__ + \"5bbe8e44117d6281e0990e5a0213c814.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"6f20cd91097c8be0d36eaad2bf6244ec.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { GameWindowBase } from './scenes/gameWindows/gameWindowBase';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/sizingManager';\nimport PlayerSettingsManager from './engine/progression/playerSettingsManager';\nimport { StoryGameWindow } from './scenes/gameWindows/storyGameWindow';\nimport { GridGameWindow } from './scenes/gameWindows/gridGameWindow';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.STORY_GAME_WINDOW, new StoryGameWindow(game));\ngame.add(Scenes.GRID_GAME_WINDOW, new GridGameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, new Options(game));\ngame.add(Scenes.HELP, new Help(game));\n\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  SizingManager.initialize(game);\n  PlayerSettingsManager.initialize();\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}