{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/levelOne.ts","webpack:///./src/index.ts","webpack:///./src/images/title.png","webpack:///./src/actors/card/card.ts","webpack:///./src/resources.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","101","t","e","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","this","__extends","setPrototypeOf","__proto__","Array","constructor","create","excalibur_1","StatTracker","_super","enabled","x","y","texture","_this","sprite","Sprite","width","height","addDrawing","setHeight","setWidth","scale","Vector","setEnabled","clearEffects","opacity","DISABLED_OPACITY","isEnabled","Actor","Scenes","GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","java8script_1","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","Stream","range","map","idx","toArray","add","subtract","getCurrent","getStatActors","numberCoordinator_1","card_1","resources_1","gridCoordinator_1","scenes_1","count_1","GameCoordinatior","engine","healthCoordinator","attackCoordinator","skeletonCardCallback","updateLabels","checkIfCompleteGame","coinCardCallback","attackCardCallback","potionCardCallback","initialize","coordinator","Config","maxHealth","goToScene","Resources","uiHeart","maxAttack","uiSword","gridCoordinator","GridCoordinator","createGrid","gridSize","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","center","drawWidth","drawHeight","of","getRow","card","getCol","skeletonCountForCol","skeletonCountForRow","row","filter","isFlipped","type","CardType","SKELETON","count","col","getGridAsList","forEach","setCount","allMatch","ex","coordinator_1","GameWindow","onInitialize","onActivate","ofValues","flatMap","onDeactivate","remove","Scene","levelOne_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","game","MainMenu","GameOver","Victory","loader","GameLoader","keys","k","addResource","start","then","46","COIN","POTION","ATTACK","Card","screenCenter","onClick","faceColor","playSound","sound","cardType","boneSound","swordSound","coinSound","potionSound","play","passedInOnClick","flipped","cardWidth","cardHeight","on","fullOnClick","calcX","calcY","f","gridPadding","asSprite","setDrawing","cardSound","skeleton","Color","White","skull","potion","Red","attack","Gray","sword","coin","Yellow","startMenu","optionMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","victory","laughSound","Texture","gameOver","0","2","3","4","5","6","7","8","9","Sound","gridOffset","skeletonDifficultyFactor","buffDifficultyFactor","backgroundColor","victoryActor","stop","gameOverActor","playerIdleAnimation","SpriteSheet","getAnimationForAll","logoImg","toString","logo","logoHeight","logoWidth","Loader","Game","displayMode","DisplayMode","FullScreen","Engine","screenWidth","screenHeight","startActor","MenuButton","optionActor","titleActor","buttonScale","Count","index","initialCount","leftSide","top","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","a","Function","identity","getCard","rowIndex","colIndex","rowNum","blankGridRow","columnIndex","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","initializeBuffs","needMoreBuffs","generateBuffCard","Math","random","ceil","floor","coord","94","95","96","97","98","99"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([222,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = __webpack_public_path__ + \"965a27cff1d4258fa5cd446cc3aad69d.png\";","module.exports = __webpack_public_path__ + \"04bae7f03193a414f9a11713d3a05357.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"7f0a2a655d51479def4f8b21fd3b5738.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"b4c4a5b43037b15315c6c75870cbb701.png\";","module.exports = __webpack_public_path__ + \"8c1509dd1b13c9b73931d6618c43997a.png\";","module.exports = __webpack_public_path__ + \"3e597a67bfe1e56605598b0b20f7c961.png\";","module.exports = __webpack_public_path__ + \"419e057f2b0e2d8670422004f5820c24.png\";","module.exports = __webpack_public_path__ + \"040adb5051047f4fef1d17a65a486b10.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport { Resources, uiHeart } from \"../../resources\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.addDrawing(this.sprite);\n        this.setHeight(50);\n        this.setWidth(50);\n        this.scale = new Vector(0.25, 0.25);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * 50), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * 50), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream, Function, Optional } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Label } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport { MainMenu } from \"../scenes/mainMenu\";\n\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinatior implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinatior {\n        const coordinator: GameCoordinatior = new GameCoordinatior(\n            engine,\n            NumberCoordinator.create(50, 50, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(50, 100, Config.maxAttack, () => { }, Resources.uiSword)\n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, Config.gridSize, engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n    \n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n       const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n        }\n    } \n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinatior } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport { Color } from 'excalibur';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator;\n\n  public onInitialize(engine: ex.Engine) {\n  }\n\n  public onActivate() {\n\n    const coordinator: GameCoordinatior = GameCoordinatior.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n      Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n  }\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n\n  }\n} \n","import * as ex from 'excalibur';\nimport { GameWindow } from './scenes/levelOne';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\n\nconst game = new Game();\ngame.add(Scenes.MAIN_MENU, new MainMenu(game));\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  game.goToScene(Scenes.MAIN_MENU);\n});\n","module.exports = __webpack_public_path__ + \"32e41cd2c45011981855c5231583be07.png\";","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector } from 'excalibur';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        this.addDrawing(\"base\", Card.sprite(Resources.card));\n        this.addDrawing(\"flip\", Card.sprite(this.texture));\n        this.setWidth(Config.cardWidth);\n        this.setHeight(Config.cardHeight);\n        //this.anchor = new ex.Vector(0,0);\n        this.on(\"pointerdown\", this.fullOnClick);\n        this.x = Card.calcX(col, row, screenCenter) + Config.cardWidth/2; //adding on padding for drawing from center of card\n        this.y = Card.calcY(col, row, screenCenter) + Config.cardHeight/2;\n    }\n\n    private static calcX(col: number, row: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((Config.gridSize / 2) * Config.cardWidth)\n            - ((Config.gridSize - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (Config.cardWidth * col) + (Config.gridPadding * col)\n\n    }\n\n    private static calcY(col: number, row: number, center: ex.Vector) {\n        const top = center.y\n            - ((Config.gridSize / 2) * Config.cardHeight)\n            - ((Config.gridSize - 1) * Config.gridPadding) / 2;\n\n        return top + (Config.cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    private static sprite(texture: ex.Texture): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = new Vector(0.5, 0.5);\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            Resources.cardSound.play(0.3).then(this.playSound)\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: ()=>void = () =>  {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        sound.play();\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import * as ex from 'excalibur';\nimport { Color } from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu),    \n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    \n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 8,\n    gridSize: 4,\n    gridOffset: 100,\n    cardHeight: 90,\n    cardWidth: 75,\n    skeletonDifficultyFactor: 2.0, //easy 3 (30%), medium 2.5 (40%), hard 2 (50%)\n    buffDifficultyFactor: 3, //easy 0, med 1, hard 2\n    backgroundColor: Color.Gray,\n};\n\nexport { Resources, Config, uiHeart}\n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\n\nexport class Victory extends ex.Scene {\n\n\n  public onInitialize(engine: ex.Engine) {\n  }\n  public onActivate() {\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth/2;\n    victoryActor.y = this.engine.drawHeight/2;\n    victoryActor.setHeight(360);\n    victoryActor.setWidth(480);\n    victoryActor.on('pointerdown', () => this.engine.goToScene(Scenes.MAIN_MENU));\n    this.add(victoryActor);\n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\n\nexport class GameOver extends ex.Scene {\n\n\n  public onInitialize(engine: ex.Engine) {\n  }\n  public onActivate() {\n    Resources.laughSound.play();\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3,1,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(360);\n    gameOverActor.setWidth(360);\n    gameOverActor.on('pointerdown', () => this.engine.goToScene(Scenes.MAIN_MENU));\n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 96;\n        this.logoWidth = 480;\n    }\n}","import * as ex from 'excalibur';\nimport { Config } from '../resources';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      displayMode: ex.DisplayMode.FullScreen \n    });\n    this.backgroundColor = Config.backgroundColor;\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import * as ex from 'excalibur';\nimport { Label, Actor, Vector, Engine, SpriteSheet } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Supplier } from 'java8script';\n\nexport class MainMenu extends ex.Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.engine = engine;\n  }\n\n  public onActivate() {\n\n\n    const startActor = new MenuButton(\n      Resources.startMenu, () => this.engine.goToScene(Scenes.GAME_WINDOW)\n    );\n    startActor.x = this.screenWidth/2;\n    startActor.y = this.screenHeight/2 - startActor.drawHeight/2 - Config.gridPadding;\n\n    this.add(startActor)\n\n    const optionActor = new MenuButton(\n      Resources.optionMenu,\n      () => {}\n    );\n    optionActor.x = this.screenWidth/2;\n    optionActor.y = this.screenHeight/2 + optionActor.drawHeight/2 + Config.gridPadding;\n    this.add(optionActor)\n\n    const title = Resources.title.asSprite();\n    const titleActor = new Actor();\n    titleActor.addDrawing(title);\n    titleActor.x = this.screenWidth/2;\n    titleActor.y = this.screenHeight/2 - startActor.drawHeight*2;\n    this.add(titleActor);\n  \n  }\n  public onDeactivate() {}\n}\n\nclass MenuButton extends ex.Actor {\n  static buttonScale = new Vector(0.4, 0.4);\n  public drawHeight: number;\n\n  public constructor(texture: ex.Texture, onClick: Supplier<void>) {\n    super();\n    const sprite = texture.asSprite();\n    sprite.scale = MenuButton.buttonScale;\n    this.addDrawing(sprite)\n    this.setHeight(sprite.drawHeight);\n    this.setWidth(sprite.drawWidth);\n    this.on(\"pointerdown\", onClick);\n    this.drawHeight = sprite.drawHeight;\n  }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        this.addDrawing(\"0\", Count.sprite(Resources[0]));\n        this.addDrawing(\"1\", Count.sprite(Resources[1]));\n        this.addDrawing(\"2\", Count.sprite(Resources[2]));\n        this.addDrawing(\"3\", Count.sprite(Resources[3]));\n        this.addDrawing(\"4\", Count.sprite(Resources[4]));\n        this.addDrawing(\"5\", Count.sprite(Resources[5]));\n        this.addDrawing(\"6\", Count.sprite(Resources[6]));\n        this.addDrawing(\"7\", Count.sprite(Resources[7]));\n        this.addDrawing(\"8\", Count.sprite(Resources[8]));\n        this.addDrawing(\"9\", Count.sprite(Resources[9]));\n\n        this.setWidth(Config.cardWidth);\n        this.setHeight(Config.cardHeight);\n        this.x = Count.calcX(type, index, screenCenter) + Config.cardWidth/2;\n        this.y = Count.calcY(type, index, screenCenter) + Config.cardHeight/2;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((Config.gridSize / 2) * Config.cardWidth)\n            - Config.cardWidth\n            - ((Config.gridSize+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + Config.cardWidth + (Config.cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector): number {\n        const top = center.y\n            - ((Config.gridSize/2)* Config.cardHeight)\n            - Config.cardHeight\n            - ((Config.gridSize+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + Config.cardHeight + (Config.cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = new ex.Vector(0.5, 0.5);\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function, Supplier } from \"java8script\";\nimport { Config } from \"../resources\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / Config.skeletonDifficultyFactor);\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - Config.buffDifficultyFactor;\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"58a173980e88f9c87fc59189eecffa32.png\";"],"sourceRoot":""}