{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/images/title.png","webpack:///./src/actors/card/card.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/levelOne.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","excalibur_1","sword","skull","potion","coin","card","startMenu","optionMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","Resources","Texture","gameOver","0","2","3","4","5","6","7","8","9","Sound","Config","maxHealth","maxAttack","gridPadding","gridSize","gridOffset","cardHeight","cardWidth","skeletonDifficultyFactor","buffDifficultyFactor","backgroundColor","Color","Gray","Scenes","GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","resources_1","SoundManager","soundManager","backgroundMusicStart","this","backgroundSound","loop","play","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","e","t","__extends","setPrototypeOf","__proto__","Array","constructor","create","CardType","SpriteEffects_1","soundManager_1","COIN","SKELETON","POTION","ATTACK","Card","_super","screenCenter","col","row","onClick","faceColor","type","texture","_this","onEnter","baseSprite","clearEffects","addEffect","Darken","onExit","playSound","cardType","passedInOnClick","flipped","sprite","addDrawing","setWidth","setHeight","on","fullOnClick","x","calcX","y","calcY","center","Sprite","width","height","scale","Vector","setDrawing","getRow","getCol","isFlipped","skeleton","White","Red","attack","Yellow","Actor","scenes_1","Victory","onInitialize","engine","onActivate","victoryActor","asSprite","drawWidth","drawHeight","goToScene","add","onDeactivate","Scene","GameOver","console","log","gameOverActor","playerIdleAnimation","SpriteSheet","getAnimationForAll","stop","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","displayMode","DisplayMode","FullScreen","start","loader","Engine","MainMenu","screenWidth","screenHeight","startActor","MenuButton","optionActor","titleActor","onDown","buttonScale","Count","index","initialCount","setCount","leftSide","top","count","card_1","java8script_1","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","Stream","of","map","a","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","filter","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","Math","random","attackCardCallback","potionCardCallback","ceil","floor","createGrid","coord","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getCurrent","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","GameCoordinatior","healthCoordinator","attackCoordinator","updateLabels","checkIfCompleteGame","initialize","coordinator","gridCoordinator","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","skeletonCountForCol","skeletonCountForRow","forEach","allMatch","coordinator_1","GameWindow","remove","levelOne_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","game","keys","k","addResource"],"mappings":"aACA,SAAAA,EAAAC,GAOA,IANA,IAKAC,EAAAC,EALAC,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAGAM,EAAA,EAAAC,KACQD,EAAAH,EAAAK,OAAoBF,IAC5BJ,EAAAC,EAAAG,GACAG,EAAAP,IACAK,EAAAG,KAAAD,EAAAP,GAAA,IAEAO,EAAAP,GAAA,EAEA,IAAAD,KAAAG,EACAO,OAAAC,UAAAC,eAAAC,KAAAV,EAAAH,KACAc,EAAAd,GAAAG,EAAAH,IAIA,IADAe,KAAAhB,GACAO,EAAAC,QACAD,EAAAU,OAAAV,GAOA,OAHAW,EAAAR,KAAAS,MAAAD,EAAAb,OAGAe,IAEA,SAAAA,IAEA,IADA,IAAAC,EACAf,EAAA,EAAiBA,EAAAY,EAAAV,OAA4BF,IAAA,CAG7C,IAFA,IAAAgB,EAAAJ,EAAAZ,GACAiB,KACAC,EAAA,EAAkBA,EAAAF,EAAAd,OAA2BgB,IAAA,CAC7C,IAAAC,EAAAH,EAAAE,GACA,IAAAf,EAAAgB,KAAAF,MAEAA,IACAL,EAAAQ,OAAApB,IAAA,GACAe,EAAAM,IAAAC,EAAAN,EAAA,KAGA,OAAAD,EAIA,IAAAQ,KAKApB,GACAqB,EAAA,GAGAZ,KAGA,SAAAS,EAAA1B,GAGA,GAAA4B,EAAA5B,GACA,OAAA4B,EAAA5B,GAAA8B,QAGA,IAAAC,EAAAH,EAAA5B,IACAK,EAAAL,EACAgC,KACAF,YAUA,OANAhB,EAAAd,GAAAa,KAAAkB,EAAAD,QAAAC,IAAAD,QAAAJ,GAGAK,EAAAC,KAGAD,EAAAD,QAKAJ,EAAAO,EAAAnB,EAGAY,EAAAQ,EAAAN,EAGAF,EAAAS,EAAA,SAAAL,EAAAM,EAAAC,GACAX,EAAAY,EAAAR,EAAAM,IACA1B,OAAA6B,eAAAT,EAAAM,GACAI,gBACAC,cACAC,IAAAL,KAMAX,EAAAiB,EAAA,SAAAb,GACApB,OAAA6B,eAAAT,EAAA,cAAiDc,YAIjDlB,EAAAmB,EAAA,SAAAd,GACA,IAAAM,EAAAN,KAAAe,WACA,WAA2B,OAAAf,EAAAgB,SAC3B,WAAiC,OAAAhB,GAEjC,OADAL,EAAAS,EAAAE,EAAA,IAAAA,GACAA,GAIAX,EAAAY,EAAA,SAAAU,EAAAC,GAAsD,OAAAvC,OAAAC,UAAAC,eAAAC,KAAAmC,EAAAC,IAGtDvB,EAAAwB,EAAA,GAEA,IAAAC,EAAAC,OAAAC,aAAAD,OAAAC,iBACAC,EAAAH,EAAA1C,KAAA8C,KAAAJ,GACAA,EAAA1C,KAAAX,EACAqD,IAAAK,QACA,QAAAnD,EAAA,EAAgBA,EAAA8C,EAAA5C,OAAuBF,IAAAP,EAAAqD,EAAA9C,IACvC,IAAAU,EAAAuC,EAIArC,EAAAR,MAAA,QAEAU,6FCrIA,IAAAsC,EAAA/B,EAAA,GACAgC,EAAAhC,EAAA,GACMiC,EAAQjC,EAAQ,KAChBkC,EAAQlC,EAAQ,KAChBmC,EAASnC,EAAQ,KACjBoC,EAAOpC,EAAQ,KACfqC,EAAOrC,EAAQ,KACfsC,EAAYtC,EAAQ,KACpBuC,EAAavC,EAAQ,KACrBwC,EAAQxC,EAAQ,IAChByC,EAAczC,EAAQ,KACtB0C,EAAO1C,EAAQ,KACf2C,EAAM3C,EAAQ,KACd4C,EAAM5C,EAAQ,KACd6C,EAAQ7C,EAAQ,KAChB8C,EAAO9C,EAAQ,KACf+C,EAAO/C,EAAQ,KACfgD,EAAMhD,EAAQ,KACdiD,EAAQjD,EAAQ,KAChBkD,EAAQlD,EAAQ,KAChBmD,EAAOnD,EAAQ,KACfoD,EAAUpD,EAAQ,KAClBqD,EAAUrD,EAAQ,KAyDII,EAAAiD,UAxD5B,IAAMC,EAAUtD,EAAQ,KAClBuD,EAAYvD,EAAQ,KACpBwD,EAAcxD,EAAQ,KACtByD,EAAYzD,EAAQ,KACpB0D,EAAa1D,EAAQ,KACrB2D,EAAa3D,EAAQ,IACrB4D,EAAY5D,EAAQ,IACpB6D,EAAkB7D,EAAQ,IAC1B8D,EAAe9D,EAAQ,IAEvB+D,GACFT,QAAS,IAAIvB,EAAGiC,QAAQV,GACxBW,SAAU,IAAIlC,EAAGiC,QAAQvB,GACzBD,MAAO,IAAIT,EAAGiC,QAAQxB,GACtBP,MAAO,IAAIF,EAAGiC,QAAQ/B,GACtBC,MAAO,IAAIH,EAAGiC,QAAQ9B,GACtBC,OAAQ,IAAIJ,EAAGiC,QAAQ7B,GACvBC,KAAM,IAAIL,EAAGiC,QAAQ5B,GACrBC,KAAM,IAAIN,EAAGiC,QAAQ3B,GACrBC,UAAW,IAAIP,EAAGiC,QAAQ1B,GAC1BC,WAAY,IAAIR,EAAGiC,QAAQzB,GAC3B2B,EAAG,IAAInC,EAAGiC,QAAQtB,GAClBvC,EAAG,IAAI4B,EAAGiC,QAAQrB,GAClBwB,EAAG,IAAIpC,EAAGiC,QAAQpB,GAClBwB,EAAG,IAAIrC,EAAGiC,QAAQnB,GAClBwB,EAAG,IAAItC,EAAGiC,QAAQlB,GAClBwB,EAAG,IAAIvC,EAAGiC,QAAQjB,GAClBwB,EAAG,IAAIxC,EAAGiC,QAAQhB,GAClBwB,EAAG,IAAIzC,EAAGiC,QAAQf,GAClBwB,EAAG,IAAI1C,EAAGiC,QAAQd,GAClBwB,EAAG,IAAI3C,EAAGiC,QAAQb,GAClBC,QAAS,IAAIrB,EAAGiC,QAAQZ,GACxBC,QAAS,IAAItB,EAAGiC,QAAQX,GACxBE,UAAW,IAAIxB,EAAG4C,MAAMpB,GACxBE,UAAW,IAAI1B,EAAG4C,MAAMlB,GACxBG,UAAW,IAAI7B,EAAG4C,MAAMf,GACxBD,WAAY,IAAI5B,EAAG4C,MAAMhB,GACzBH,YAAa,IAAIzB,EAAG4C,MAAMnB,GAC1BE,WAAY,IAAI3B,EAAG4C,MAAMjB,GACzBI,aAAc,IAAI/B,EAAG4C,MAAMb,GAC3BD,gBAAiB,IAAI9B,EAAG4C,MAAMd,IAgBzBzD,EAAA2D,YAbT,IAAMa,GACFC,UAAW,EACXC,UAAW,EACXC,YAAa,EACbC,SAAU,EACVC,WAAY,IACZC,WAAY,GACZC,UAAW,GACXC,yBAA0B,EAC1BC,qBAAsB,EACtBC,gBAAiBtD,EAAAuD,MAAMC,MAGPpF,EAAAwE,gGC/EpB,SAAYa,GACRA,EAAAC,YAAA,aACAD,EAAAE,UAAA,WACAF,EAAAG,UAAA,WACAH,EAAAI,QAAA,UAJJ,CAAYzF,EAAAqF,SAAArF,EAAAqF,kGCCZ,IAAAK,EAAA9F,EAAA,GAEA+F,EAAA,oBAAAA,KA4CA,OApCkBA,EAAA/E,IAAd,WACI,OAAI+E,EAAaC,aACND,EAAaC,cAEpBD,EAAaC,aAAe,IAAID,EACzBA,EAAaC,eAIrBD,EAAA9G,UAAAgH,qBAAP,WACSC,KAAKC,kBACND,KAAKC,gBAAkBL,EAAA/B,UAAUF,gBACjCqC,KAAKC,gBAAgBC,QACrBF,KAAKC,gBAAgBE,KAAK,MAM3BN,EAAA9G,UAAAqH,mBAAP,SAA0BC,EAAcC,GAChCN,KAAKO,cAAgBP,KAAKO,aAAaC,cACvCR,KAAKO,aAAaE,QAClBT,KAAKO,aAAe,MAExBP,KAAKU,mBAAmBL,EAAOC,IAG3BT,EAAA9G,UAAA2H,mBAAR,SAA2BL,EAAcC,GACrCN,KAAKO,aAAeF,EAChBC,EACAD,EAAMF,OAAOQ,KAAKL,GAElBD,EAAMF,QAIlBN,EA5CA,GAAAe,EAAAzF,QAAAT,GAAA,8BAAAmG,EAAAD,EAAA3F,GCHAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GAAA,iBAAAF,EAAAL,EAAAsF,WAAAc,YAAA/F,EAAAjC,OAAAiI,iBAAAC,wBAAAC,OAAA,SAAAJ,EAAAD,GAAAC,EAAAG,UAAAJ,IAAA,SAAAC,EAAAD,GAAA,QAAA3F,KAAA2F,IAAA5H,eAAAiC,KAAA4F,EAAA5F,GAAA2F,EAAA3F,KAAA,SAAA4F,EAAAD,GAAA,SAAA3F,IAAA+E,KAAAkB,YAAAL,EAAA9F,EAAA8F,EAAAD,GAAAC,EAAA9H,UAAA,OAAA6H,EAAA9H,OAAAqI,OAAAP,IAAA3F,EAAAlC,UAAA6H,EAAA7H,UAAA,IAAAkC,KAAAnC,OAAA6B,eAAAiG,EAAA,cAAA5F,OAAA,ICAA,IAOYoG,EAPZvF,EAAA/B,EAAA,GACA8F,EAAA9F,EAAA,GAEAgC,EAAAhC,EAAA,GACAuH,EAAAvH,EAAA,GACAwH,EAAAxH,EAAA,KAEA,SAAYsH,GACRA,EAAAG,KAAA,OACAH,EAAAI,SAAA,WACAJ,EAAAK,OAAA,SACAL,EAAAM,OAAA,SAJJ,CAAYN,EAAAlH,EAAAkH,WAAAlH,EAAAkH,cAWZ,IAAAO,EAAA,SAAAC,GAWI,SAAAD,EAAmBE,EAAyBC,EAAaC,EAAaC,EAAyBC,EAAqBC,EAAgBC,GAApI,IAAAC,EACIR,EAAA3I,KAAA+G,OAAOA,YAmBHoC,EAAAC,QAAsB,WAC1BD,EAAKE,WAAWC,eAChBH,EAAKE,WAAWE,UAAU,IAAInB,EAAAoB,OAAO,MAG/BL,EAAAM,OAAqB,WAC3BN,EAAKE,WAAWC,gBAwCZH,EAAAO,UAAsB,WAC1B,IAAItC,EACA+B,EAAKQ,WAAaxB,EAASI,SAC3BnB,EAAQT,EAAA/B,UAAUN,UACX6E,EAAKQ,WAAaxB,EAASM,OAClCrB,EAAQT,EAAA/B,UAAUL,WACX4E,EAAKQ,WAAaxB,EAASG,KAClClB,EAAQT,EAAA/B,UAAUH,UACX0E,EAAKQ,WAAaxB,EAASK,SAClCpB,EAAQT,EAAA/B,UAAUP,aAEtBgE,EAAAnG,QAAaL,MAAMsF,mBAAmBC,IA3EtC+B,EAAKQ,SAAWV,EAChBE,EAAKS,gBAAkBb,EACvBI,EAAKL,IAAMA,EACXK,EAAKN,IAAMA,EACXM,EAAKU,WACLV,EAAKD,QAAUA,EACfC,EAAKE,WAAaX,EAAKoB,OAAOnD,EAAA/B,UAAU1B,MACxCiG,EAAKY,WAAW,OAAQZ,EAAKE,YAC7BF,EAAKY,WAAW,OAAQrB,EAAKoB,OAAOX,EAAKD,UACzCC,EAAKa,SAASrD,EAAAlB,OAAOO,WACrBmD,EAAKc,UAAUtD,EAAAlB,OAAOM,YACtBoD,EAAKe,GAAG,YAAaf,EAAKgB,aAC1BhB,EAAKe,GAAG,eAAgBf,EAAKC,SAC7BD,EAAKe,GAAG,eAAgBf,EAAKM,QAC7BN,EAAKiB,EAAI1B,EAAK2B,MAAMxB,EAAKC,EAAKF,GAAgBjC,EAAAlB,OAAOO,UAAU,EAC/DmD,EAAKmB,EAAI5B,EAAK6B,MAAM1B,EAAKC,EAAKF,GAAgBjC,EAAAlB,OAAOM,WAAW,EAAA5E,EA0FxE,OAtH0B0G,EAAAa,EAAAC,GAwCPD,EAAA2B,MAAf,SAAqBxB,EAAaC,EAAa0B,GAK3C,OAJiBA,EAAOJ,EAChBzD,EAAAlB,OAAOI,SAAW,EAAKc,EAAAlB,OAAOO,WAC9BW,EAAAlB,OAAOI,SAAW,GAAKc,EAAAlB,OAAOG,YAAe,EAElCe,EAAAlB,OAAOO,UAAY6C,EAAQlC,EAAAlB,OAAOG,YAAciD,GAGxDH,EAAA6B,MAAf,SAAqB1B,EAAaC,EAAa0B,GAK3C,OAJYA,EAAOF,EACX3D,EAAAlB,OAAOI,SAAW,EAAKc,EAAAlB,OAAOM,YAC9BY,EAAAlB,OAAOI,SAAW,GAAKc,EAAAlB,OAAOG,YAAe,EAEvCe,EAAAlB,OAAOM,WAAa+C,EAAQnC,EAAAlB,OAAOG,YAAckD,GAGpDJ,EAAAoB,OAAf,SAAsBZ,GAClB,IAAMY,EAAoB,IAAIjH,EAAA4H,OAAOvB,EAAS,EAAG,EAAGA,EAAQwB,MAAOxB,EAAQyB,QAE3E,OADAb,EAAOc,MAAQ,IAAI/H,EAAAgI,OAAO,GAAK,IACxBf,GAGHpB,EAAA5I,UAAAqK,YAAR,WACSpD,KAAK8C,UACN9C,KAAK8C,WACL9C,KAAK+D,WAAW,QAChBzC,EAAAnG,QAAaL,MAAMsF,mBACfR,EAAA/B,UAAUR,UACV2C,KAAK2C,WAET3C,KAAK6C,oBAGNlB,EAAA5I,UAAAmJ,KAAP,WACI,OAAOlC,KAAK4C,UAiBTjB,EAAA5I,UAAAiL,OAAP,WACI,OAAOhE,KAAK+B,KAGTJ,EAAA5I,UAAAkL,OAAP,WACI,OAAOjE,KAAK8B,KAGTH,EAAA5I,UAAAmL,UAAP,WACI,OAAOlE,KAAK8C,SAGFnB,EAAAwC,SAAd,SAAuBtC,EAAyBE,EAAaD,EAAaE,GACtE,OAAO,IAAIL,EAAKE,EAAcC,EAAKC,EAAKC,EAASnG,EAAGwD,MAAM+E,MAAOhD,EAASI,SAAU5B,EAAA/B,UAAU7B,QAGpF2F,EAAA1F,OAAd,SAAqB4F,EAAyBE,EAAaD,EAAaE,GACpE,OAAO,IAAIL,EAAKE,EAAcC,EAAKC,EAAKC,EAASnG,EAAGwD,MAAMgF,IAAKjD,EAASK,OAAQ7B,EAAA/B,UAAU5B,SAGhF0F,EAAA2C,OAAd,SAAqBzC,EAAyBE,EAAaD,EAAaE,GACpE,OAAO,IAAIL,EAAKE,EAAcC,EAAKC,EAAKC,EAASnG,EAAGwD,MAAMC,KAAM8B,EAASM,OAAQ9B,EAAA/B,UAAU9B,QAGjF4F,EAAAzF,KAAd,SAAmB2F,EAAyBE,EAAaD,EAAaE,GAClE,OAAO,IAAIL,EAAKE,EAAcC,EAAKC,EAAKC,EAASnG,EAAGwD,MAAMkF,OAAQnD,EAASG,KAAM3B,EAAA/B,UAAU3B,OAEnGyF,EAtHA,CAA0B9F,EAAG2I,OAAhBtK,EAAAyH,+aClBb,IAAA9F,EAAA/B,EAAA,GACA8F,EAAA9F,EAAA,GACA2K,EAAA3K,EAAA,IACAwH,EAAAxH,EAAA,IAEA4K,EAAA,SAAA9C,GAAA,SAAA8C,mDAmBA,OAnB6B5D,EAAA4D,EAAA9C,GAGpB8C,EAAA3L,UAAA4L,aAAP,SAAoBC,KAEbF,EAAA3L,UAAA8L,WAAP,eAAAzC,EAAApC,KACEsB,EAAAnG,QAAaL,MAAMsF,mBAAmBR,EAAA/B,UAAUD,cAChD,IAAMkH,EAAe,IAAIjJ,EAAG2I,MAC5BM,EAAa9B,WAAWpD,EAAA/B,UAAUT,QAAQ2H,YAC1CD,EAAazB,EAAIrD,KAAK4E,OAAOI,UAAU,EACvCF,EAAavB,EAAIvD,KAAK4E,OAAOK,WAAW,EACxCH,EAAa5B,UAAU,KACvB4B,EAAa7B,SAAS,KACtB6B,EAAa3B,GAAG,YAAa,WAAM,OAAAf,EAAKwC,OAAOM,UAAUT,EAAAlF,OAAOE,aAChEO,KAAKmF,IAAIL,IAGJJ,EAAA3L,UAAAqM,aAAP,aAEFV,EAnBA,CAA6B7I,EAAGwJ,OAAnBnL,EAAAwK,2YCLb,IAAA7I,EAAA/B,EAAA,GACA8F,EAAA9F,EAAA,GACA2K,EAAA3K,EAAA,IACAwH,EAAAxH,EAAA,IAEAwL,EAAA,SAAA1D,GAAA,SAAA0D,mDAuBA,OAvB8BxE,EAAAwE,EAAA1D,GAGrB0D,EAAAvM,UAAA4L,aAAP,SAAoBC,KAEbU,EAAAvM,UAAA8L,WAAP,eAAAzC,EAAApC,KACEuF,QAAQC,IAAI,SACZlE,EAAAnG,QAAaL,MAAMsF,mBAAmBR,EAAA/B,UAAUJ,YAChD,IAAMgI,EAAgB,IAAI5J,EAAG2I,MAEvBkB,EADc,IAAI7J,EAAG8J,YAAY/F,EAAA/B,UAAUE,SAAU,EAAE,EAAE,IAAK,KAC5B6H,mBAAmB5F,KAAK4E,OAAQ,KACxEa,EAAczC,WAAW,OAAQ0C,GACjC1F,KAAKmF,IAAIM,GACTA,EAAcpC,EAAIrD,KAAK4E,OAAOI,UAAU,EACxCS,EAAclC,EAAIvD,KAAK4E,OAAOK,WAAW,EACzCQ,EAAcvC,UAAU,KACxBuC,EAAcxC,SAAS,KACvBwC,EAActC,GAAG,YAAa,WAAM,OAAAf,EAAKwC,OAAOM,UAAUT,EAAAlF,OAAOE,cAG5D6F,EAAAvM,UAAAqM,aAAP,WACExF,EAAA/B,UAAUJ,WAAWoI,QAEzBP,EAvBA,CAA8BzJ,EAAGwJ,OAApBnL,EAAAoL,4YCLb,IAAAzJ,EAAA/B,EAAA,GACA8F,EAAA9F,EAAA,GACMgM,EAAUhM,EAAQ,IAExBiM,EAAA,SAAAnE,GAEI,SAAAmE,IAAA,IAAA3D,EACIR,EAAA3I,KAAA+G,OAAOA,YACPoC,EAAKhD,gBAAkBQ,EAAAlB,OAAOU,gBAAgB4G,WAC9C5D,EAAK6D,KAAOH,EACZ1D,EAAK8D,WAAa,GAClB9D,EAAK+D,UAAY,IAAAvF,EAEzB,OATgCE,EAAAiF,EAAAnE,GAShCmE,EATA,CAAgClK,EAAGuK,QAAtBlM,EAAA6L,8YCJb,IAAAlK,EAAA/B,EAAA,GACA8F,EAAA9F,EAAA,GAEAuM,EAAA,SAAAzE,GACE,SAAAyE,IAAA,IAAAjE,EACER,EAAA3I,KAAA+G,MACEsG,YAAazK,EAAG0K,YAAYC,cAC5BxG,YACFoC,EAAKhD,gBAAkBQ,EAAAlB,OAAOU,kBAMlC,OAXkC0B,EAAAuF,EAAAzE,GAQzByE,EAAAtN,UAAA0N,MAAP,SAAaC,GACX,OAAO9E,EAAA7I,UAAM0N,MAAKxN,KAAA+G,KAAC0G,IAEvBL,EAXA,CAAkCxK,EAAG8K,qZCHrC,IAAA9K,EAAA/B,EAAA,GACAgC,EAAAhC,EAAA,GACA8F,EAAA9F,EAAA,GACA2K,EAAA3K,EAAA,IAEAuH,EAAAvH,EAAA,GAGA8M,EAAA,SAAAhF,GAAA,SAAAgF,mDAsCA,OAtC8B9F,EAAA8F,EAAAhF,GAMrBgF,EAAA7N,UAAA4L,aAAP,SAAoBC,GAClB5E,KAAK6G,YAAcjC,EAAOI,UAC1BhF,KAAK8G,aAAelC,EAAOK,WAC3BjF,KAAK4E,OAASA,GAGTgC,EAAA7N,UAAA8L,WAAP,eAAAzC,EAAApC,KACQ+G,EAAa,IAAIC,EACrBpH,EAAA/B,UAAUzB,UAAW,WAAM,OAAAgG,EAAKwC,OAAOM,UAAUT,EAAAlF,OAAOC,eAE1DuH,EAAW1D,EAAIrD,KAAK6G,YAAY,EAChCE,EAAWxD,EAAIvD,KAAK8G,aAAa,EAAIC,EAAW9B,WAAW,EAAIrF,EAAAlB,OAAOG,YAEtEmB,KAAKmF,IAAI4B,GAET,IAAME,EAAc,IAAID,EACtBpH,EAAA/B,UAAUxB,WACV,cAEF4K,EAAY5D,EAAIrD,KAAK6G,YAAY,EACjCI,EAAY1D,EAAIvD,KAAK8G,aAAa,EAAIG,EAAYhC,WAAW,EAAIrF,EAAAlB,OAAOG,YACxEmB,KAAKmF,IAAI8B,GAET,IAAM3K,EAAQsD,EAAA/B,UAAUvB,MAAMyI,WACxBmC,EAAa,IAAIpL,EAAA0I,MACvB0C,EAAWlE,WAAW1G,GACtB4K,EAAW7D,EAAIrD,KAAK6G,YAAY,EAChCK,EAAW3D,EAAIvD,KAAK8G,aAAa,EAA0B,EAAtBC,EAAW9B,WAChDjF,KAAKmF,IAAI+B,IAGJN,EAAA7N,UAAAqM,aAAP,aACFwB,EAtCA,CAA8B/K,EAAGwJ,OAApBnL,EAAA0M,WAwCb,IAAAI,EAAA,SAAApF,GAKE,SAAAoF,EAAmB7E,EAAqBH,GAAxC,IAAAI,EACER,EAAA3I,KAAA+G,OAAOA,YAaDoC,EAAA+E,OAAqB,WAC3B/E,EAAKW,OAAOR,eACZH,EAAKW,OAAOP,UAAU,IAAInB,EAAAoB,OAAO,MAG3BL,EAAAC,QAAsB,WAC5BD,EAAKW,OAAOR,eACZH,EAAKW,OAAOP,UAAU,IAAInB,EAAAoB,OAAO,MAG3BL,EAAAM,OAAqB,WAC3BN,EAAKW,OAAOR,gBAvBZH,EAAKW,OAASZ,EAAQ4C,WACtB3C,EAAKW,OAAOc,MAAQmD,EAAWI,YAC/BhF,EAAKY,WAAWZ,EAAKW,QACrBX,EAAKc,UAAUd,EAAKW,OAAOkC,YAC3B7C,EAAKa,SAASb,EAAKW,OAAOiC,WAC1B5C,EAAKe,GAAG,cAAef,EAAK+E,QAC5B/E,EAAKe,GAAG,YAAanB,GACrBI,EAAKe,GAAG,eAAgBf,EAAKC,SAC7BD,EAAKe,GAAG,eAAgBf,EAAKM,QAC7BN,EAAK6C,WAAa7C,EAAKW,OAAOkC,aAiBlC,OAjCyBnE,EAAAkG,EAAApF,GAChBoF,EAAAI,YAAc,IAAItL,EAAAgI,OAAO,GAAK,IAgCvCkD,EAjCA,CAAyBnL,EAAG2I,wYChD5B,IAAA3I,EAAA/B,EAAA,GACA8F,EAAA9F,EAAA,GAIAuN,EAAA,SAAAzF,GAMI,SAAAyF,EAAmBnF,EAAiBoF,EAAezF,EAAyB0F,GAA5E,IAAAnF,EACIR,EAAA3I,KAAA+G,OAAOA,YACPoC,EAAKF,KAAOA,EACZE,EAAKkF,MAAQA,EACblF,EAAKP,aAAeA,EACpBO,EAAKY,WAAW,IAAKqE,EAAMtE,OAAOnD,EAAA/B,UAAU,KAC5CuE,EAAKY,WAAW,IAAKqE,EAAMtE,OAAOnD,EAAA/B,UAAU,KAC5CuE,EAAKY,WAAW,IAAKqE,EAAMtE,OAAOnD,EAAA/B,UAAU,KAC5CuE,EAAKY,WAAW,IAAKqE,EAAMtE,OAAOnD,EAAA/B,UAAU,KAC5CuE,EAAKY,WAAW,IAAKqE,EAAMtE,OAAOnD,EAAA/B,UAAU,KAC5CuE,EAAKY,WAAW,IAAKqE,EAAMtE,OAAOnD,EAAA/B,UAAU,KAC5CuE,EAAKY,WAAW,IAAKqE,EAAMtE,OAAOnD,EAAA/B,UAAU,KAC5CuE,EAAKY,WAAW,IAAKqE,EAAMtE,OAAOnD,EAAA/B,UAAU,KAC5CuE,EAAKY,WAAW,IAAKqE,EAAMtE,OAAOnD,EAAA/B,UAAU,KAC5CuE,EAAKY,WAAW,IAAKqE,EAAMtE,OAAOnD,EAAA/B,UAAU,KAE5CuE,EAAKa,SAASrD,EAAAlB,OAAOO,WACrBmD,EAAKc,UAAUtD,EAAAlB,OAAOM,YACtBoD,EAAKiB,EAAIgE,EAAM/D,MAAMpB,EAAMoF,EAAOzF,GAAgBjC,EAAAlB,OAAOO,UAAU,EACnEmD,EAAKmB,EAAI8D,EAAM7D,MAAMtB,EAAMoF,EAAOzF,GAAgBjC,EAAAlB,OAAOM,WAAW,EACpEoD,EAAKoF,SAASD,KAuCtB,OAjEmCzG,EAAAuG,EAAAzF,GA6BhByF,EAAA/D,MAAf,SAAqBpB,EAAiBoF,EAAe7D,GACjD,IAAMgE,EAAWhE,EAAOJ,EAChBzD,EAAAlB,OAAOI,SAAW,EAAKc,EAAAlB,OAAOO,UAChCW,EAAAlB,OAAOO,WACLW,EAAAlB,OAAOI,SAAS,GAAKc,EAAAlB,OAAOG,YAAe,EAEnD,MAAa,QAATqD,EACOuF,EAEAA,EAAW7H,EAAAlB,OAAOO,UAAaW,EAAAlB,OAAOO,UAAYqI,EAAU1H,EAAAlB,OAAOG,aAAeyI,EAAM,IAIxFD,EAAA7D,MAAf,SAAqBtB,EAAiBoF,EAAe7D,GACjD,IAAMiE,EAAMjE,EAAOF,EACX3D,EAAAlB,OAAOI,SAAS,EAAIc,EAAAlB,OAAOM,WAC7BY,EAAAlB,OAAOM,YACLY,EAAAlB,OAAOI,SAAS,GAAKc,EAAAlB,OAAOG,YAAa,EAE7C,MAAY,QAATqD,EACQwF,EAEAA,EAAM9H,EAAAlB,OAAOM,WAAcY,EAAAlB,OAAOM,WAAasI,EAAU1H,EAAAlB,OAAOG,aAAeyI,EAAQ,IAI3FD,EAAAtE,OAAf,SAAsBZ,GAClB,IAAMY,EAAoBZ,EAAQ4C,WAElC,OADAhC,EAAOc,MAAQ,IAAIhI,EAAGiI,OAAO,GAAK,IAC3Bf,GAGJsE,EAAAtO,UAAAyO,SAAP,SAAgBG,GAEZ,OADA3H,KAAK+D,WAAW,GAAG4D,GACZ3H,MAEfqH,EAjEA,CAAmCxL,EAAG2I,kGCLtC,IAAAoD,EAAA9N,EAAA,IAEA+N,EAAA/N,EAAA,IACA8F,EAAA9F,EAAA,GAEAgC,EAAAhC,EAAA,GAGAgO,EAAA,WAUI,SAAAA,EAAoBC,EAAwCjJ,EAAkB+C,GAC1E7B,KAAKgI,cAAgB,EACrBhI,KAAKiI,YAAc,EACnBjI,KAAKkI,WAAa,EAClBlI,KAAKlB,SAAWA,EAChBkB,KAAK+H,iBAAmBA,EACxB/H,KAAK6B,aAAeA,EACpB7B,KAAKmI,KAAOL,EAAgBM,UAAUtJ,EAAUiJ,EAAkB/H,KAAK6B,cA0G/E,OAvGWiG,EAAA/O,UAAAsP,cAAP,WAMI,OALaR,EAAAS,OAAOC,GAAGvI,KAAKmI,MACvBK,IAAI,SAAAC,GAAK,OAAAZ,EAAAS,OAAOI,SAAQpP,MAAfuO,EAAAS,OAAmBG,KAC5BE,QAAQd,EAAAe,SAASC,YACjBC,WAKFhB,EAAA/O,UAAAgQ,QAAP,SAAeC,EAAkBC,GAC7B,OAAOjJ,KAAKmI,KAAKa,GAAUC,IAGxBnB,EAAA/O,UAAAiL,OAAP,SAAcgF,GACV,OAAOnB,EAAAS,OAAOC,GAAGvI,KAAKmI,MACrBK,IAAI,SAAAC,GAAK,OAAAZ,EAAAS,OAAOI,SAAQpP,MAAfuO,EAAAS,OAAmBG,KAC5BE,QAAQ,SAAAvO,GAAK,OAAAA,IACb8O,OAAO,SAAA/M,GAAQ,OAAAA,EAAK6H,UAAYgF,IAChCF,WAGEhB,EAAA/O,UAAAkL,OAAP,SAAcgF,GACV,OAAOpB,EAAAS,OAAOC,GAAGvI,KAAKmI,MACrBK,IAAI,SAAAC,GAAK,OAAAZ,EAAAS,OAAOI,SAAQpP,MAAfuO,EAAAS,OAAmBG,KAC5BE,QAAQ,SAAAvO,GAAK,OAAAA,IACb8O,OAAO,SAAA/M,GAAQ,OAAAA,EAAK8H,UAAYgF,IAChCH,WAGUhB,EAAAM,UAAf,SAAyBtJ,EAAkBiJ,EAAwClG,GAAnF,IAAAO,EAAApC,KACI,OAAO6H,EAAAS,OAAOa,MAAM,EAAGrK,GAClB0J,IAAI,SAAAY,GAAU,OAAAhH,EAAKiH,aAAavK,EAAUsK,EAAQrB,EAAkBlG,KACpEiH,WAGMhB,EAAAuB,aAAf,SAA4BvK,EAAkBkK,EAAkBjB,EAAwClG,GACpG,OAAOgG,EAAAS,OAAOa,MAAM,EAAGrK,GAClB0J,IAAI,SAAAc,GAAe,OAAA1B,EAAAjG,KAAKzF,KAAK2F,EAAcmH,EAAUM,EAAavB,EAAiBwB,oBACnFT,WAGDhB,EAAA/O,UAAAyQ,oBAAR,WACI,KAAOxJ,KAAKyJ,qBAAqB,CAC7B,IAAM1H,EAAc/B,KAAK0J,cACnB5H,EAAc9B,KAAK0J,cACtB1J,KAAK2J,OAAO5H,EAAKD,IAChB9B,KAAK4J,WAAW7H,EAAKD,EAAK8F,EAAAjG,KAAKwC,SAASnE,KAAK6B,aAAcE,EAAKD,EAAK9B,KAAK+H,iBAAiB8B,yBAK/F/B,EAAA/O,UAAA+Q,gBAAR,WACI,KAAM9J,KAAK+J,iBAAiB,CACxB,IAAMhI,EAAc/B,KAAK0J,cACnB5H,EAAc9B,KAAK0J,cACtB1J,KAAK2J,OAAO5H,EAAKD,IAChB9B,KAAK4J,WAAW7H,EAAKD,EAAK9B,KAAKgK,iBAAiBjI,EAAKD,MAKzDgG,EAAA/O,UAAAiR,iBAAR,SAAyBjI,EAAaD,GAClC,OAAOmI,KAAKC,SAAW,GACrBtC,EAAAjG,KAAK2C,OAAOtE,KAAK6B,aAAcE,EAAKD,EAAK9B,KAAK+H,iBAAiBoC,oBAC/DvC,EAAAjG,KAAK1F,OAAO+D,KAAK6B,aAAcE,EAAKD,EAAK9B,KAAK+H,iBAAiBqC,qBAG7DtC,EAAA/O,UAAA6Q,WAAR,SAAmB7H,EAAaD,EAAa3F,GACrCA,EAAK+F,QAAU0F,EAAAxG,SAASI,SACxBxB,KAAKgI,gBACE7L,EAAK+F,QAAU0F,EAAAxG,SAASM,OAC/B1B,KAAKkI,aACE/L,EAAK+F,QAAU0F,EAAAxG,SAASK,QAC/BzB,KAAKiI,cAETjI,KAAKmI,KAAKpG,GAAKD,GAAO3F,GAGlB2L,EAAA/O,UAAA4Q,OAAR,SAAe5H,EAAYD,GACvB,OAAO9B,KAAKmI,KAAKpG,GAAKD,GAAKI,QAAU0F,EAAAxG,SAASG,MAG1CuG,EAAA/O,UAAA0Q,kBAAR,WACI,OAAOzJ,KAAKgI,cAAgBiC,KAAKI,KAAOrK,KAAKlB,SAAWkB,KAAKlB,SAAac,EAAAlB,OAAOQ,2BAG7E4I,EAAA/O,UAAAgR,cAAR,WAEI,OADmB/J,KAAKiI,YAAcjI,KAAKkI,WACvBlI,KAAKgI,cAAgBpI,EAAAlB,OAAOS,sBAG5C2I,EAAA/O,UAAA2Q,YAAR,WACI,OAAOO,KAAKK,MAAML,KAAKC,SAAWlK,KAAKlB,WAG7BgJ,EAAAyC,WAAd,SAAyBxC,EAAwCjJ,EAAkB8F,GAC/E,IACM4F,EAAyB,IAAI1C,EAAgBC,EAAkBjJ,EADhD,IAAIhD,EAAAgI,OAAOc,EAAOI,UAAU,EAAGJ,EAAOK,WAAW,IAItE,OAFAuF,EAAMhB,sBACNgB,EAAMV,kBACCU,GAGf1C,EA3HA,GAAa5N,EAAA4N,mCCRb3N,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuF,EAAAD,EAAA3F,GCAAd,EAAAD,QA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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([227,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nimport { Color } from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu),    \n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 8,\n    gridSize: 4,\n    gridOffset: 100,\n    cardHeight: 90,\n    cardWidth: 75,\n    skeletonDifficultyFactor: 2.0, //easy 3 (30%), medium 2.5 (40%), hard 2 (50%)\n    buffDifficultyFactor: 1, //easy 0, med 1, hard 2\n    backgroundColor: Color.Gray,\n};\n\nexport { Resources, Config, uiHeart}\n","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.backgroundSound) {\n            this.backgroundSound = Resources.backgroundMusic;\n            this.backgroundSound.loop = true;\n            this.backgroundSound.play(0.1);\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        this.currentSound = sound;\n        if (after) {\n            sound.play().then(after);\n        } else {\n            sound.play();\n        }\n    }\n\n}","module.exports = __webpack_public_path__ + \"32e41cd2c45011981855c5231583be07.png\";","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        this.baseSprite = Card.sprite(Resources.card);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture));\n        this.setWidth(Config.cardWidth);\n        this.setHeight(Config.cardHeight);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, row, screenCenter) + Config.cardWidth/2; //adding on padding for drawing from center of card\n        this.y = Card.calcY(col, row, screenCenter) + Config.cardHeight/2;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n      }\n    \n      private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n      }\n    \n    private static calcX(col: number, row: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((Config.gridSize / 2) * Config.cardWidth)\n            - ((Config.gridSize - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (Config.cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(col: number, row: number, center: ex.Vector) {\n        const top = center.y\n            - ((Config.gridSize / 2) * Config.cardHeight)\n            - ((Config.gridSize - 1) * Config.gridPadding) / 2;\n\n        return top + (Config.cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    private static sprite(texture: ex.Texture): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = new Vector(0.5, 0.5);\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: ()=>void = () =>  {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\n\nexport class Victory extends ex.Scene {\n\n\n  public onInitialize(engine: ex.Engine) {\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth/2;\n    victoryActor.y = this.engine.drawHeight/2;\n    victoryActor.setHeight(360);\n    victoryActor.setWidth(480);\n    victoryActor.on('pointerup', () => this.engine.goToScene(Scenes.MAIN_MENU));\n    this.add(victoryActor);\n  }\n\n  public onDeactivate() { \n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\n\nexport class GameOver extends ex.Scene {\n\n\n  public onInitialize(engine: ex.Engine) {\n  }\n  public onActivate() {\n    console.log(\"laugh\");\n    SoundManager.get().playSoundInterrupt(Resources.laughSound);\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3,1,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(360);\n    gameOverActor.setWidth(360);\n    gameOverActor.on('pointerup', () => this.engine.goToScene(Scenes.MAIN_MENU));\n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 96;\n        this.logoWidth = 480;\n    }\n}","import * as ex from 'excalibur';\nimport { Config } from '../resources';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      displayMode: ex.DisplayMode.FullScreen \n    });\n    this.backgroundColor = Config.backgroundColor;\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import * as ex from 'excalibur';\nimport { Label, Actor, Vector, Engine, SpriteSheet, Sprite, Events } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Supplier } from 'java8script';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../engine/soundManager';\n\nexport class MainMenu extends ex.Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.engine = engine;\n  }\n\n  public onActivate() {\n    const startActor = new MenuButton(\n      Resources.startMenu, () => this.engine.goToScene(Scenes.GAME_WINDOW)\n    );\n    startActor.x = this.screenWidth/2;\n    startActor.y = this.screenHeight/2 - startActor.drawHeight/2 - Config.gridPadding;\n\n    this.add(startActor)\n\n    const optionActor = new MenuButton(\n      Resources.optionMenu,\n      () => {}\n    );\n    optionActor.x = this.screenWidth/2;\n    optionActor.y = this.screenHeight/2 + optionActor.drawHeight/2 + Config.gridPadding;\n    this.add(optionActor)\n\n    const title = Resources.title.asSprite();\n    const titleActor = new Actor();\n    titleActor.addDrawing(title);\n    titleActor.x = this.screenWidth/2;\n    titleActor.y = this.screenHeight/2 - startActor.drawHeight*2;\n    this.add(titleActor);\n  \n  }\n  public onDeactivate() {}\n}\n\nclass MenuButton extends ex.Actor {\n  static buttonScale = new Vector(0.4, 0.4);\n  public drawHeight: number;\n  private sprite: Sprite;\n\n  public constructor(texture: ex.Texture, onClick: Supplier<void>) {\n    super();\n    this.sprite = texture.asSprite();\n    this.sprite.scale = MenuButton.buttonScale;\n    this.addDrawing(this.sprite)\n    this.setHeight(this.sprite.drawHeight);\n    this.setWidth(this.sprite.drawWidth);\n    this.on(\"pointerDown\", this.onDown);\n    this.on(\"pointerup\", onClick);\n    this.on(\"pointerenter\", this.onEnter);\n    this.on(\"pointerleave\", this.onExit);\n    this.drawHeight = this.sprite.drawHeight;\n  }\n\n  private onDown: () => void = () => {\n    this.sprite.clearEffects();\n    this.sprite.addEffect(new Darken(0.2))\n  }\n\n  private onEnter: () => void = () => {\n    this.sprite.clearEffects();\n    this.sprite.addEffect(new Darken(0.1))\n  }\n\n  private onExit: () => void = () => {\n    this.sprite.clearEffects();\n  }\n  \n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        this.addDrawing(\"0\", Count.sprite(Resources[0]));\n        this.addDrawing(\"1\", Count.sprite(Resources[1]));\n        this.addDrawing(\"2\", Count.sprite(Resources[2]));\n        this.addDrawing(\"3\", Count.sprite(Resources[3]));\n        this.addDrawing(\"4\", Count.sprite(Resources[4]));\n        this.addDrawing(\"5\", Count.sprite(Resources[5]));\n        this.addDrawing(\"6\", Count.sprite(Resources[6]));\n        this.addDrawing(\"7\", Count.sprite(Resources[7]));\n        this.addDrawing(\"8\", Count.sprite(Resources[8]));\n        this.addDrawing(\"9\", Count.sprite(Resources[9]));\n\n        this.setWidth(Config.cardWidth);\n        this.setHeight(Config.cardHeight);\n        this.x = Count.calcX(type, index, screenCenter) + Config.cardWidth/2;\n        this.y = Count.calcY(type, index, screenCenter) + Config.cardHeight/2;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((Config.gridSize / 2) * Config.cardWidth)\n            - Config.cardWidth\n            - ((Config.gridSize+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + Config.cardWidth + (Config.cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector): number {\n        const top = center.y\n            - ((Config.gridSize/2)* Config.cardHeight)\n            - Config.cardHeight\n            - ((Config.gridSize+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + Config.cardHeight + (Config.cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = new ex.Vector(0.5, 0.5);\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function, Supplier } from \"java8script\";\nimport { Config } from \"../resources\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / Config.skeletonDifficultyFactor);\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - Config.buffDifficultyFactor;\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"58a173980e88f9c87fc59189eecffa32.png\";","module.exports = __webpack_public_path__ + \"965a27cff1d4258fa5cd446cc3aad69d.png\";","module.exports = __webpack_public_path__ + \"04bae7f03193a414f9a11713d3a05357.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"7f0a2a655d51479def4f8b21fd3b5738.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"b4c4a5b43037b15315c6c75870cbb701.png\";","module.exports = __webpack_public_path__ + \"8c1509dd1b13c9b73931d6618c43997a.png\";","module.exports = __webpack_public_path__ + \"3e597a67bfe1e56605598b0b20f7c961.png\";","module.exports = __webpack_public_path__ + \"419e057f2b0e2d8670422004f5820c24.png\";","module.exports = __webpack_public_path__ + \"040adb5051047f4fef1d17a65a486b10.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport { Resources, uiHeart } from \"../../resources\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.addDrawing(this.sprite);\n        this.setHeight(50);\n        this.setWidth(50);\n        this.scale = new Vector(0.25, 0.25);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * 50), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * 50), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream, Function, Optional } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Label } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport { MainMenu } from \"../scenes/mainMenu\";\n\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinatior implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinatior {\n        const coordinator: GameCoordinatior = new GameCoordinatior(\n            engine,\n            NumberCoordinator.create(50, 50, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(50, 100, Config.maxAttack, () => { }, Resources.uiSword)\n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, Config.gridSize, engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n    \n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n       const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n        }\n    } \n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinatior } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport { Color } from 'excalibur';\nimport SoundManager from '../engine/soundManager';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator;\n\n  public onInitialize(engine: ex.Engine) {\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    const coordinator: GameCoordinatior = GameCoordinatior.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n      Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n  }\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n\n  }\n} \n","import * as ex from 'excalibur';\nimport { GameWindow } from './scenes/levelOne';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\n\nconst game = new Game();\ngame.add(Scenes.MAIN_MENU, new MainMenu(game));\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}