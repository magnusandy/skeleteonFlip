{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/progressionManager.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/images/title.png","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/myMono.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/helpMenu.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/gameWindow.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","backgroundTile","Resources","Texture","gameOver","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","menuHeight","optionPadding","t","e","Scenes","GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","ProgressionManager","gridSize","difficulty","disableProgression","this","singleton","baseGridSize","baseDifficulty","getGridSize","getDifficulty","getSkullFactor","getBuffAndSkullByDifficulty","skullFactor","getBuffFactor","buffFactor","progress","nextDifficulty","nextGridSize","setGridSize","newSize","setDifficulty","newDifficulty","resetProgress","currentGridSize","createReturn","excalibur_1","resources_1","BackgroundManager","engine","tile","numberOfCols","Math","ceil","drawWidth","width","numberOfRows","drawHeight","height","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","__extends","setPrototypeOf","__proto__","Array","constructor","create","SpriteEffects_1","ButtonBase","_super","texture","onClick","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","addDrawing","on","EventTypes","PointerUp","onClickWrapper","event","ev","type","Actor","SoundManager","disabled","soundManager","disableSound","backgroundSound","stop","enableSound","backgroundMusicStart","loop","play","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","maxScale","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","CardType","soundManager_1","progressionManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","scenes_1","buttonBase_1","backgroundManager_1","Help","onInitialize","bgManager","addTileMap","exitT","exit","goToScene","add","onActivate","onDeactivate","Scene","RadioButton","size","defaultValue","currentSprite","toggleButton","checked","checkedSprite","uncheckedSprite","isChecked","radioButton_1","LabeledRadio","label","defaultVal","font","SpriteFont","Label","fontSize","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","labelWidth","getTextWidth","ctx","console","log","radio","getDrawables","u","NumberSelector","min","max","current","labelText","topLabel","numberLabel","leftButton","addBy","rightButton","nextCurrent","text","getCurrent","setCurrent","newCurrent","numberSelector_1","labeledRadio_1","Options","arguments","itemSize","addGridSize","addDifficultySize","addSoundToggle","forEach","helpers_1","Victory","victoryActor","asSprite","GameOver","gameOverActor","playerIdleAnimation","getAnimationForAll","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","suppressPlayButton","start","loader","Engine","MainMenu","game","sizeProperly","options","help","placeActors","actor","padding","resource","getHeight","card_1","Count","index","initialCount","setCount","leftSide","top","count","java8script_1","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","Stream","of","map","a","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","filter","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","GameCoordinatior","healthCoordinator","attackCoordinator","updateLabels","checkIfCompleteGame","initialize","coordinator","gridCoordinator","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","skeletonCountForCol","skeletonCountForRow","allMatch","coordinator_1","GameWindow","onBackButton","remove","gameWindow_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","mainMenu","keys","k","addResource"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([243,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nimport { Color } from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst helpMenu = require('./images/helpMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n\n    myMono: new ex.Texture(fontMono),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    menuHeight: 100, // 2 times item size\n    optionPadding: 50,\n};\n\nexport { Resources, Config, uiHeart}\n","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}","type Difficulty = 1 | 2 | 3 | 4 | 5;\ntype GridSize = 3 | 4 | 5 | 6 | 7 | 8 | 9;\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport default class ProgressionManager {\n\n    private static baseGridSize: number = 4;\n    private static baseDifficulty: number = 1;\n    private static singleton: ProgressionManager;\n\n    private gridSize: number;\n    private difficulty: number;\n    private disableProgression: boolean;\n\n    private constructor(gridSize, difficulty, disableProgression) {\n        this.gridSize = gridSize;\n        this.difficulty = difficulty;\n        this.disableProgression = disableProgression;\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager(\n                ProgressionManager.baseGridSize,\n                ProgressionManager.baseDifficulty,\n                false\n            );\n            return this.singleton;\n        }\n    }\n\n    public getGridSize(): number {\n        return this.gridSize;\n    }\n\n    public getDifficulty(): number {\n        return this.difficulty;\n    }\n\n    public getSkullFactor(): number {\n        return ProgressionManager.getBuffAndSkullByDifficulty(this.difficulty).skullFactor;\n    }\n\n    public getBuffFactor(): number {\n        return ProgressionManager.getBuffAndSkullByDifficulty(this.difficulty).buffFactor;\n    }\n\n    public progress(): void {\n        if (!this.disableProgression) {\n            if(this.difficulty === 5) {\n                this.difficulty = this.nextDifficulty(this.difficulty, this.gridSize);\n                this.gridSize = this.nextGridSize(this.gridSize);    \n            } else {\n                const next = this.nextDifficulty(this.difficulty, this.gridSize); \n                this.difficulty = this.nextDifficulty(this.difficulty, this.gridSize); \n            }   \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        this.gridSize = newSize;\n    }\n\n    public setDifficulty(newDifficulty: number) {\n        this.difficulty = newDifficulty;\n    }\n\n    public resetProgress(): void {\n        if (!this.disableProgression) {\n            this.difficulty = ProgressionManager.baseDifficulty;\n            this.gridSize = ProgressionManager.baseGridSize;\n        }\n    }\n\n    private nextGridSize(gridSize: number): number {\n       return gridSize === 9 \n       ?  9\n       : gridSize+1;\n    }\n\n    //Normal progression is 1,3,5 and then bump the grid size.\n    //if the player sets the initial difficulty to 2 or 4 then we should handle that\n    private nextDifficulty(difficulty: number, currentGridSize: number): number {\n        if(currentGridSize === 9 && difficulty === 5) {\n            // do nothing\n        } else {\n            if (difficulty === 2 || difficulty === 4) {\n                return difficulty + 1;\n            } else if (difficulty === 5) {\n                return 1;\n            } else {\n                return difficulty + 2;\n            }\n        }\n    }\n\n    private static getBuffAndSkullByDifficulty(difficulty: number): Factors {\n        //skull factor: easy 3 (30%), medium 2.5 (40%), hard 2 (50%)\n        //buff factor: easy 0, med 1, hard 2\n        const createReturn = (skullFactor, buffFactor) => {\n            return { skullFactor, buffFactor };\n        }\n        switch (difficulty) {\n            case 1:\n                return createReturn(3.0, 0.0);\n            case 2:\n                return createReturn(2.5, 0.0);\n            case 3:\n                return createReturn(2.5, 1.0);\n            case 4:\n                return createReturn(2.0, 1.0);\n            case 5:\n                return createReturn(2.0, 2.0);\n        }\n    }\n\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(engine: Engine) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(engine.drawWidth / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(engine.drawHeight / tile.height); \n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows*numberOfCols; row++) {\n\n                tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    public getTileMap(): TileMap {\n        return this.tileMap;\n    }\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>) {\n        super();\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if(event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.sprite.clearEffects();\n                onClick();\n            } else {\n            }\n        }\n    }\n\n    private onDown: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.sprite.clearEffects();\n    }\n\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n    private disabled: boolean = false;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        this.disabled = true;\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public enableSound() {\n        this.disabled = false;\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.disabled) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play(0.1);\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!this.disabled) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import { Texture, Vector } from \"excalibur\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n    \n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (Config.menuHeight/2) //adjust for menu size\n            - ((ProgressionManager.get().getGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - Config.menuHeight;\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Help extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n  }\n  \n  public onActivate() {\n  }\n  \n  public onDeactivate() {\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier } from \"java8script\";\n\nexport default class RadioButton extends Actor{\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size/Resources.uiX.width, size/Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n        \n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if(this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if(event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        if(this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, SpriteFont, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine) {\n        const font = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ ', true, 12, 4, 99, 135);\n        \n        this.label = new Label(label, x, y, null, font);//need to x adjust after\n        this.label.fontSize = size;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        console.log(`labelwidth ${labelWidth}`)\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(size, x+labelWidth*(2/3), y, defaultVal);\n        \n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, SpriteFont, TextAlign, BaseAlign } from \"excalibur\";\nimport { Resources, uiHeart, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButton: Actor;\n    private rightButton: Actor;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n        const font = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ ', true, 12, 4, 99, 135);\n\n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, font);\n        this.topLabel.fontSize = this.fontSize;\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+fontSize, null, font);\n        //this.numberLabel.anchor = new Vector(1, 1);\n        this.numberLabel.fontSize = this.fontSize;\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButton.x = x - this.fontSize*1.5\n        this.leftButton.y = y + fontSize;\n        this.leftButton.scale = new Vector(this.fontSize/Resources.uiLeft.width, this.fontSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(this.fontSize);\n        this.leftButton.setWidth(this.fontSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButton.x = x + this.fontSize*1.5;\n        this.rightButton.y = y + fontSize;\n        this.rightButton.scale = new Vector(this.fontSize/Resources.uiRight.width, this.fontSize/Resources.uiRight.height);\n        this.rightButton.setHeight(this.fontSize);\n        this.rightButton.setWidth(this.fontSize);\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Label, Color, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progressionManager';\nimport { MainMenu } from './mainMenu';\nimport RadioButton from '../actors/bars/radioButton';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SoundManager from '../engine/soundManager';\n\nexport class Options extends ex.Scene {\n\n  private engine;\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const itemSize = (this.engine.drawWidth / this.engine.drawHeight > 0.75)\n      ? 50 : 30;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      this.onExit\n    );\n\n    this.addGridSize(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addSoundToggle(itemSize);\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n  }\n\n  private onExit = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    if (this.sound.isChecked()) {\n      SoundManager.get().enableSound();\n    } else {\n      SoundManager.get().disableSound();\n    }\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n  private addGridSize(itemSize): void {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getGridSize(), this.engine.drawWidth / 2, this.engine.drawHeight / 2, itemSize);\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 + itemSize*2 + Config.optionPadding, itemSize);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 - itemSize - Config.optionPadding, true, this.engine);\n\n    this.sound.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  public onActivate() {\n    this.gridSize.setCurrent(ProgressionManager.get().getGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty()); \n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progressionManager';\nimport { calcDimensionsSingleObject, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1.5)\n    victoryActor.setHeight(dims.height);\n    victoryActor.setWidth(dims.width);\n    victoryActor.scale = dims.scale;\n    victoryActor.on('pointerup', () => {\n      ProgressionManager.get().progress();\n      this.engine.goToScene(Scenes.GAME_WINDOW);\n    });\n    this.add(victoryActor);\n    this.add(new BackgroundManager(engine).getTileMap())\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine, Actor } from 'excalibur';\nimport ProgressionManager from '../engine/progressionManager';\nimport { calcDimensionsSingleObject } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    const dims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(dims.height);\n    gameOverActor.setWidth(dims.width);\n    gameOverActor.scale = dims.scale;\n    gameOverActor.on('pointerup', () => {\n      ProgressionManager.get().resetProgress();\n      this.engine.goToScene(Scenes.MAIN_MENU);\n    });\n    this.add(new BackgroundManager(engine).getTileMap())\n\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      suppressPlayButton: true //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Vector, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(Scenes.GAME_WINDOW),\n    );\n    this.sizeProperly(this.start, 0.4, 0.5, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => this.game.goToScene(Scenes.OPTIONS),\n    );\n    this.sizeProperly(this.options, 0.4, 0.5, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => this.game.goToScene(Scenes.HELP),\n    );\n    this.sizeProperly(this.help, 0.4, 0.5, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.title.addDrawing(Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progressionManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + Config.menuHeight / 2\n            - ((ProgressionManager.get().getGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"40127c5c27045e85b934e3c6f92b98fe.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"6f20cd91097c8be0d36eaad2bf6244ec.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport { Config } from \"../../resources\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(Config.exitButtonSize/texture.width, Config.exitButtonSize/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport { Config } from \"../resources\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * Config.exitButtonSize), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * Config.exitButtonSize), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream, Function, Optional } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Label } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport { MainMenu } from \"../scenes/mainMenu\";\nimport ProgressionManager from \"../engine/progressionManager\";\n\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinatior implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinatior {\n        \n        const coordinator: GameCoordinatior = new GameCoordinatior(\n            engine,\n            NumberCoordinator.create(Config.exitButtonSize/2, Config.exitButtonSize/2, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(Config.exitButtonSize/2, Config.exitButtonSize * 1.5, Config.maxAttack, () => { }, Resources.uiSword)           \n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, ProgressionManager.get().getGridSize(), engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n    \n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n       const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n        }\n    } \n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinatior } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport SoundManager from '../engine/soundManager';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { Actor, Engine, Color, Texture, Vector } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { Scenes } from './scenes';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator;\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    /*\n    const bar = new Actor();\n    bar.y = Config.menuHeight;\n    bar.x = this.engine.drawWidth/2;\n    bar.setHeight(1);\n    bar.setWidth(this.engine.drawWidth)\n    bar.color = Color.Red;\n    bar\n    this.add(bar);//todo remove\n    */\n\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n\n    //todo move this to be actually score keeper\n    /*\n    const coins: Actor = new Actor();\n    coins.addDrawing(Resources.uiCoins);\n    coins.scale = new Vector(Config.uiItemSize / Resources.uiCoins.width, Config.uiItemSize / Resources.uiCoins.height);\n    coins.x = Config.uiItemSize / 2;\n    coins.y = Config.uiItemSize * 2.5;\n    this.add(coins);\n    */\n\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    const coordinator: GameCoordinatior = GameCoordinatior.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n\n    //cordova specific\n    //document.addEventListener(\"backbutton\", this.onBackButton);\n  }\n\n  private onBackButton = () => this.engine.goToScene(Scenes.MAIN_MENU);\n\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n\n    //document.removeEventListener(\"backbutton\", this.onBackButton);\n  }\n} \n","import { GameWindow } from './scenes/gameWindow';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, new Options(game));\ngame.add(Scenes.HELP, new Help(game));\n\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}