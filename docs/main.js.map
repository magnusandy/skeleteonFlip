{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/engine/sizingManager.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/engine/progression/playerSettingsManager.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/actors/bars/exitButton.ts","webpack:///./src/engine/fontManager.ts","webpack:///./src/scenes/gameWindows/gameWindowBase.ts","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/title.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/scenes/gameWindows/gridGameWindow.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/scenes/gameWindows/storyGameWindow.ts","webpack:///./src/modal/modal.tsx","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/scrollBar.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/button.wav","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/myMono.png","webpack:///./src/images/helpTitle.png","webpack:///./src/images/optionTitle.png","webpack:///./src/images/ui/scroll.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/menu/menu.png","webpack:///./src/images/menu/next.png","webpack:///./src/images/menu/confirm.png","webpack:///./src/images/menu/playing.png","webpack:///./src/images/menu/credits.png","webpack:///./src/images/menu/intro.png","webpack:///./src/images/menu/cards.png","webpack:///./src/images/menu/help.png","webpack:///./src/images/menu/options.png","webpack:///./src/images/menu/start.png","webpack:///./src/images/card.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","cardsMenu","introMenu","creditsMenu","playingMenu","confirmMenu","nextMenu","menuMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","uiScroll","optionTitle","helpTitle","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","buttonSound","backgroundTile","Resources","Texture","gameOver","cardMenu","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","t","e","SizingManager","engine","this","initialize","singleton","console","log","isMobile","drawWidth","getUIItemSize","getUIButtonSizing","padding","maxScale","getMenuHeight","difficulty_1","playerSettingsManager_1","ProgressionManager","getGameGridSize","ps","isProgressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","maxLevel","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","difficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","setProgressionDisabled","isProgressDisabled","resetProgress","getLevelString","Scenes","progressionManager_1","STORY_GAME_WINDOW","GRID_GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","getGameWindow","resources_1","SoundManager","soundManager","disableSound","backgroundSound","stop","backgroundMusicStart","isSoundOff","volume","loop","play","backgroundMusicEnd","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","__extends","setPrototypeOf","__proto__","Array","constructor","create","excalibur_1","SpriteEffects_1","soundManager_1","helpers_1","ButtonBase","_super","texture","onClick","disabled","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","width","height","addDrawing","on","EventTypes","PointerUp","onClickWrapper","getSprite","safePointerUp","setDisabled","Actor","BackgroundManager","tile","numberOfCols","Math","ceil","numberOfRows","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","getDefaultTileMap","drawHeight","getCustomTileMap","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","event","ev","type","localForage","PlayerSettingsManager","toggleSound","progressionDisabled","chosenDiff","chosenGridSize","maxDiff","soundOff","chosenDifficulty","maxDifficulty","config","version","size","storeName","description","getItem","STORE_KEY","v","DEFAULT","saveData","deserializeV1","newCurrent","saveToStorage","newStage","gridSize","difficutly","setIsSoundOff","isProgDisabled","serializeV1","getDifficultyLevel","save","setItem","VERY_EASY","NORMAL","CardType","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","buttonBase_1","ExitButton","FontManager","generalMono","SpriteFont","getMono","coordinator_1","backgroundManager_1","scenes_1","exitButton_1","GameWindowBase","onInitialize","add","goToScene","coordinator","GameCoordinator","onActivate","getAllActors","forEach","onDeactivate","remove","Scene","java8script_1","difficultyLevel","buff","text","buffFactor","skeletonFactor","difficultyName","level","Stream","of","EASY","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","gameWindowBase_1","GridGameWindow","currentOptionGridSize","resetGame","card_1","Count","index","initialCount","setCount","leftSide","top","asSprite","count","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","map","a","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getCurrent","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","updateLabels","rowCounts","skeletonCountForRow","columnCounts","skeletonCountForCol","attackCoordinator","healthCoordinator","checkIfCompleteGame","mm","gridCoordinator","createRowCountCards","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","allFlipped","allMatch","fontManager_1","LevelDisplay","startingLevel","createLabelText","fontSize","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","PREFIX","updateLevel","newLevel","Label","level_1","StoryGameWindow","levelDisplay","React","ReactModal","react_dom_1","xButton","skullImage","swordImage","potionImage","coinImage","heartUIImg","swordUIImage","threeImage","styles","margin","flex","h1","holder","imgHolder","cardImg","ModalRenderer","isOpen","setOpenAndRerender","innerStuff","render","open","closeFunc","props","createElement","E","__assign","document","getElementById","introModal","style","howToPlayModal","src","alt","cardModal","textModal","content","borderRadius","borderWidth","borderColor","appElement","float","position","right","onPointerUp","borderStyle","minHeight","display","Component","modal_1","Help","addTileMap","addTitle","modalRenderer","centerx","centery","sizing","createButton","button","ScrollBar","isDragging","scrollBarBotton","scrollBarTop","pe","worldY","pointer","lastWorldPos","setScrollBottom","num","visible","RadioButton","defaultValue","onToggle","currentSprite","toggleButton","checked","setCheckedDrawing","ifPresent","func","checkedSprite","uncheckedSprite","Optional","ofNullable","setOnToggle","isChecked","setChecked","radioButton_1","LabeledRadio","label","defaultVal","textSize","buttonSize","labelWidth","getTextWidth","ctx","radio","addOnToggle","getBottom","getDrawables","NumberSelector","min","updateDisabled","isDisabled","leftButtonSprite","rightButtonSprite","disColor","topLabel","color","numberLabel","Colorize","leftButton","rightButton","Black","labelText","addBy","nextCurrent","setCurrent","orElse","numberSelector_1","labeledRadio_1","scrollBar_1","Options","onConfirm","progressionToggle","scrollBar","itemSize","addSoundToggle","addDifficultySize","addProgressionToggle","callbackForEnabling","addGridSize","createbuttonDims","createButtonY","camera","strategy","lockToActorAxis","Axis","Y","Victory","arguments","onNext","buttonDims","imageDims","offset","victoryActor","nextButton","GameOver","onMenu","gameOverActor","playerIdleAnimation","getAnimationForAll","menuButton","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","pointerScope","Input","PointerScope","Canvas","suppressPlayButton","start","loader","Engine","MainMenu","game","sizeProperly","options","help","placeActors","actor","resource","getHeight","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","storyGameWindow_1","gridGameWindow_1","mainMenu","keys","k","addResource"],"mappings":"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B7V,EAAA0oB,2LCTbzoB,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GAAA,aAAAnC,OAAA6B,eAAA4F,EAAA,cAAAvF,OAAA,ICAA,IAAAkJ,EAAApK,EAAA,GACAoV,EAAApV,EAAA,IACAupB,EAAAvpB,EAAA,KACAwpB,EAAAxpB,EAAA,KACAypB,EAAAzpB,EAAA,KACA0pB,EAAA1pB,EAAA,KACA2pB,EAAA3pB,EAAA,KACA4pB,EAAA5pB,EAAA,KACA6pB,EAAA7pB,EAAA,KACAmS,EAAAnS,EAAA,GACAyH,EAAAzH,EAAA,IACA8pB,EAAA9pB,EAAA,KACA+pB,EAAA/pB,EAAA,KAEM+oB,EAAO,IAAIS,EAAAnoB,QACX2oB,EAAW,IAAIT,EAAAT,SAASC,GACxBE,EAAU,IAAIW,EAAAjE,QAAQoD,GAC5BA,EAAKvT,IAAIJ,EAAA1L,OAAOI,UAAWkgB,GAC3BjB,EAAKvT,IAAIJ,EAAA1L,OAAOK,UAAW,IAAI2f,EAAAtC,SAAS2B,IACxCA,EAAKvT,IAAIJ,EAAA1L,OAAOE,kBAAmB,IAAIkgB,EAAAhM,gBAAgBiL,IACvDA,EAAKvT,IAAIJ,EAAA1L,OAAOG,iBAAkB,IAAIkgB,EAAA1S,eAAe0R,IACrDA,EAAKvT,IAAIJ,EAAA1L,OAAOM,QAAS,IAAI2f,EAAA/C,QAAQmC,IACrCA,EAAKvT,IAAIJ,EAAA1L,OAAOO,QAASgf,GACzBF,EAAKvT,IAAIJ,EAAA1L,OAAOQ,KAAM,IAAI2f,EAAAzI,KAAK2H,IAE/B,IAAIH,EAAS,IAAIa,EAAA9B,WACjB3oB,OAAOirB,KAAK7f,EAAAnF,WACT6Q,QAAQ,SAAAoU,GAAK,OAAAtB,EAAOuB,YAAY/f,EAAAnF,UAAUilB,MAE7CnB,EAAKJ,MAAMC,GAAQrd,KAAK,WACtB9D,EAAApG,QAAsBwF,aACnB0E,KAAK,WACJ4G,EAAA9Q,QAAcwF,WAAWkiB,GACzBA,EAAKtT,UAAUL,EAAA1L,OAAOI","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([287,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nimport { AudioContextFactory } from 'excalibur';\n\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/menu/start.png');\nconst optionMenu = require('./images/menu/options.png');\nconst helpMenu = require('./images/menu/help.png');\nconst cardsMenu = require('./images/menu/cards.png');\nconst introMenu = require('./images/menu/intro.png');\nconst creditsMenu = require('./images/menu/credits.png');\nconst playingMenu = require('./images/menu/playing.png');\nconst confirmMenu = require('./images/menu/confirm.png');\nconst nextMenu = require('./images/menu/next.png');\nconst menuMenu = require('./images/menu/menu.png');\n\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\nconst uiScroll = require('./images/ui/scroll.png');\n\nconst optionTitle = require('./images/optionTitle.png');\nconst helpTitle = require('./images/helpTitle.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\nconst buttonSound = require('./sounds/button.wav');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    cardMenu: new ex.Texture(cardsMenu),\n    introMenu: new ex.Texture(introMenu),\n    creditsMenu: new ex.Texture(creditsMenu),\n    playingMenu: new ex.Texture(playingMenu),\n    confirmMenu: new ex.Texture(confirmMenu),\n    nextMenu: new ex.Texture(nextMenu),\n    menuMenu: new ex.Texture(menuMenu),\n\n    optionTitle: new ex.Texture(optionTitle),\n    helpTitle: new ex.Texture(helpTitle),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n    uiScroll: new ex.Texture(uiScroll),\n\n    myMono: new ex.Texture(fontMono),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    buttonSound: new ex.Sound(buttonSound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport { Resources, Config, uiHeart}\n","import { Engine } from \"excalibur\";\n\nexport interface IButtonSizing {\n    padding: number, \n    maxScale: number\n}\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"ERROR: Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 1200; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getUIButtonSizing(): IButtonSizing {\n        return this.isMobile() \n        ? {padding: 0.4, maxScale: 0.3}\n        : {padding: 0.4, maxScale: 0.5}\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 3;\n    }\n\n}","import { Difficulty } from \"./difficulty\";\nimport PlayerSettingsManager from \"./playerSettingsManager\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private constructor() {\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager();\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = PlayerSettingsManager.get();\n        if(ps.isProgressionDisabled()) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return PlayerSettingsManager.get().getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return PlayerSettingsManager.get().getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public isProgressionDisabled() {\n        return PlayerSettingsManager.get().isProgressionDisabled();\n    }\n\n    public progress(): void {\n        if(!PlayerSettingsManager.get().isProgressionDisabled()) {\n            const currentLevel = PlayerSettingsManager.get().getCurrentLevel();\n            const currentStage = PlayerSettingsManager.get().getCurrentStage();\n    \n            if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n                //on the last stage of the level, need to find out if we can move on or just move up stages\n                if(currentLevel === PlayerSettingsManager.get().maxLevel) {\n                    // on the max upgraded level just increase stage\n                    PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n                } else {\n                    PlayerSettingsManager.get().setCurrentStage(1);\n                    PlayerSettingsManager.get().setCurrentLevel(currentLevel + 1);\n                }\n            } else {\n                //move on to the next stage, no extra logic\n                PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n            }  \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        PlayerSettingsManager.get().setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        PlayerSettingsManager.get().setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public setProgressionDisabled(isProgressDisabled: boolean) {\n        return PlayerSettingsManager.get().setProgressionDisabled(isProgressDisabled);\n    }\n\n    public resetProgress(): void {\n        const ps = PlayerSettingsManager.get();\n        if (!ps.isProgressionDisabled()) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        if (PlayerSettingsManager.get().getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${PlayerSettingsManager.get().getCurrentLevel()}.${PlayerSettingsManager.get().getCurrentStage()}`;\n        }\n    }\n}","import ProgressionManager from \"../engine/progression/progressionManager\";\n\nexport enum Scenes {\n    STORY_GAME_WINDOW = \"storyGameWindow\",\n    GRID_GAME_WINDOW = \"gridGameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}\n\nexport function getGameWindow(): Scenes {\n    return ProgressionManager.get().isProgressionDisabled()\n        ? Scenes.GRID_GAME_WINDOW \n        : Scenes.STORY_GAME_WINDOW;\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\nimport PlayerSettingsManager from \"./progression/playerSettingsManager\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public backgroundMusicStart(): void {\n        if (!PlayerSettingsManager.get().isSoundOff()) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.volume = 0.1;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play();\n            }\n        }\n    }\n\n    public backgroundMusicEnd(): void {\n        if(PlayerSettingsManager.get().isSoundOff()) {\n            if (this.backgroundSound) {\n                this.backgroundSound.stop();\n                this.backgroundSound = null;\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!PlayerSettingsManager.get().isSoundOff()) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport SoundManager from \"../../engine/soundManager\";\nimport { Resources } from \"../../resources\";\nimport { safePointerUp } from \"../../engine/helpers\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n    private disabled: boolean;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>, disabled?: boolean) {\n        super();\n        this.disabled = disabled ? disabled : false;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    public getSprite():Sprite {\n        return this.sprite;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return safePointerUp(() => {\n            if (!this.disabled) {\n                this.sprite.clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n                onClick();\n            }\n        });\n    }\n\n    private onDown: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.2))\n        }\n\n    }\n\n    private onEnter: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.1))\n        }\n\n    }\n\n    private onExit: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n        }\n    }\n\n    public setDisabled(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(width: number, height: number) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(width / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(height / tile.height);\n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows * numberOfCols; row++) {\n\n            tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    private getTileMap(): TileMap {\n        return this.tileMap;\n    }\n\n    public static getDefaultTileMap(engine: Engine): TileMap {\n        return new BackgroundManager(engine.drawWidth, engine.drawHeight).getTileMap();\n    }\n\n    public static getCustomTileMap(width, height): TileMap {\n        return new BackgroundManager(width, height).getTileMap();\n    }\n}","import { Texture, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n\n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nfunction safePointerUp(onClick: Supplier<void>): (event?: any) => void {\n    return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                onClick();\n            }\n    }\n}\n\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture,\n    safePointerUp\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport ProgressionManager from \"./progressionManager\";\nimport * as localForage from \"localforage\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\n\ninterface SaveDataV1 {\n    version: number;\n    soundOff: boolean;\n    progressionDisabled: boolean;\n    chosenDifficulty: number; //difficulty level number\n    chosenGridSize: number;\n    maxLevel: number;\n    maxDifficulty: number; //difficulty level number\n    currentLevel: number;\n    currentStage: number;\n}\n\nexport default class PlayerSettingsManager {\n    private static STORE_KEY = 'player_settings_v1';\n    public static singleton: PlayerSettingsManager;\n    private static DEFAULT: PlayerSettingsManager = new PlayerSettingsManager(false, false, Difficulty.VERY_EASY, 3, 3, Difficulty.NORMAL, 1, 1);\n    //Settings\n    private soundOff: boolean;\n    private progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    public readonly maxLevel: number;\n    public readonly maxDifficulty: Difficulty;\n\n    //Progression\n    private currentLevel: number;\n    private currentStage: number;\n\n    private constructor(toggleSound, progressionDisabled, chosenDiff, chosenGridSize, maxLevel, maxDiff, currentLevel, currentStage) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxLevel = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n    }\n\n    public static get(): PlayerSettingsManager {\n        return this.singleton;\n    }\n\n    public static initialize(): Promise<any> {\n        localForage.config({\n            name: 'skeletonFlip',\n            version: 1.0,\n            size: 4980736,\n            storeName: 'playerSettings',\n            description: 'Store save data'\n        });//try with no settings\n        return localForage.getItem(PlayerSettingsManager.STORE_KEY, (e, v) => {\n            console.log(`retrieved from storage:`, [v]);\n            if(e) {\n                console.log(`problem retrieving from store: ${e}`);\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else if (!v) {\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else {\n                const saveData: any = v;\n                if(saveData.version === 1) {\n                    this.singleton = PlayerSettingsManager.deserializeV1(saveData);\n                }\n            }\n        });\n    }\n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n        this.saveToStorage();\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n        this.saveToStorage();\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n        this.saveToStorage();\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n        this.saveToStorage();\n    }\n\n    public isSoundOff(): boolean {\n        return this.soundOff;\n    }\n\n    public setIsSoundOff(isSoundOff: boolean): void {\n        this.soundOff = isSoundOff;\n        this.saveToStorage();\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n\n    public setProgressionDisabled(isProgDisabled: boolean) {\n        this.progressionDisabled = isProgDisabled;\n        this.saveToStorage();\n    }\n\n    public isProgressionDisabled(): boolean {\n        return this.progressionDisabled;\n    }\n\n    private serializeV1(): SaveDataV1 {\n        return {\n            version: 1,\n            soundOff: this.soundOff,\n            progressionDisabled: this.progressionDisabled,\n            chosenDifficulty: this.chosenDifficulty.getDifficultyLevel(),\n            chosenGridSize: this.chosenGridSize,\n            maxLevel: this.maxLevel,\n            maxDifficulty: this.maxDifficulty.getDifficultyLevel(),\n            currentLevel: this.currentLevel,\n            currentStage: this.currentStage,\n        }\n    }\n\n    private static deserializeV1(save: any): PlayerSettingsManager {\n        return new PlayerSettingsManager(\n            save.soundOff,\n            save.progressionDisabled,\n            Difficulty.getByDifficultyLevel(save.chosenDifficulty),\n            save.chosenGridSize,\n            save.maxLevel,\n            Difficulty.getByDifficultyLevel(save.maxDifficulty),\n            save.currentLevel,\n            save.currentStage);\n    }\n\n    private saveToStorage() {\n        localForage.setItem(\n            PlayerSettingsManager.STORE_KEY,\n            this.serializeV1(),\n        );\n    }\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/sizingManager';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight()/2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import ButtonBase from \"./buttonBase\";\nimport { Vector, Engine } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport { Supplier } from \"java8script\";\n\nexport class ExitButton extends ButtonBase {\n\n    public constructor(engine: Engine, onExit: Supplier<void>) {\n        const texture = Resources.uiX;\n        super(texture, onExit);\n        this.scale = new Vector(Config.exitButtonSize / texture.width, Config.exitButtonSize / texture.height);\n        this.setHeight(Config.exitButtonSize);\n        this.setWidth(Config.exitButtonSize);\n        this.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n        this.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    }\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import { GameCoordinator } from '../../coordinator/coordinator';\nimport SoundManager from '../../engine/soundManager';\nimport BackgroundManager from '../../engine/backgroundManager';\nimport { Engine, Scene } from 'excalibur';\nimport { Scenes } from '../scenes';\nimport { ExitButton } from '../../actors/bars/exitButton';\n\nexport abstract class GameWindowBase extends Scene {\n\n  protected coordinator: GameCoordinator;\n  protected engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.coordinator = GameCoordinator.initialize(this.engine);\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    this.coordinator.getAllActors()\n      .forEach(c => this.add(c));\n  }\n\n  public onDeactivate() {\n    this.coordinator.getAllActors()\n      .forEach(c => this.remove(c));\n  }\n} \n","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { GameWindowBase } from './gameWindowBase';\nimport ProgressionManager from '../../engine/progression/progressionManager';\n\nexport class GridGameWindow extends GameWindowBase {\n\n  private currentOptionGridSize: number;\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    this.currentOptionGridSize = ProgressionManager.get().getOptionGridSize()\n  }\n\n  //Override\n  public onActivate(): void {\n    const newSize = ProgressionManager.get().getOptionGridSize()\n    if(this.currentOptionGridSize != newSize) {\n      this.currentOptionGridSize = newSize;\n      this.coordinator.resetGame();\n    }\n    super.onActivate();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport SizingManager from \"../../engine/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport SizingManager from \"../engine/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Actor, Scene } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/sizingManager\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine) {\n        this.engine = engine;\n        this.resetGame();\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const coordinator: GameCoordinator = new GameCoordinator(engine);\n        return coordinator;\n    }\n\n    public resetGame(): void {\n        const mm: SizingManager = SizingManager.get();\n        this.healthCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { }, Resources.uiHeart, Config.maxHealth);\n        this.attackCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword);\n        this.gridCoordinator = GridCoordinator.createGrid(this, ProgressionManager.get().getGameGridSize(), this.engine);\n        this.rowCounts = this.createRowCountCards();\n        this.columnCounts = this.createColCountCards();\n    }\n\n    private getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    private getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    private getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    public getAllActors(): Actor[] {\n        return Stream.ofValues<Actor[]>(\n            this.gridCoordinator.getGridAsList(),\n            this.getColCountCards(),\n            this.getRowCountCards(),\n            this.getStatTrackers()\n        ).flatMap(a => Stream.ofValues(...a))\n            .toArray();\n    }\n\n    private updateLabels = () => {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (this.healthCoordinator.getCurrent() === 0) {\n            this.engine.goToScene(Scenes.GAME_OVER);\n            ProgressionManager.get().resetProgress();\n            this.resetGame();\n        } else if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n            ProgressionManager.get().progress();\n            this.resetGame();\n        }\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\nimport ProgressionManager from \"../../engine/progression/progressionManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return ProgressionManager.get().isProgressionDisabled() ? \"\" :`${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport LevelDisplay from '../../actors/bars/level';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\nimport { GameWindowBase } from './gameWindowBase';\n\nexport class StoryGameWindow extends GameWindowBase {\n\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth / 2, mm.getMenuHeight() - mm.getUIItemSize() / 2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n\n  }\n\n  public onActivate() {\n    super.onActivate();\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n  }\n} \n","\nimport * as React from 'react';\nimport ReactModal = require('react-modal');\nimport { render } from 'react-dom';\nimport { Config } from '../resources';\nimport { TextAlignProperty } from 'csstype';\nconst xButton = require('../images/ui/x.png');\nconst skullImage = require('../images/skull.png');\nconst swordImage = require('../images/sword.png');\nconst potionImage = require('../images/potion.png');\nconst coinImage = require('../images/coin.png');\nconst heartUIImg = require('../images/ui/heart.png');\nconst swordUIImage = require('../images/ui/sword.png');\nconst threeImage = require('../images/numbers/3.png');\n\ninterface Styles {\n    p: {\n        padding: string,\n        margin: string,\n        fontSize: number,\n        flex: number,\n        textAlign: TextAlignProperty,\n    },\n    h1: {\n        textAlign: TextAlignProperty,\n    },\n    holder: {\n        width: string,\n    }\n    imgHolder: {\n        width: string,\n        textAlign: TextAlignProperty,\n    }\n    cardImg: {\n        width: number,\n    }\n}\n\nconst styles: Styles = {\n    p: { padding: \"16px\", margin: \"0px\", fontSize: 20, flex: 1, textAlign: \"center\" },\n    h1: { textAlign: \"center\" },\n    holder: {\n        width: \"100%\"\n    },\n    imgHolder: {\n        width: \"100%\",\n        textAlign: \"center\"\n    },\n    cardImg: {\n        width: 100\n    }\n}\n\nexport class ModalRenderer {\n\n    private isOpen: boolean;\n\n    constructor(isOpen: boolean) {\n        this.isOpen = isOpen;\n    }\n\n    public introModal() {\n        const innerStuff = (<div>\n            <h1 style={styles.h1}>Introduction</h1>\n            <p style={styles.p}>Welcome to Skeleton Flip!</p>\n            <p style={styles.p}>Flip cards, find coins, drink potions and kill skeletons. The goal of the game is to flip all the cards on the board without running out of hearts.</p>\n            <p style={styles.p}>In Story Mode, you progress through increasingly larger and larger grids, you can unlock larger grid sizes and harder difficulties by collecting coins and unlocking upgrades.</p>\n            <p style={styles.p}>If Story Mode is disabled, you may choose to practice any grid size you like.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public howToPlayModal() {\n        const innerStuff = (<div>\n            <h1 style={styles.h1}>How To Play</h1>\n            <p style={styles.p}>The top right of the game screen shows your health (<img width={20} src={heartUIImg} alt=\"heart\" />) and current attack (<img width={20} src={swordUIImage} alt=\"sword\" />). If you run out of health you lose!</p>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={threeImage} alt=\"three\" />\n            </div>\n            <p style={styles.p}>The numbers on the outer edges of the grid indicate how many skeletons are hiding in that row or column.</p>\n            <p style={styles.p}>Tap cards inside the grid to flip them over. Remember you need to flip every card in the grid to advance, so choose your path wisely!</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public cardModal() {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>Cards</h1>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={skullImage} alt=\"skull\" />\n            </div>\n            <p style={styles.p}>Oh no! Flipping over a skeleton card will hurt you, taking away one health unless you have a sword to defend yourself.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={swordImage} alt=\"sword\" />\n            </div>\n            <p style={styles.p}>Sweep Low! Flipping over a sword card will add to your attack count, no need to fear the next skeleton you flip over, the sword will take care of it!</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={potionImage} alt=\"potion\" />\n            </div>\n            <p style={styles.p}>Tastes like Strawberry! Flipping over a potion card will heal any wounds that you have taken from those nasty skeletons.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={coinImage} alt=\"coin\" />\n            </div>\n            <p style={styles.p}>Take that to the bank! Flipping over a coin card will add to your riches, if you complete a level you will keep the coins you found and can use them for upgrades.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public textModal(title: string, text: string) {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>{title}</h1>\n            <p style={styles.p}>\n                {text}\n            </p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    private setOpenAndRerender = (isOpen: boolean, innerStuff?: any) => {\n        this.isOpen = isOpen;\n        this.render({\n            innerStuff: innerStuff,\n            open: this.isOpen,\n            closeFunc: () => this.setOpenAndRerender(false)\n        });\n    }\n\n    private render = (props: Props) => {\n        render(<E {...props} />,\n            document.getElementById('modal')\n        );\n    }\n}\n\ninterface Props {\n    open: boolean;\n    closeFunc: () => void;\n    innerStuff?: any;\n}\n\ninterface State {\n}\n\nexport default class E extends React.Component<Props, State> {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <ReactModal\n                style={{\n                    content: {\n                        borderRadius: \"0px\",\n                        backgroundColor: '#a77600',\n                        borderWidth: 8,\n                        borderColor: \"#402f08\",\n                        padding: \"16px\",\n                    }\n                }}\n                appElement={document.getElementById('modal')}\n                isOpen={this.props.open}>\n                <div style={{ float: \"right\", height: Config.exitButtonSize, position: \"fixed\", right: \"24px\", top: \"24px\" }}>\n                    <a style={{}}>\n                        <img height={Config.exitButtonSize} width={Config.exitButtonSize} src={xButton} alt=\"exit\" onPointerUp={this.props.closeFunc} />\n                    </a>\n                </div>\n                <div style={{ borderRadius: \"16px\", borderStyle: \"solid\", borderWidth: \"4px\", minHeight: \"95%\", backgroundColor: \"#896000\", borderColor: \"#402f08\", display: \"flex\" }}>\n                    {this.props.innerStuff}\n                </div>\n            </ReactModal>\n        );\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Actor, Engine } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { calcDimensionsSingleObjectTexture, IDimensions } from '../engine/helpers';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport { ModalRenderer } from '../modal/modal';\nimport SizingManager from '../engine/sizingManager';\n\nexport class Help extends ex.Scene {\n\n  private engine: Engine;\n  private modalRenderer: ModalRenderer;\n  //private button: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.addTileMap(BackgroundManager.getDefaultTileMap(engine));\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.addTitle();\n    this.modalRenderer = new ModalRenderer(false);\n\n    const centerx = engine.drawWidth / 2;\n    const centery = engine.drawHeight / 2;\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.introMenu, sizing.padding, sizing.maxScale);\n\n\n    this.add(this.createButton(dims, centerx, centery - dims.height * 1.5 - Config.gridPadding * 1.5, Resources.introMenu, () => this.modalRenderer.introModal()));\n    this.add(this.createButton(dims, centerx, centery - dims.height * 0.5 - Config.gridPadding * 0.5, Resources.playingMenu, () => this.modalRenderer.howToPlayModal()));\n    this.add(this.createButton(dims, centerx, centery + dims.height * 0.5 + Config.gridPadding * 0.5, Resources.cardMenu, () => this.modalRenderer.cardModal()));\n    this.add(this.createButton(dims, centerx, centery + dims.height * 1.5 + Config.gridPadding * 1.5, Resources.creditsMenu, () => this.modalRenderer.textModal(\"Credits\", \"Made by Andrew\")));\n\n  }\n\n  public createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n    const button = new ButtonBase(texture, onClick);\n    button.x = x\n    button.y = y\n    button.scale = dims.scale;\n    button.setHeight(dims.height);\n    button.setWidth(dims.width);\n    return button;\n  }\n\n  public onActivate() {\n    //this.modalRenderer.setOpenAndRerender(true);\n  }\n\n  public onDeactivate() {\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.helpTitle, 0.6, 1);\n    const sprite = Resources.helpTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth / 2;\n    title.y = dims.height / 2 + Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale;\n    this.add(title);\n  }\n} \n","import { Actor, Color, Engine, Vector } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class ScrollBar extends Actor {\n\n    private scrollBarTop: number;\n    private scrollBarBotton: number;\n    private isDragging = false;\n\n    constructor(engine: Engine) {\n        super();\n        this.scrollBarBotton = engine.drawHeight / 2;\n        this.scrollBarTop = engine.drawHeight / 2; // dont want to be able to go past the top of the screen\n        const sprite = Resources.uiScroll.asSprite();\n        const scrollItemSize = 50;\n        this.x = engine.drawWidth - 25;\n        this.y = engine.drawHeight / 2;\n        this.addDrawing(Resources.uiScroll.asSprite());\n        this.setWidth(scrollItemSize);\n        this.setHeight(scrollItemSize);\n        console.log(sprite)\n        this.scale = new Vector(scrollItemSize/192, scrollItemSize/192); // 192 is the sprite original width/height\n\n        \n        this.on('pointerdragstart', (pe: ex.Input.PointerEvent) => {\n            this.isDragging = true;\n        });\n\n        this.on('pointerdragend', (pe: ex.Input.PointerEvent) => {\n            this.isDragging = false;\n        });\n\n        this.on('pointerdragmove', (pe: ex.Input.PointerEvent) => {\n            if (this.isDragging) {\n                const worldY = pe.pointer.lastWorldPos.y;\n                if (worldY > this.scrollBarTop && worldY < this.scrollBarBotton) {\n                    this.y = pe.pointer.lastWorldPos.y;\n                }\n            }\n        });\n\n        this.on('pointerdragleave', (pe: ex.Input.PointerEvent) => {\n            if (this.isDragging) {\n                const worldY = pe.pointer.lastWorldPos.y;\n                if (worldY > this.scrollBarTop && worldY < this.scrollBarBotton) {\n                    this.y = pe.pointer.lastWorldPos.y;\n                }\n            }\n        });\n    }\n\n    public setScrollBottom(num: number) {\n        this.scrollBarBotton = num;\n        if(Math.floor(this.scrollBarBotton) <= Math.floor(this.scrollBarTop)) {\n            this.visible = false;\n        }\n    }\n}","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier, Function, Optional, Consumer } from \"java8script\";\nimport SoundManager from \"../../engine/soundManager\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n    private onToggle: Optional<Consumer<boolean>>\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean, onToggle?: Consumer<boolean>) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n        this.onToggle = Optional.ofNullable(onToggle);\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public setOnToggle(onToggle: Consumer<boolean>): void {\n        this.onToggle = Optional.of(onToggle);\n    }\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    public setChecked(isChecked: boolean): void {\n        this.checked = isChecked;\n        this.setCheckedDrawing();\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound)\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n    private setCheckedDrawing() {\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        this.setCheckedDrawing();\n        this.onToggle.ifPresent(func => func(this.checked));\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine, onToggle?: (checked:boolean) => void) {\n        const textSize = size - (size * 0.25)\n        const buttonSize = size + (size * 0.25);\n        \n\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = textSize;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(buttonSize, x+labelWidth*(3/4), y, defaultVal, onToggle);\n        \n    }\n\n    public addOnToggle(onToggle: (checked:boolean) => void): void {\n        this.radio.setOnToggle(onToggle);\n    }\n    \n    public setChecked(isChecked: boolean): void {\n        this.radio.setChecked(isChecked);\n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getBottom() {\n        return Math.max(this.radio.getBottom(), this.label.getBottom());\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign, Color, Sprite } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/fontManager\";\nimport { Colorize } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Stream } from \"java8script\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButtonSprite:Sprite;\n    private leftButton: ButtonBase;\n    private rightButtonSprite: Sprite;\n    private rightButton: ButtonBase;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number, disabled: boolean) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n\n        const textSize = this.fontSize - (this.fontSize * 0.25)\n        const buttonSize = this.fontSize + (this.fontSize * 0.25);\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = textSize\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        \n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+buttonSize, null, FontManager.get().getMono());\n        this.numberLabel.fontSize = textSize\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        \n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButtonSprite = this.leftButton.getSprite();\n        this.leftButton.x = x - buttonSize*1.5\n        this.leftButton.y = y + buttonSize;\n        this.leftButton.scale = new Vector(buttonSize/Resources.uiLeft.width, buttonSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(buttonSize);\n        this.leftButton.setWidth(buttonSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButtonSprite = this.rightButton.getSprite();\n        this.rightButton.x = x + buttonSize*1.5;\n        this.rightButton.y = y + buttonSize;\n        this.rightButton.scale = new Vector(buttonSize/Resources.uiRight.width, buttonSize/Resources.uiRight.height);\n        this.rightButton.setHeight(buttonSize);\n        this.rightButton.setWidth(buttonSize);\n\n        this.updateDisabled(disabled);\n    }\n\n    public updateDisabled = (isDisabled: boolean) => {\n        this.leftButtonSprite.clearEffects();\n        this.rightButtonSprite.clearEffects();\n        if(isDisabled) {\n            const disColor = Color.Gray;\n            this.topLabel.color = disColor\n            this.numberLabel.color = disColor;\n            this.leftButtonSprite.addEffect(new Colorize(disColor));\n            this.rightButtonSprite.addEffect(new Colorize(disColor));\n            this.leftButton.setDisabled(true);\n            this.rightButton.setDisabled(true);\n        } else {\n            this.topLabel.color = Color.Black;\n            this.numberLabel.color = Color.Black;\n            this.leftButton.setDisabled(false);\n            this.rightButton.setDisabled(false);\n        }\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getBottom() {\n        return Stream.ofValues<Actor>(this.leftButton, this.rightButton, this.numberLabel)\n        .map(a => a.getBottom())\n        .max()\n        .orElse(0);\n    }\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Actor, Scene, Engine, Texture, Axis } from 'excalibur';\nimport BackgroundManager from '../engine/backgroundManager';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SoundManager from '../engine/soundManager';\nimport SizingManager from '../engine/sizingManager';\nimport { calcDimensionsSingleObjectTexture, IDimensions } from '../engine/helpers';\nimport { Consumer } from 'java8script';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport ScrollBar from '../actors/bars/scrollBar';\n\nexport class Options extends Scene {\n\n  private engine: Engine;\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n  private progressionToggle: LabeledRadio;\n  private title: Actor;\n  private scrollBar: ScrollBar;\n\n  constructor(engine: Engine) {\n    super(engine);\n    this.scrollBar = new ScrollBar(engine);\n    this.add(this.scrollBar);//for some reason adding in the initialize makes the drag stop working\n  }\n\n  public onInitialize(engine: Engine) {\n    this.engine = engine;\n    const itemSize = SizingManager.get().getUIItemSize();\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n\n\n    this.addTitle();\n    this.addSoundToggle(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addProgressionToggle(itemSize)\n    const callbackForEnabling = this.addGridSize(itemSize);\n    this.progressionToggle.addOnToggle(callbackForEnabling); \n\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const createbuttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.confirmMenu, sizing.padding, sizing.maxScale);\n\n    const createButtonY = \n    this.gridSize.getBottom() < engine.drawHeight - createbuttonDims.height \n      ? engine.drawHeight - createbuttonDims.height / 2 - Config.optionPadding //grid size and confirm dont overelap so all good, draw at the bottom of screen \n      : this.gridSize.getBottom() + Config.optionPadding + createbuttonDims.height/2;\n    const createButton = this.createButton(\n      createbuttonDims,\n      engine.drawWidth / 2,\n      createButtonY,\n      Resources.confirmMenu,\n      () => this.onConfirm()\n    );\n    this.add(createButton);\n\n    this.scrollBar.setScrollBottom(engine.drawHeight/2 + (createButton.getBottom() - engine.drawHeight) + Config.gridPadding)\n    this.camera.strategy.lockToActorAxis(this.scrollBar, Axis.Y)\n\n    this.addTileMap(BackgroundManager.getCustomTileMap(engine.drawWidth, createButton.getBottom() + 100));//need to draw to fit the whole canvas rather than just the screen\n  }\n\n  private createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n    const button = new ButtonBase(texture, onClick);\n    button.x = x\n    button.y = y\n    button.scale = dims.scale;\n    button.setHeight(dims.height);\n    button.setWidth(dims.width);\n    return button;\n  }\n\n  private onConfirm = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    ProgressionManager.get().setProgressionDisabled(!this.progressionToggle.isChecked());\n    PlayerSettingsManager.get().setIsSoundOff(!this.sound.isChecked())\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.optionTitle, 0.6, 1);\n    const sprite = Resources.optionTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth / 2;\n    title.y = dims.height / 2 + Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale;\n    this.title = title;\n    this.add(title);\n  }\n\n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\",\n      itemSize, this.engine.drawWidth / 2,\n      this.title.getBottom() + Config.optionPadding*2,\n      !PlayerSettingsManager.get().isSoundOff(),\n      this.engine\n    );\n\n    this.sound.getDrawables()\n      .forEach(e => this.add(e));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2,\n      this.sound.getBottom() + itemSize * 0.5 + Config.optionPadding,\n      itemSize, false);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addProgressionToggle(itemSize) {\n    this.progressionToggle = new LabeledRadio(\"Story Mode\", itemSize, this.engine.drawWidth / 2,\n      this.difficulty.getBottom() + itemSize * 1 + Config.optionPadding,\n      !ProgressionManager.get().isProgressionDisabled(), this.engine);\n\n    this.progressionToggle.getDrawables()\n      .forEach(e => this.add(e));\n  }\n\n  //returns callback for toggling the objects\n  private addGridSize(itemSize): Consumer<boolean> {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2,\n    this.progressionToggle.getBottom() + itemSize * 0.5 + Config.optionPadding, itemSize,\n    !ProgressionManager.get().isProgressionDisabled());\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n\n    return this.gridSize.updateDisabled;\n  }\n\n  public onActivate() {\n    this.sound.setChecked(!PlayerSettingsManager.get().isSoundOff());\n    this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel());\n    this.progressionToggle.setChecked(!ProgressionManager.get().isProgressionDisabled())\n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport {calcDimensionsSingleObjectTexture, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport SizingManager, { IButtonSizing } from '../engine/sizingManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n    const sizing: IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.nextMenu, sizing.padding, sizing.maxScale);\n    const imageDims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1)\n    const offset = buttonDims.height/2 + Config.optionPadding;\n\n    const victoryActor = new ex.Actor(\n      this.engine.drawWidth / 2,\n      this.engine.drawHeight / 2 - offset,\n      imageDims.width,\n      imageDims.height\n    );\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.scale = imageDims.scale;\n    this.add(victoryActor);\n\n    const nextButton = new ButtonBase(\n      Resources.nextMenu, \n      this.onNext,\n    );\n    nextButton.setHeight(buttonDims.height);\n    nextButton.setWidth(buttonDims.width);\n    nextButton.scale = buttonDims.scale;\n    nextButton.x = engine.drawWidth/2;\n    nextButton.y = engine.drawHeight - offset;\n    console.log(nextButton);\n    this.add(nextButton);\n  }\n\n  private onNext = () => {\n    this.engine.goToScene(getGameWindow());\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, safePointerUp, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport SizingManager, { IButtonSizing } from '../engine/sizingManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n\n    const imageDims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    const sizing: IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.menuMenu, sizing.padding, sizing.maxScale);\n    const offset = buttonDims.height/2 + Config.optionPadding;\n\n\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2 - offset;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = imageDims.scale;\n\n    const menuButton = new ButtonBase(\n      Resources.menuMenu, \n      this.onMenu,\n    );\n    menuButton.setHeight(buttonDims.height);\n    menuButton.setWidth(buttonDims.width);\n    menuButton.scale = buttonDims.scale;\n    menuButton.x = engine.drawWidth/2;\n    menuButton.y = engine.drawHeight - offset;\n    console.log(menuButton);\n    this.add(menuButton)\n  }\n\n  private onMenu = () => {\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  };\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      pointerScope: ex.Input.PointerScope.Canvas, //make it so clicks don't go \"through\" the help modals\n      suppressPlayButton: true, //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport SoundManager from '../engine/soundManager';\nimport SizingManager, { IButtonSizing } from '../engine/sizingManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    this.addTileMap(BackgroundManager.getDefaultTileMap(engine));\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(getGameWindow()),\n    );\n    const sizing :IButtonSizing = SizingManager.get().getUIButtonSizing();\n    this.sizeProperly(this.start, sizing.padding, sizing.maxScale, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => this.game.goToScene(Scenes.OPTIONS),\n    );\n    this.sizeProperly(this.options, sizing.padding, sizing.maxScale, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => this.game.goToScene(Scenes.HELP),\n    );\n    this.sizeProperly(this.help, sizing.padding, sizing.maxScale, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.title.addDrawing(Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicEnd();\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"00f14d085530ea0ae58c17a32b3fe27f.wav\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"21c2960a6ef19bc7b845d01041d556b9.png\";","module.exports = __webpack_public_path__ + \"5bbe8e44117d6281e0990e5a0213c814.png\";","module.exports = __webpack_public_path__ + \"031849bdaba0fc1f7b8e931a8cd4b081.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"dd8089d1ad5e36afe0d889a9218a0559.png\";","module.exports = __webpack_public_path__ + \"53b20a23b0fa9be3ec391f1dd49a6492.png\";","module.exports = __webpack_public_path__ + \"fb261f33ec74628ffab99997289e2f44.png\";","module.exports = __webpack_public_path__ + \"d848ad40f4eee6a0b29882906e9b4c24.png\";","module.exports = __webpack_public_path__ + \"64c5b08a042975010b476c3ca33efd4d.png\";","module.exports = __webpack_public_path__ + \"d23070e309626133deb93bbabf5d25bb.png\";","module.exports = __webpack_public_path__ + \"5d8c965fd0efaf1fa74941ad5cbb8d3c.png\";","module.exports = __webpack_public_path__ + \"135852ebc677f398779a9ac03e3c396b.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","import { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/sizingManager';\nimport PlayerSettingsManager from './engine/progression/playerSettingsManager';\nimport { StoryGameWindow } from './scenes/gameWindows/storyGameWindow';\nimport { GridGameWindow } from './scenes/gameWindows/gridGameWindow';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\nconst options = new Options(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.STORY_GAME_WINDOW, new StoryGameWindow(game));\ngame.add(Scenes.GRID_GAME_WINDOW, new GridGameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, options);\ngame.add(Scenes.HELP, new Help(game));\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n  .forEach(k => loader.addResource(Resources[k]));\n\ngame.start(loader).then(() => {\n  PlayerSettingsManager.initialize()\n    .then(() => {\n      SizingManager.initialize(game);\n      game.goToScene(Scenes.MAIN_MENU);\n    });\n});\n"],"sourceRoot":""}