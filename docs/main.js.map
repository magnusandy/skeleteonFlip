{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/engine/sizingManager.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/fontManager.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/images/title.png","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/engine/progression/playerSettings.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/button.wav","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/myMono.png","webpack:///./src/images/helpTitle.png","webpack:///./src/images/optionTitle.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/helpMenu.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/gameWindow.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","optionTitle","helpTitle","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","buttonSound","backgroundTile","Resources","Texture","gameOver","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","t","e","Scenes","GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","difficulty_1","playerSettings_1","ProgressionManager","playerSettings","this","singleton","DEFAULT","getGameGridSize","ps","progressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","maxLevel","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","difficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","resetProgress","getLevelString","resources_1","SoundManager","disabled","soundManager","disableSound","backgroundSound","stop","enableSound","backgroundMusicStart","volume","loop","play","backgroundMusicEnd","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","SizingManager","engine","initialize","console","log","isMobile","drawWidth","getUIItemSize","getMenuHeight","excalibur_1","BackgroundManager","tile","numberOfCols","Math","ceil","width","numberOfRows","drawHeight","height","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","maxScale","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","texture","SpriteEffects_1","soundManager_1","ButtonBase","_super","onClick","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","addDrawing","on","EventTypes","PointerUp","onClickWrapper","__extends","event","ev","type","Actor","FontManager","generalMono","SpriteFont","getMono","setPrototypeOf","__proto__","Array","constructor","create","CardType","progressionManager_1","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","java8script_1","difficultyLevel","buff","text","buffFactor","skeletonFactor","difficultyName","getDifficultyLevel","level","Stream","of","VERY_EASY","EASY","NORMAL","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","scenes_1","buttonBase_1","backgroundManager_1","helpers_1","Help","onInitialize","bgManager","addTileMap","exitT","exit","goToScene","add","addTitle","onActivate","onDeactivate","asSprite","Scene","RadioButton","size","defaultValue","currentSprite","toggleButton","checked","checkedSprite","uncheckedSprite","isChecked","radioButton_1","fontManager_1","LabeledRadio","label","defaultVal","Label","fontSize","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","labelWidth","getTextWidth","ctx","radio","getDrawables","u","NumberSelector","min","max","current","labelText","topLabel","numberLabel","leftButton","addBy","rightButton","nextCurrent","getCurrent","setCurrent","newCurrent","a","numberSelector_1","labeledRadio_1","Options","arguments","gridSize","itemSize","addGridSize","addDifficultySize","addSoundToggle","forEach","Victory","victoryActor","GameOver","gameOverActor","playerIdleAnimation","getAnimationForAll","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","suppressPlayButton","start","loader","Engine","MainMenu","game","sizeProperly","options","help","placeActors","actor","padding","resource","getHeight","LevelDisplay","startingLevel","createLabelText","PREFIX","updateLevel","newLevel","card_1","Count","index","initialCount","setCount","leftSide","top","count","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","map","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","PlayerSettings","toggleSound","chosenDiff","chosenGridSize","maxDiff","soundOff","chosenDifficulty","maxDifficulty","newStage","difficutly","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","GameCoordinator","healthCoordinator","attackCoordinator","updateLabels","checkIfCompleteGame","mm","coordinator","gridCoordinator","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","skeletonCountForCol","skeletonCountForRow","allMatch","coordinator_1","level_1","GameWindow","onBackButton","levelDisplay","remove","gameWindow_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","mainMenu","keys","k","addResource"],"mappings":"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AAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAA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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([251,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst helpMenu = require('./images/helpMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\nconst optionTitle = require('./images/optionTitle.png');\nconst helpTitle = require('./images/helpTitle.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\nconst buttonSound = require('./sounds/button.wav');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    optionTitle: new ex.Texture(optionTitle),\n    helpTitle: new ex.Texture(helpTitle),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n\n    myMono: new ex.Texture(fontMono),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    buttonSound: new ex.Sound(buttonSound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport { Resources, Config, uiHeart}\n","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}","import { Difficulty } from \"./difficulty\";\nimport PlayerSettings from \"./playerSettings\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private playerSettings: PlayerSettings;\n\n    private constructor(playerSettings: PlayerSettings) {\n        this.playerSettings = playerSettings;\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager(\n                PlayerSettings.DEFAULT\n            );\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = this.playerSettings;\n        if(ps.progressionDisabled) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return this.playerSettings.getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return this.playerSettings.getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public progress(): void {\n        const currentLevel = this.playerSettings.getCurrentLevel();\n        const currentStage = this.playerSettings.getCurrentStage();\n\n        if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n            //on the last stage of the level, need to find out if we can move on or just move up stages\n            if(currentLevel === this.playerSettings.maxLevel) {\n                // on the max upgraded level just increase stage\n                this.playerSettings.setCurrentStage(currentStage + 1);\n            } else {\n                this.playerSettings.setCurrentStage(1);\n                this.playerSettings.setCurrentLevel(currentLevel + 1);\n            }\n        } else {\n            //move on to the next stage, no extra logic\n            this.playerSettings.setCurrentStage(currentStage + 1);\n        }  \n    }\n\n\n    public setGridSize(newSize: number) {\n        this.playerSettings.setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        this.playerSettings.setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public resetProgress(): void {\n        const ps = this.playerSettings;\n        if (!ps.progressionDisabled) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        if (this.playerSettings.getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${this.playerSettings.getCurrentLevel()}.${this.playerSettings.getCurrentStage()}`;\n        }\n    }\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n    private disabled: boolean = false;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        this.disabled = true;\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public enableSound() {\n        this.disabled = false;\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.disabled) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.volume = 0.1;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play();\n            }\n        }\n    }\n\n    public backgroundMusicEnd(): void {\n        if(!this.disabled) {\n            if (this.backgroundSound) {\n                this.backgroundSound.stop();\n                this.backgroundSound = null;\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!this.disabled) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import { Engine } from \"excalibur\";\n\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 768; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 3;\n    }\n\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(engine: Engine) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(engine.drawWidth / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(engine.drawHeight / tile.height); \n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows*numberOfCols; row++) {\n\n                tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    public getTileMap(): TileMap {\n        return this.tileMap;\n    }\n}","import { Texture, Vector } from \"excalibur\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n    \n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport SoundManager from \"../../engine/soundManager\";\nimport { Resources } from \"../../resources\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>) {\n        super();\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if(event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.sprite.clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n                onClick();\n            } else {\n            }\n        }\n    }\n\n    private onDown: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.sprite.clearEffects();\n    }\n\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/sizingManager';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight()/2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\n\nexport class Help extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n    this.addTitle();\n  }\n  \n  public onActivate() {\n  }\n  \n  public onDeactivate() {\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.helpTitle, 0.6, 2);\n    const sprite = Resources.helpTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth/2;\n    title.y = dims.height/2+ Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale; \n    this.add(title);\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier } from \"java8script\";\nimport SoundManager from \"../../engine/soundManager\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound)\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, SpriteFont, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine) {\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = size;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        console.log(`labelwidth ${labelWidth}`)\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(size, x+labelWidth*(2/3), y, defaultVal);\n        \n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButton: Actor;\n    private rightButton: Actor;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = this.fontSize;\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+fontSize, null, FontManager.get().getMono());\n        //this.numberLabel.anchor = new Vector(1, 1);\n        this.numberLabel.fontSize = this.fontSize;\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButton.x = x - this.fontSize*1.5\n        this.leftButton.y = y + fontSize;\n        this.leftButton.scale = new Vector(this.fontSize/Resources.uiLeft.width, this.fontSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(this.fontSize);\n        this.leftButton.setWidth(this.fontSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButton.x = x + this.fontSize*1.5;\n        this.rightButton.y = y + fontSize;\n        this.rightButton.scale = new Vector(this.fontSize/Resources.uiRight.width, this.fontSize/Resources.uiRight.height);\n        this.rightButton.setHeight(this.fontSize);\n        this.rightButton.setWidth(this.fontSize);\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Label, Color, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { MainMenu } from './mainMenu';\nimport RadioButton from '../actors/bars/radioButton';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SoundManager from '../engine/soundManager';\nimport SizingManager from '../engine/sizingManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\n\nexport class Options extends ex.Scene {\n\n  private engine;\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n    const itemSize = SizingManager.get().getUIItemSize();\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      this.onExit\n    );\n\n    this.addGridSize(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addSoundToggle(itemSize);\n    this.addTitle();\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n  }\n\n  private onExit = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    if (this.sound.isChecked()) {\n      SoundManager.get().enableSound();\n    } else {\n      SoundManager.get().disableSound();\n    }\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.optionTitle, 0.6, 2);\n    const sprite = Resources.optionTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth/2;\n    title.y = dims.height/2+ Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale; \n    this.add(title);\n  }\n  \n  private addGridSize(itemSize): void {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2, this.engine.drawHeight / 2, itemSize);\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 + itemSize*2 + Config.optionPadding, itemSize);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 - itemSize - Config.optionPadding, true, this.engine);\n\n    this.sound.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  public onActivate() {\n    this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel()); \n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1.5)\n    victoryActor.setHeight(engine.drawHeight);// set height/width so you can tap anywhere on the screen\n    victoryActor.setWidth(engine.drawWidth);\n    victoryActor.scale = dims.scale;\n    victoryActor.on('pointerup', () => {\n      ProgressionManager.get().progress();\n      this.engine.goToScene(Scenes.GAME_WINDOW);\n    });\n    this.add(victoryActor);\n    this.add(new BackgroundManager(engine).getTileMap())\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine, Actor } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    const dims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = dims.scale;\n    gameOverActor.on('pointerup', () => {\n      ProgressionManager.get().resetProgress();\n      this.engine.goToScene(Scenes.MAIN_MENU);\n    });\n    this.add(new BackgroundManager(engine).getTileMap())\n\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      suppressPlayButton: true //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport SoundManager from '../engine/soundManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(Scenes.GAME_WINDOW),\n    );\n    this.sizeProperly(this.start, 0.4, 0.5, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => this.game.goToScene(Scenes.OPTIONS),\n    );\n    this.sizeProperly(this.options, 0.4, 0.5, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => this.game.goToScene(Scenes.HELP),\n    );\n    this.sizeProperly(this.help, 0.4, 0.5, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.title.addDrawing(Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicEnd();\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return `${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport ProgressionManager from \"./progressionManager\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\nexport default class PlayerSettings {\n    public static DEFAULT: PlayerSettings = new PlayerSettings(false, false, Difficulty.VERY_EASY, 3, 3, Difficulty.NORMAL, 1, 1);\n    //Settings\n    public readonly soundOff: boolean;\n    public readonly progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    public readonly maxLevel: number;\n    public readonly maxDifficulty: Difficulty;\n\n    //Progression\n    private currentLevel: number;\n    private currentStage: number;\n\n    private constructor(toggleSound, progressionDisabled, chosenDiff, chosenGridSize, maxLevel, maxDiff, currentLevel, currentStage) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty  = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxLevel = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n    }    \n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public  getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"00f14d085530ea0ae58c17a32b3fe27f.wav\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"1b708fab0fb46c4291e239a822e3d553.png\";","module.exports = __webpack_public_path__ + \"5bbe8e44117d6281e0990e5a0213c814.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"6f20cd91097c8be0d36eaad2bf6244ec.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport { Config } from \"../../resources\";\nimport SizingManager from \"../../engine/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport { Config } from \"../resources\";\nimport SizingManager from \"../engine/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/sizingManager\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const mm: SizingManager = SizingManager.get();\n        const coordinator: GameCoordinator = new GameCoordinator(\n            engine,\n            NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword)\n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, ProgressionManager.get().getGameGridSize(), engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n        }\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinator } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport SoundManager from '../engine/soundManager';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { Actor, Engine, Color, Texture, Vector } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { Scenes } from './scenes';\nimport LevelDisplay from '../actors/bars/level';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport SizingManager from '../engine/sizingManager';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator: GameCoordinator;\n  private engine: Engine;\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    /*\n    const bar = new Actor();\n    bar.y = Config.menuHeight;\n    bar.x = this.engine.drawWidth/2;\n    bar.setHeight(1);\n    bar.setWidth(this.engine.drawWidth)\n    bar.color = Color.Red;\n    bar\n    this.add(bar);//todo remove\n    */\n\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n\n    //todo move this to be actually score keeper\n    /*\n    const coins: Actor = new Actor();\n    coins.addDrawing(Resources.uiCoins);\n    coins.scale = new Vector(Config.uiItemSize / Resources.uiCoins.width, Config.uiItemSize / Resources.uiCoins.height);\n    coins.x = Config.uiItemSize / 2;\n    coins.y = Config.uiItemSize * 2.5;\n    this.add(coins);\n    */\n\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth/2, mm.getMenuHeight()-mm.getUIItemSize()/2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n  }\n\n  public onActivate() {\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n\n    SoundManager.get().backgroundMusicStart();\n    const coordinator: GameCoordinator = GameCoordinator.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n\n    //cordova specific\n    //document.addEventListener(\"backbutton\", this.onBackButton);\n  }\n\n  private onBackButton = () => this.engine.goToScene(Scenes.MAIN_MENU);\n\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n\n    //document.removeEventListener(\"backbutton\", this.onBackButton);\n  }\n} \n","import { GameWindow } from './scenes/gameWindow';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/sizingManager';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, new Options(game));\ngame.add(Scenes.HELP, new Help(game));\n\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  SizingManager.initialize(game);\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}