{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/engine/sizingManager.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/engine/fontManager.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/images/title.png","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/engine/progression/playerSettings.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/myMono.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/helpMenu.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/gameWindow.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","backgroundTile","Resources","Texture","gameOver","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","t","e","Scenes","GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","difficulty_1","playerSettings_1","ProgressionManager","playerSettings","this","singleton","DEFAULT","getGameGridSize","ps","progressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","maxLevel","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","difficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","resetProgress","getLevelString","SizingManager","engine","initialize","console","log","isMobile","drawWidth","getUIItemSize","getMenuHeight","excalibur_1","resources_1","BackgroundManager","tile","numberOfCols","Math","ceil","width","numberOfRows","drawHeight","height","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","__extends","setPrototypeOf","__proto__","Array","constructor","create","SpriteEffects_1","ButtonBase","_super","texture","onClick","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","addDrawing","on","EventTypes","PointerUp","onClickWrapper","event","ev","type","Actor","SoundManager","disabled","soundManager","disableSound","backgroundSound","stop","enableSound","backgroundMusicStart","loop","play","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","maxScale","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","FontManager","generalMono","SpriteFont","getMono","CardType","soundManager_1","progressionManager_1","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","java8script_1","difficultyLevel","buff","text","buffFactor","skeletonFactor","difficultyName","getDifficultyLevel","level","Stream","of","VERY_EASY","EASY","NORMAL","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","scenes_1","buttonBase_1","backgroundManager_1","Help","onInitialize","bgManager","addTileMap","exitT","exit","goToScene","add","onActivate","onDeactivate","Scene","RadioButton","size","defaultValue","currentSprite","toggleButton","checked","checkedSprite","uncheckedSprite","isChecked","radioButton_1","fontManager_1","LabeledRadio","label","defaultVal","Label","fontSize","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","labelWidth","getTextWidth","ctx","radio","getDrawables","u","NumberSelector","min","max","current","labelText","topLabel","numberLabel","leftButton","addBy","rightButton","nextCurrent","getCurrent","setCurrent","newCurrent","a","numberSelector_1","labeledRadio_1","Options","arguments","gridSize","itemSize","addGridSize","addDifficultySize","addSoundToggle","forEach","helpers_1","Victory","victoryActor","asSprite","GameOver","gameOverActor","playerIdleAnimation","getAnimationForAll","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","suppressPlayButton","start","loader","Engine","MainMenu","game","sizeProperly","options","help","placeActors","actor","padding","resource","getHeight","LevelDisplay","startingLevel","createLabelText","PREFIX","updateLevel","newLevel","card_1","Count","index","initialCount","setCount","leftSide","top","count","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","map","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","PlayerSettings","toggleSound","chosenDiff","chosenGridSize","maxDiff","soundOff","chosenDifficulty","maxDifficulty","newStage","difficutly","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","GameCoordinator","healthCoordinator","attackCoordinator","updateLabels","checkIfCompleteGame","mm","coordinator","gridCoordinator","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","skeletonCountForCol","skeletonCountForRow","allMatch","coordinator_1","level_1","GameWindow","onBackButton","levelDisplay","remove","gameWindow_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","mainMenu","keys","k","addResource"],"mappings":"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,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([248,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nimport { Color } from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst helpMenu = require('./images/helpMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n\n    myMono: new ex.Texture(fontMono),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport { Resources, Config, uiHeart}\n","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}","import { Difficulty } from \"./difficulty\";\nimport PlayerSettings from \"./playerSettings\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private playerSettings: PlayerSettings;\n\n    private constructor(playerSettings: PlayerSettings) {\n        this.playerSettings = playerSettings;\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager(\n                PlayerSettings.DEFAULT\n            );\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = this.playerSettings;\n        if(ps.progressionDisabled) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return this.playerSettings.getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return this.playerSettings.getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public progress(): void {\n        const currentLevel = this.playerSettings.getCurrentLevel();\n        const currentStage = this.playerSettings.getCurrentStage();\n\n        if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n            //on the last stage of the level, need to find out if we can move on or just move up stages\n            if(currentLevel === this.playerSettings.maxLevel) {\n                // on the max upgraded level just increase stage\n                this.playerSettings.setCurrentStage(currentStage + 1);\n            } else {\n                this.playerSettings.setCurrentStage(1);\n                this.playerSettings.setCurrentLevel(currentLevel + 1);\n            }\n        } else {\n            //move on to the next stage, no extra logic\n            this.playerSettings.setCurrentStage(currentStage + 1);\n        }  \n    }\n\n\n    public setGridSize(newSize: number) {\n        this.playerSettings.setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        this.playerSettings.setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public resetProgress(): void {\n        const ps = this.playerSettings;\n        if (!ps.progressionDisabled) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        if (this.playerSettings.getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${this.playerSettings.getCurrentLevel()}.${this.playerSettings.getCurrentStage()}`;\n        }\n    }\n}","import { Engine } from \"excalibur\";\n\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 768; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 3;\n    }\n\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(engine: Engine) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(engine.drawWidth / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(engine.drawHeight / tile.height); \n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows*numberOfCols; row++) {\n\n                tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    public getTileMap(): TileMap {\n        return this.tileMap;\n    }\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>) {\n        super();\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if(event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.sprite.clearEffects();\n                onClick();\n            } else {\n            }\n        }\n    }\n\n    private onDown: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.sprite.clearEffects();\n    }\n\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n    private disabled: boolean = false;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        this.disabled = true;\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public enableSound() {\n        this.disabled = false;\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.disabled) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play(0.1);\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!this.disabled) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import { Texture, Vector } from \"excalibur\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n    \n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/sizingManager';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight()/2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Help extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n  }\n  \n  public onActivate() {\n  }\n  \n  public onDeactivate() {\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier } from \"java8script\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, SpriteFont, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine) {\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = size;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        console.log(`labelwidth ${labelWidth}`)\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(size, x+labelWidth*(2/3), y, defaultVal);\n        \n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButton: Actor;\n    private rightButton: Actor;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = this.fontSize;\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+fontSize, null, FontManager.get().getMono());\n        //this.numberLabel.anchor = new Vector(1, 1);\n        this.numberLabel.fontSize = this.fontSize;\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButton.x = x - this.fontSize*1.5\n        this.leftButton.y = y + fontSize;\n        this.leftButton.scale = new Vector(this.fontSize/Resources.uiLeft.width, this.fontSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(this.fontSize);\n        this.leftButton.setWidth(this.fontSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButton.x = x + this.fontSize*1.5;\n        this.rightButton.y = y + fontSize;\n        this.rightButton.scale = new Vector(this.fontSize/Resources.uiRight.width, this.fontSize/Resources.uiRight.height);\n        this.rightButton.setHeight(this.fontSize);\n        this.rightButton.setWidth(this.fontSize);\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Label, Color, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { MainMenu } from './mainMenu';\nimport RadioButton from '../actors/bars/radioButton';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SoundManager from '../engine/soundManager';\nimport SizingManager from '../engine/sizingManager';\n\nexport class Options extends ex.Scene {\n\n  private engine;\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n    const itemSize = SizingManager.get().getUIItemSize();\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      this.onExit\n    );\n\n    this.addGridSize(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addSoundToggle(itemSize);\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n  }\n\n  private onExit = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    if (this.sound.isChecked()) {\n      SoundManager.get().enableSound();\n    } else {\n      SoundManager.get().disableSound();\n    }\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n  private addGridSize(itemSize): void {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2, this.engine.drawHeight / 2, itemSize);\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 + itemSize*2 + Config.optionPadding, itemSize);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 - itemSize - Config.optionPadding, true, this.engine);\n\n    this.sound.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  public onActivate() {\n    this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel()); \n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1.5)\n    victoryActor.setHeight(engine.drawHeight);// set height/width so you can tap anywhere on the screen\n    victoryActor.setWidth(engine.drawWidth);\n    victoryActor.scale = dims.scale;\n    victoryActor.on('pointerup', () => {\n      ProgressionManager.get().progress();\n      this.engine.goToScene(Scenes.GAME_WINDOW);\n    });\n    this.add(victoryActor);\n    this.add(new BackgroundManager(engine).getTileMap())\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine, Actor } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    const dims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = dims.scale;\n    gameOverActor.on('pointerup', () => {\n      ProgressionManager.get().resetProgress();\n      this.engine.goToScene(Scenes.MAIN_MENU);\n    });\n    this.add(new BackgroundManager(engine).getTileMap())\n\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      suppressPlayButton: true //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(Scenes.GAME_WINDOW),\n    );\n    this.sizeProperly(this.start, 0.4, 0.5, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => this.game.goToScene(Scenes.OPTIONS),\n    );\n    this.sizeProperly(this.options, 0.4, 0.5, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => this.game.goToScene(Scenes.HELP),\n    );\n    this.sizeProperly(this.help, 0.4, 0.5, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.title.addDrawing(Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return `${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport ProgressionManager from \"./progressionManager\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\nexport default class PlayerSettings {\n    public static DEFAULT: PlayerSettings = new PlayerSettings(false, false, Difficulty.VERY_EASY, 3, 3, Difficulty.NORMAL, 1, 1);\n    //Settings\n    public readonly soundOff: boolean;\n    public readonly progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    public readonly maxLevel: number;\n    public readonly maxDifficulty: Difficulty;\n\n    //Progression\n    private currentLevel: number;\n    private currentStage: number;\n\n    private constructor(toggleSound, progressionDisabled, chosenDiff, chosenGridSize, maxLevel, maxDiff, currentLevel, currentStage) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty  = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxLevel = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n    }    \n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public  getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"6f20cd91097c8be0d36eaad2bf6244ec.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport { Config } from \"../../resources\";\nimport SizingManager from \"../../engine/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport { Config } from \"../resources\";\nimport SizingManager from \"../engine/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/sizingManager\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const mm: SizingManager = SizingManager.get();\n        const coordinator: GameCoordinator = new GameCoordinator(\n            engine,\n            NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword)\n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, ProgressionManager.get().getGameGridSize(), engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n        }\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinator } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport SoundManager from '../engine/soundManager';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { Actor, Engine, Color, Texture, Vector } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { Scenes } from './scenes';\nimport LevelDisplay from '../actors/bars/level';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport SizingManager from '../engine/sizingManager';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator: GameCoordinator;\n  private engine: Engine;\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    /*\n    const bar = new Actor();\n    bar.y = Config.menuHeight;\n    bar.x = this.engine.drawWidth/2;\n    bar.setHeight(1);\n    bar.setWidth(this.engine.drawWidth)\n    bar.color = Color.Red;\n    bar\n    this.add(bar);//todo remove\n    */\n\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n\n    //todo move this to be actually score keeper\n    /*\n    const coins: Actor = new Actor();\n    coins.addDrawing(Resources.uiCoins);\n    coins.scale = new Vector(Config.uiItemSize / Resources.uiCoins.width, Config.uiItemSize / Resources.uiCoins.height);\n    coins.x = Config.uiItemSize / 2;\n    coins.y = Config.uiItemSize * 2.5;\n    this.add(coins);\n    */\n\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth/2, mm.getMenuHeight()-mm.getUIItemSize()/2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n  }\n\n  public onActivate() {\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n\n    SoundManager.get().backgroundMusicStart();\n    const coordinator: GameCoordinator = GameCoordinator.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n\n    //cordova specific\n    //document.addEventListener(\"backbutton\", this.onBackButton);\n  }\n\n  private onBackButton = () => this.engine.goToScene(Scenes.MAIN_MENU);\n\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n\n    //document.removeEventListener(\"backbutton\", this.onBackButton);\n  }\n} \n","import { GameWindow } from './scenes/gameWindow';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/sizingManager';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, new Options(game));\ngame.add(Scenes.HELP, new Help(game));\n\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  SizingManager.initialize(game);\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}