{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/engine/sizingManager.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/actors/bars/exitButton.ts","webpack:///./src/engine/fontManager.ts","webpack:///./src/engine/progression/playerSettingsManager.ts","webpack:///./src/scenes/gameWindows/gameWindowBase.ts","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/title.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/scenes/gameWindows/gridGameWindow.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/scenes/gameWindows/storyGameWindow.ts","webpack:///./src/modal/modal.tsx","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/button.wav","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/myMono.png","webpack:///./src/images/helpTitle.png","webpack:///./src/images/optionTitle.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/menu/playing.png","webpack:///./src/images/menu/credits.png","webpack:///./src/images/menu/intro.png","webpack:///./src/images/menu/cards.png","webpack:///./src/images/menu/help.png","webpack:///./src/images/menu/options.png","webpack:///./src/images/menu/start.png","webpack:///./src/images/card.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","cardsMenu","introMenu","creditsMenu","playingMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","optionTitle","helpTitle","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","buttonSound","backgroundTile","Resources","Texture","gameOver","cardMenu","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","t","e","difficulty_1","playerSettingsManager_1","ProgressionManager","this","singleton","getGameGridSize","ps","isProgressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","maxLevel","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","difficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","setProgressionDisabled","isProgressDisabled","resetProgress","getLevelString","console","log","SizingManager","engine","initialize","isMobile","drawWidth","getUIItemSize","getMenuHeight","resources_1","SoundManager","disabled","soundManager","disableSound","backgroundSound","stop","enableSound","backgroundMusicStart","volume","loop","play","backgroundMusicEnd","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","Scenes","progressionManager_1","STORY_GAME_WINDOW","GRID_GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","getGameWindow","excalibur_1","BackgroundManager","tile","numberOfCols","Math","ceil","width","numberOfRows","drawHeight","height","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","maxScale","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","texture","safePointerUp","onClick","event","ev","type","SpriteEffects_1","soundManager_1","helpers_1","ButtonBase","_super","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","addDrawing","on","EventTypes","PointerUp","onClickWrapper","__extends","getSprite","setDisabled","Actor","CardType","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","buttonBase_1","ExitButton","FontManager","generalMono","SpriteFont","getMono","localForage","PlayerSettingsManager","toggleSound","progressionDisabled","chosenDiff","chosenGridSize","maxDiff","soundOff","chosenDifficulty","maxDifficulty","serializeV1","config","version","size","storeName","description","getItem","STORE_KEY","v","DEFAULT","saveData","deserializeV1","newCurrent","saveToStorage","newStage","gridSize","difficutly","isSoundOff","setIsSoundOff","isProgDisabled","getDifficultyLevel","save","setItem","VERY_EASY","NORMAL","coordinator_1","backgroundManager_1","scenes_1","exitButton_1","GameWindowBase","onInitialize","add","goToScene","coordinator","GameCoordinator","onActivate","getAllActors","forEach","onDeactivate","remove","Scene","java8script_1","difficultyLevel","buff","text","buffFactor","skeletonFactor","difficultyName","level","Stream","of","EASY","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","setPrototypeOf","__proto__","Array","constructor","create","gameWindowBase_1","GridGameWindow","currentOptionGridSize","resetGame","card_1","Count","index","initialCount","setCount","leftSide","top","asSprite","count","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","map","a","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getCurrent","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","updateLabels","rowCounts","skeletonCountForRow","columnCounts","skeletonCountForCol","attackCoordinator","healthCoordinator","checkIfCompleteGame","mm","gridCoordinator","createRowCountCards","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","allFlipped","allMatch","fontManager_1","LevelDisplay","startingLevel","createLabelText","fontSize","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","PREFIX","updateLevel","newLevel","Label","level_1","StoryGameWindow","levelDisplay","React","ReactModal","react_dom_1","xButton","skullImage","swordImage","potionImage","coinImage","heartUIImg","swordUIImage","threeImage","styles","padding","margin","flex","h1","holder","imgHolder","cardImg","ModalRenderer","isOpen","setOpenAndRerender","innerStuff","render","open","closeFunc","props","createElement","E","__assign","document","getElementById","introModal","style","howToPlayModal","src","alt","cardModal","textModal","content","borderRadius","borderWidth","borderColor","appElement","float","position","right","onPointerUp","borderStyle","minHeight","display","Component","modal_1","Help","bgManager","addTileMap","addTitle","modalRenderer","centerx","centery","createButton","button","RadioButton","defaultValue","onToggle","currentSprite","toggleButton","checked","ifPresent","func","checkedSprite","uncheckedSprite","Optional","ofNullable","isChecked","radioButton_1","LabeledRadio","label","defaultVal","textSize","buttonSize","labelWidth","getTextWidth","ctx","radio","getDrawables","NumberSelector","min","updateDisabled","isDisabled","leftButtonSprite","rightButtonSprite","disColor","topLabel","color","numberLabel","Colorize","leftButton","rightButton","Black","labelText","addBy","nextCurrent","setCurrent","u","numberSelector_1","labeledRadio_1","Options","arguments","progressionToggle","itemSize","callbackForEnabling","addGridSize","addDifficultySize","addSoundToggle","addProgressionToggle","toggleCallback","Victory","victoryActor","GameOver","gameOverActor","playerIdleAnimation","getAnimationForAll","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","pointerScope","Input","PointerScope","Canvas","suppressPlayButton","start","loader","Engine","MainMenu","game","sizeProperly","options","help","placeActors","actor","resource","getHeight","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","storyGameWindow_1","gridGameWindow_1","mainMenu","keys","k","addResource"],"mappings":"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AJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA4E,EAAAC,EAAAlF,GAAA,aAAAnC,OAAA6B,eAAAwF,EAAA,cAAAnF,OAAA,ICCA,IAAAiI,EAAAnJ,EAAA,GACAwU,EAAAxU,EAAA,IACAinB,EAAAjnB,EAAA,KACAknB,EAAAlnB,EAAA,KACAmnB,EAAAnnB,EAAA,KACAonB,EAAApnB,EAAA,KACAqnB,EAAArnB,EAAA,KACAsnB,EAAAtnB,EAAA,KACAunB,EAAAvnB,EAAA,KACAoP,EAAApP,EAAA,IACAuG,EAAAvG,EAAA,IACAwnB,EAAAxnB,EAAA,KACAynB,EAAAznB,EAAA,KAEMymB,EAAO,IAAIS,EAAA7lB,QACXqmB,EAAW,IAAIT,EAAAT,SAASC,GAC9BA,EAAK7R,IAAIJ,EAAAhK,OAAOI,UAAW8c,GAC3BjB,EAAK7R,IAAIJ,EAAAhK,OAAOK,UAAW,IAAIuc,EAAApC,SAASyB,IACxCA,EAAK7R,IAAIJ,EAAAhK,OAAOE,kBAAmB,IAAI8c,EAAAjK,gBAAgBkJ,IACvDA,EAAK7R,IAAIJ,EAAAhK,OAAOG,iBAAkB,IAAI8c,EAAA3Q,eAAe2P,IACrDA,EAAK7R,IAAIJ,EAAAhK,OAAOM,QAAS,IAAIuc,EAAAvC,QAAQ2B,IACrCA,EAAK7R,IAAIJ,EAAAhK,OAAOO,QAAS,IAAIuc,EAAAlD,QAAQqC,IACrCA,EAAK7R,IAAIJ,EAAAhK,OAAOQ,KAAM,IAAIuc,EAAAzG,KAAK2F,IAG/B,IAAIH,EAAS,IAAIa,EAAA9B,WACjBrmB,OAAO2oB,KAAKxe,EAAAtE,WACLqQ,QAAQ,SAAA0S,GAAK,OAAAtB,EAAOuB,YAAY1e,EAAAtE,UAAU+iB,MAEjDnB,EAAKJ,MAAMC,GAAQ/b,KAAK,WACtB6E,EAAA/N,QAAcyH,WAAW2d,GACzBlgB,EAAAlF,QAAsByH,aACtB2d,EAAK5R,UAAUL,EAAAhK,OAAOI","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([282,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/menu/start.png');\nconst optionMenu = require('./images/menu/options.png');\nconst helpMenu = require('./images/menu/help.png');\nconst cardsMenu = require('./images/menu/cards.png');\nconst introMenu = require('./images/menu/intro.png');\nconst creditsMenu = require('./images/menu/credits.png');\nconst playingMenu = require('./images/menu/playing.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\nconst optionTitle = require('./images/optionTitle.png');\nconst helpTitle = require('./images/helpTitle.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\nconst buttonSound = require('./sounds/button.wav');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    cardMenu: new ex.Texture(cardsMenu),\n    introMenu: new ex.Texture(introMenu),\n    creditsMenu: new ex.Texture(creditsMenu),\n    playingMenu: new ex.Texture(playingMenu),\n\n    optionTitle: new ex.Texture(optionTitle),\n    helpTitle: new ex.Texture(helpTitle),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n\n    myMono: new ex.Texture(fontMono),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    buttonSound: new ex.Sound(buttonSound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport { Resources, Config, uiHeart}\n","import { Difficulty } from \"./difficulty\";\nimport PlayerSettingsManager from \"./playerSettingsManager\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private constructor() {\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager();\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = PlayerSettingsManager.get();\n        if(ps.isProgressionDisabled()) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return PlayerSettingsManager.get().getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return PlayerSettingsManager.get().getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public isProgressionDisabled() {\n        return PlayerSettingsManager.get().isProgressionDisabled();\n    }\n\n    public progress(): void {\n        if(!PlayerSettingsManager.get().isProgressionDisabled()) {\n            const currentLevel = PlayerSettingsManager.get().getCurrentLevel();\n            const currentStage = PlayerSettingsManager.get().getCurrentStage();\n    \n            if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n                //on the last stage of the level, need to find out if we can move on or just move up stages\n                if(currentLevel === PlayerSettingsManager.get().maxLevel) {\n                    // on the max upgraded level just increase stage\n                    PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n                } else {\n                    PlayerSettingsManager.get().setCurrentStage(1);\n                    PlayerSettingsManager.get().setCurrentLevel(currentLevel + 1);\n                }\n            } else {\n                //move on to the next stage, no extra logic\n                PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n            }  \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        PlayerSettingsManager.get().setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        PlayerSettingsManager.get().setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public setProgressionDisabled(isProgressDisabled: boolean) {\n        return PlayerSettingsManager.get().setProgressionDisabled(isProgressDisabled);\n    }\n\n    public resetProgress(): void {\n        const ps = PlayerSettingsManager.get();\n        if (!ps.isProgressionDisabled()) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        console.log(\"gettinglevelstring\");\n        if (PlayerSettingsManager.get().getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${PlayerSettingsManager.get().getCurrentLevel()}.${PlayerSettingsManager.get().getCurrentStage()}`;\n        }\n    }\n}","import { Engine } from \"excalibur\";\n\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 768; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 3;\n    }\n\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n    private disabled: boolean = false;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        this.disabled = true;\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public enableSound() {\n        this.disabled = false;\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.disabled) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.volume = 0.1;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play();\n            }\n        }\n    }\n\n    public backgroundMusicEnd(): void {\n        if(!this.disabled) {\n            if (this.backgroundSound) {\n                this.backgroundSound.stop();\n                this.backgroundSound = null;\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!this.disabled) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import ProgressionManager from \"../engine/progression/progressionManager\";\n\nexport enum Scenes {\n    STORY_GAME_WINDOW = \"storyGameWindow\",\n    GRID_GAME_WINDOW = \"gridGameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}\n\nexport function getGameWindow(): Scenes {\n    return ProgressionManager.get().isProgressionDisabled()\n        ? Scenes.GRID_GAME_WINDOW \n        : Scenes.STORY_GAME_WINDOW;\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(engine: Engine) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(engine.drawWidth / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(engine.drawHeight / tile.height); \n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows*numberOfCols; row++) {\n\n                tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    public getTileMap(): TileMap {\n        return this.tileMap;\n    }\n}","import { Texture, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n\n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nfunction safePointerUp(onClick: Supplier<void>): (event?: any) => void {\n    return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                onClick();\n            }\n    }\n}\n\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture,\n    safePointerUp\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport SoundManager from \"../../engine/soundManager\";\nimport { Resources } from \"../../resources\";\nimport { safePointerUp } from \"../../engine/helpers\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n    private disabled: boolean;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>, disabled?: boolean) {\n        super();\n        this.disabled = disabled ? disabled : false;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    public getSprite():Sprite {\n        return this.sprite;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return safePointerUp(() => {\n            if (!this.disabled) {\n                this.sprite.clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n                onClick();\n            }\n        });\n    }\n\n    private onDown: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.2))\n        }\n\n    }\n\n    private onEnter: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.1))\n        }\n\n    }\n\n    private onExit: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n        }\n    }\n\n    public setDisabled(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/sizingManager';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight()/2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import ButtonBase from \"./buttonBase\";\nimport { Vector, Engine } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport { Supplier } from \"java8script\";\n\nexport class ExitButton extends ButtonBase {\n\n    public constructor(engine: Engine, onExit: Supplier<void>) {\n        const texture = Resources.uiX;\n        super(texture, onExit);\n        this.scale = new Vector(Config.exitButtonSize / texture.width, Config.exitButtonSize / texture.height);\n        this.setHeight(Config.exitButtonSize);\n        this.setWidth(Config.exitButtonSize);\n        this.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n        this.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    }\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport ProgressionManager from \"./progressionManager\";\nimport * as localForage from \"localforage\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\n\ninterface SaveDataV1 {\n    version: number;\n    soundOff: boolean;\n    progressionDisabled: boolean;\n    chosenDifficulty: number; //difficulty level number\n    chosenGridSize: number;\n    maxLevel: number;\n    maxDifficulty: number; //difficulty level number\n    currentLevel: number;\n    currentStage: number;\n}\n\nexport default class PlayerSettingsManager {\n    private static STORE_KEY = 'player_settings_v1';\n    public static singleton: PlayerSettingsManager;\n    private static DEFAULT: PlayerSettingsManager = new PlayerSettingsManager(false, false, Difficulty.VERY_EASY, 3, 3, Difficulty.NORMAL, 1, 1);\n    //Settings\n    private soundOff: boolean;\n    private progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    public readonly maxLevel: number;\n    public readonly maxDifficulty: Difficulty;\n\n    //Progression\n    private currentLevel: number;\n    private currentStage: number;\n\n    private constructor(toggleSound, progressionDisabled, chosenDiff, chosenGridSize, maxLevel, maxDiff, currentLevel, currentStage) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxLevel = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n    }\n\n    public static get(): PlayerSettingsManager {\n        console.log(this.singleton.serializeV1());\n        return this.singleton;\n    }\n\n    public static initialize(): void {\n        localForage.config({\n            name: 'skeletonFlip',\n            version: 1.0,\n            size: 4980736,\n            storeName: 'playerSettings',\n            description: 'Store save data'\n        });//try with no settings\n        localForage.getItem(PlayerSettingsManager.STORE_KEY, (e, v) => {\n            console.log(v);\n            if(e) {\n                console.log(`problem retrieving from store: ${e}`);\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else if (!v) {\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else {\n                const saveData: any = v;\n                if(saveData.version === 1) {\n                    this.singleton = PlayerSettingsManager.deserializeV1(saveData);\n                }\n            }\n        })\n    }\n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n        this.saveToStorage();\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n        this.saveToStorage();\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n        this.saveToStorage();\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n        this.saveToStorage();\n    }\n\n    public isSoundOff(): boolean {\n        return this.soundOff;\n    }\n\n    public setIsSoundOff(isSoundOff: boolean): void {\n        this.soundOff = isSoundOff;\n        this.saveToStorage();\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n\n    public setProgressionDisabled(isProgDisabled: boolean) {\n        this.progressionDisabled = isProgDisabled;\n        this.saveToStorage();\n    }\n\n    public isProgressionDisabled(): boolean {\n        return this.progressionDisabled;\n    }\n\n    private serializeV1(): SaveDataV1 {\n        return {\n            version: 1,\n            soundOff: this.soundOff,\n            progressionDisabled: this.progressionDisabled,\n            chosenDifficulty: this.chosenDifficulty.getDifficultyLevel(),\n            chosenGridSize: this.chosenGridSize,\n            maxLevel: this.maxLevel,\n            maxDifficulty: this.maxDifficulty.getDifficultyLevel(),\n            currentLevel: this.currentLevel,\n            currentStage: this.currentStage,\n        }\n    }\n\n    private static deserializeV1(save: any): PlayerSettingsManager {\n        return new PlayerSettingsManager(\n            save.soundOff,\n            save.progressionDisabled,\n            Difficulty.getByDifficultyLevel(save.chosenDifficulty),\n            save.chosenGridSize,\n            save.maxLevel,\n            Difficulty.getByDifficultyLevel(save.maxDifficulty),\n            save.currentLevel,\n            save.currentStage);\n    }\n\n    private saveToStorage() {\n        localForage.setItem(\n            PlayerSettingsManager.STORE_KEY,\n            this.serializeV1(),\n        );\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinator } from '../../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport SoundManager from '../../engine/soundManager';\nimport BackgroundManager from '../../engine/backgroundManager';\nimport { Actor, Engine, Color, Texture, Vector } from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport ButtonBase from '../../actors/bars/buttonBase';\nimport { Scenes } from '../scenes';\nimport LevelDisplay from '../../actors/bars/level';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\nimport { ExitButton } from '../../actors/bars/exitButton';\n\nexport abstract class GameWindowBase extends ex.Scene {\n\n  protected coordinator: GameCoordinator;\n  protected engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.coordinator = GameCoordinator.initialize(this.engine);\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    this.coordinator.getAllActors()\n      .forEach(c => this.add(c));\n  }\n\n  public onDeactivate() {\n    this.coordinator.getAllActors()\n      .forEach(c => this.remove(c));\n  }\n} \n","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { GameWindowBase } from './gameWindowBase';\nimport ProgressionManager from '../../engine/progression/progressionManager';\n\nexport class GridGameWindow extends GameWindowBase {\n\n  private currentOptionGridSize: number;\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    this.currentOptionGridSize = ProgressionManager.get().getOptionGridSize()\n  }\n\n  //Override\n  public onActivate(): void {\n    const newSize = ProgressionManager.get().getOptionGridSize()\n    if(this.currentOptionGridSize != newSize) {\n      this.currentOptionGridSize = newSize;\n      this.coordinator.resetGame();\n    }\n    super.onActivate();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport SizingManager from \"../../engine/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport SizingManager from \"../engine/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Actor, Scene } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/sizingManager\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine) {\n        this.engine = engine;\n        this.resetGame();\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const coordinator: GameCoordinator = new GameCoordinator(engine);\n        return coordinator;\n    }\n\n    public resetGame(): void {\n        const mm: SizingManager = SizingManager.get();\n        this.healthCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { }, Resources.uiHeart, Config.maxHealth);\n        this.attackCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword);\n        this.gridCoordinator = GridCoordinator.createGrid(this, ProgressionManager.get().getGameGridSize(), this.engine);\n        this.rowCounts = this.createRowCountCards();\n        this.columnCounts = this.createColCountCards();\n    }\n\n    private getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    private getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    private getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    public getAllActors(): Actor[] {\n        return Stream.ofValues<Actor[]>(\n            this.gridCoordinator.getGridAsList(),\n            this.getColCountCards(),\n            this.getRowCountCards(),\n            this.getStatTrackers()\n        ).flatMap(a => Stream.ofValues(...a))\n            .toArray();\n    }\n\n    private updateLabels = () => {\n        console.log(\"doing counts\");\n        this.rowCounts.forEach((count, idx) => {\n            console.log(\"row \" + this.skeletonCountForRow(idx))\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            console.log(\"col \" + this.skeletonCountForCol(idx))\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (this.healthCoordinator.getCurrent() === 0) {\n            this.engine.goToScene(Scenes.GAME_OVER);\n            ProgressionManager.get().resetProgress();\n            this.resetGame();\n        } else if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n            ProgressionManager.get().progress();\n            this.resetGame();\n        }\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\nimport ProgressionManager from \"../../engine/progression/progressionManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return ProgressionManager.get().isProgressionDisabled() ? \"\" :`${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport LevelDisplay from '../../actors/bars/level';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\nimport { GameWindowBase } from './gameWindowBase';\n\nexport class StoryGameWindow extends GameWindowBase {\n\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth / 2, mm.getMenuHeight() - mm.getUIItemSize() / 2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n\n  }\n\n  public onActivate() {\n    super.onActivate();\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n  }\n} \n","\nimport * as React from 'react';\nimport ReactModal = require('react-modal');\nimport { render } from 'react-dom';\nimport { Config } from '../resources';\nimport { TextAlignProperty } from 'csstype';\nconst xButton = require('../images/ui/x.png');\nconst skullImage = require('../images/skull.png');\nconst swordImage = require('../images/sword.png');\nconst potionImage = require('../images/potion.png');\nconst coinImage = require('../images/coin.png');\nconst heartUIImg = require('../images/ui/heart.png');\nconst swordUIImage = require('../images/ui/sword.png');\nconst threeImage = require('../images/numbers/3.png');\n\ninterface Styles {\n    p: {\n        padding: string,\n        margin: string,\n        fontSize: number,\n        flex: number,\n        textAlign: TextAlignProperty,\n    },\n    h1: {\n        textAlign: TextAlignProperty,\n    },\n    holder: {\n        width: string,\n    }\n    imgHolder: {\n        width: string,\n        textAlign: TextAlignProperty,\n    }\n    cardImg: {\n        width: number,\n    }\n}\n\nconst styles: Styles = {\n    p: { padding: \"16px\", margin: \"0px\", fontSize: 20, flex: 1, textAlign: \"center\" },\n    h1: { textAlign: \"center\" },\n    holder: {\n        width: \"100%\"\n    },\n    imgHolder: {\n        width: \"100%\",\n        textAlign: \"center\"\n    },\n    cardImg: {\n        width: 100\n    }\n}\n\nexport class ModalRenderer {\n\n    private isOpen: boolean;\n\n    constructor(isOpen: boolean) {\n        this.isOpen = isOpen;\n    }\n\n    public introModal() {\n        const innerStuff = (<div>\n            <h1 style={styles.h1}>Introduction</h1>\n            <p style={styles.p}>Welcome to Skeleton Flip!</p>\n            <p style={styles.p}>Flip cards, find coins, drink potions and kill skeletons. The goal of the game is to flip all the cards on the board without running out of hearts.</p>\n            <p style={styles.p}>In Story Mode, you progress through increasingly larger and larger grids, you can unlock larger grid sizes and harder difficulties by collecting coins and unlocking upgrades.</p>\n            <p style={styles.p}>If Story Mode is disabled, you may choose to practice any grid size you like.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public howToPlayModal() {\n        const innerStuff = (<div>\n            <h1 style={styles.h1}>How To Play</h1>\n            <p style={styles.p}>The top right of the game screen shows your health (<img width={20} src={heartUIImg} alt=\"heart\" />) and current attack (<img width={20} src={swordUIImage} alt=\"sword\" />). If you run out of health you lose!</p>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={threeImage} alt=\"three\" />\n            </div>\n            <p style={styles.p}>The numbers on the outer edges of the grid indicate how many skeletons are hiding in that row or column.</p>\n            <p style={styles.p}>Tap cards inside the grid to flip them over. Remember you need to flip every card in the grid to advance, so choose your path wisely!</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public cardModal() {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>Cards</h1>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={skullImage} alt=\"skull\" />\n            </div>\n            <p style={styles.p}>Oh no! Flipping over a skeleton card will hurt you, taking away one health unless you have a sword to defend yourself.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={swordImage} alt=\"sword\" />\n            </div>\n            <p style={styles.p}>Sweep Low! Flipping over a sword card will add to your attack count, no need to fear the next skeleton you flip over, the sword will take care of it!</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={potionImage} alt=\"potion\" />\n            </div>\n            <p style={styles.p}>Tastes like Strawberry! Flipping over a potion card will heal any wounds that you have taken from those nasty skeletons.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={coinImage} alt=\"coin\" />\n            </div>\n            <p style={styles.p}>Take that to the bank! Flipping over a coin card will add to your riches, if you complete a level you will keep the coins you found and can use them for upgrades.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public textModal(title: string, text: string) {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>{title}</h1>\n            <p style={styles.p}>\n                {text}\n            </p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    private setOpenAndRerender = (isOpen: boolean, innerStuff?: any) => {\n        this.isOpen = isOpen;\n        this.render({\n            innerStuff: innerStuff,\n            open: this.isOpen,\n            closeFunc: () => this.setOpenAndRerender(false)\n        });\n    }\n\n    private render = (props: Props) => {\n        render(<E {...props} />,\n            document.getElementById('modal')\n        );\n    }\n}\n\ninterface Props {\n    open: boolean;\n    closeFunc: () => void;\n    innerStuff?: any;\n}\n\ninterface State {\n}\n\nexport default class E extends React.Component<Props, State> {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <ReactModal\n                style={{\n                    content: {\n                        borderRadius: \"0px\",\n                        backgroundColor: '#a77600',\n                        borderWidth: 8,\n                        borderColor: \"#402f08\",\n                        padding: \"16px\",\n                    }\n                }}\n                appElement={document.getElementById('modal')}\n                isOpen={this.props.open}>\n                <div style={{ float: \"right\", height: Config.exitButtonSize, position: \"fixed\", right: \"24px\", top: \"24px\" }}>\n                    <a style={{}}>\n                        <img height={Config.exitButtonSize} width={Config.exitButtonSize} src={xButton} alt=\"exit\" onPointerUp={this.props.closeFunc} />\n                    </a>\n                </div>\n                <div style={{ borderRadius: \"16px\", borderStyle: \"solid\", borderWidth: \"4px\", minHeight: \"95%\", backgroundColor: \"#896000\", borderColor: \"#402f08\", display: \"flex\" }}>\n                    {this.props.innerStuff}\n                </div>\n            </ReactModal>\n        );\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Actor, Engine } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { calcDimensionsSingleObjectTexture, IDimensions } from '../engine/helpers';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport { ModalRenderer } from '../modal/modal';\n\nexport class Help extends ex.Scene {\n\n  private engine: Engine;\n  private modalRenderer: ModalRenderer;\n  //private button: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.addTitle();\n    this.modalRenderer = new ModalRenderer(false);\n\n    const centerx = engine.drawWidth / 2;\n    const centery = engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.introMenu, 0.4, 0.5);\n\n\n    this.add(this.createButton(dims, centerx, centery - dims.height*1.5 - Config.gridPadding*1.5, Resources.introMenu , () => this.modalRenderer.introModal()));\n    this.add(this.createButton(dims, centerx, centery - dims.height*0.5 - Config.gridPadding*0.5, Resources.playingMenu, () => this.modalRenderer.howToPlayModal()));\n    this.add(this.createButton(dims, centerx, centery + dims.height*0.5 + Config.gridPadding*0.5, Resources.cardMenu, () => this.modalRenderer.cardModal()));\n    this.add(this.createButton(dims, centerx, centery + dims.height*1.5 + Config.gridPadding*1.5, Resources.creditsMenu, () => this.modalRenderer.textModal(\"Credits\", \"Made by Andrew\")));\n\n  }\n\n  public createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n    const button = new ButtonBase(texture, onClick);\n    button.x = x\n    button.y = y\n    button.scale = dims.scale;\n    button.setHeight(dims.height);\n    button.setWidth(dims.width);\n    return button;\n  }\n\n  public onActivate() {\n    //this.modalRenderer.setOpenAndRerender(true);\n  }\n\n  public onDeactivate() {\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.helpTitle, 0.6, 1);\n    const sprite = Resources.helpTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth / 2;\n    title.y = dims.height / 2 + Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale;\n    this.add(title);\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier, Function, Optional, Consumer } from \"java8script\";\nimport SoundManager from \"../../engine/soundManager\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n    private onToggle: Optional<Consumer<boolean>>\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean, onToggle?: Consumer<boolean>) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n        this.onToggle = Optional.ofNullable(onToggle);\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound)\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.onToggle.ifPresent(func => func(this.checked));\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine, onToggle?: (checked:boolean) => void) {\n        const textSize = size - (size * 0.25)\n        const buttonSize = size + (size * 0.25);\n        \n\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = textSize;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(buttonSize, x+labelWidth*(3/4), y, defaultVal, onToggle);\n        \n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign, Color, Sprite } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/fontManager\";\nimport { Colorize } from \"excalibur/dist/Drawing/SpriteEffects\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButtonSprite:Sprite;\n    private leftButton: ButtonBase;\n    private rightButtonSprite: Sprite;\n    private rightButton: ButtonBase;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number, disabled: boolean) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n\n        const textSize = this.fontSize - (this.fontSize * 0.25)\n        const buttonSize = this.fontSize + (this.fontSize * 0.25);\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = textSize\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        \n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+buttonSize, null, FontManager.get().getMono());\n        this.numberLabel.fontSize = textSize\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        \n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButtonSprite = this.leftButton.getSprite();\n        this.leftButton.x = x - buttonSize*1.5\n        this.leftButton.y = y + buttonSize;\n        this.leftButton.scale = new Vector(buttonSize/Resources.uiLeft.width, buttonSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(buttonSize);\n        this.leftButton.setWidth(buttonSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButtonSprite = this.rightButton.getSprite();\n        this.rightButton.x = x + buttonSize*1.5;\n        this.rightButton.y = y + buttonSize;\n        this.rightButton.scale = new Vector(buttonSize/Resources.uiRight.width, buttonSize/Resources.uiRight.height);\n        this.rightButton.setHeight(buttonSize);\n        this.rightButton.setWidth(buttonSize);\n\n        this.updateDisabled(disabled);\n    }\n\n    public updateDisabled = (isDisabled: boolean) => {\n        this.leftButtonSprite.clearEffects();\n        this.rightButtonSprite.clearEffects();\n        if(isDisabled) {\n            const disColor = Color.Gray;\n            this.topLabel.color = disColor\n            this.numberLabel.color = disColor;\n            this.leftButtonSprite.addEffect(new Colorize(disColor));\n            this.rightButtonSprite.addEffect(new Colorize(disColor));\n            this.leftButton.setDisabled(true);\n            this.rightButton.setDisabled(true);\n        } else {\n            this.topLabel.color = Color.Black;\n            this.numberLabel.color = Color.Black;\n            this.leftButton.setDisabled(false);\n            this.rightButton.setDisabled(false);\n        }\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Label, Color, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { MainMenu } from './mainMenu';\nimport RadioButton from '../actors/bars/radioButton';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SoundManager from '../engine/soundManager';\nimport SizingManager from '../engine/sizingManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport { Consumer } from 'java8script';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport { ExitButton } from '../actors/bars/exitButton';\n\nexport class Options extends ex.Scene {\n\n  private engine;\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n  private progressionToggle: LabeledRadio;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n    const itemSize = SizingManager.get().getUIItemSize();\n\n    const callbackForEnabling = this.addGridSize(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addSoundToggle(itemSize);\n    this.addTitle();\n    this.addProgressionToggle(itemSize, callbackForEnabling)\n\n\n    this.add(new ExitButton(engine, this.onExit));\n  }\n\n  private onExit = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    ProgressionManager.get().setProgressionDisabled(!this.progressionToggle.isChecked());\n    PlayerSettingsManager.get().setIsSoundOff(!this.sound.isChecked())\n    if (this.sound.isChecked()) {\n      SoundManager.get().enableSound();\n    } else {\n      SoundManager.get().disableSound();\n    }\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.optionTitle, 0.6, 1);\n    const sprite = Resources.optionTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth/2;\n    title.y = dims.height/2+ Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale; \n    this.add(title);\n  }\n  \n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 - itemSize*2.5 - Config.optionPadding, !PlayerSettingsManager.get().isSoundOff(), this.engine);\n\n    this.sound.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 - itemSize*0.5 - Config.optionPadding, itemSize, false);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addProgressionToggle(itemSize, toggleCallback: Consumer<boolean>) {\n    this.progressionToggle = new LabeledRadio(\"Story Mode\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 + itemSize*1 + Config.optionPadding, !ProgressionManager.get().isProgressionDisabled(), this.engine, toggleCallback);\n\n    this.progressionToggle.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  //returns callback for toggling the objects\n  private addGridSize(itemSize): Consumer<boolean> {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 + itemSize*3 + Config.optionPadding, itemSize, !ProgressionManager.get().isProgressionDisabled());\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n\n      return this.gridSize.updateDisabled;\n  }\n\n  public onActivate() {\n    //todo pretty sure don't need these\n    //this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize());\n    //this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel());\n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport {calcDimensionsSingleObjectTexture, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1.5)\n    victoryActor.setHeight(engine.drawHeight);// set height/width so you can tap anywhere on the screen\n    victoryActor.setWidth(engine.drawWidth);\n    victoryActor.scale = dims.scale;\n    victoryActor.on('pointerup', safePointerUp(() => {\n      this.engine.goToScene(getGameWindow());\n    }));\n    this.add(victoryActor);\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    const dims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = dims.scale;\n    gameOverActor.on('pointerup', safePointerUp(() => {\n      this.engine.goToScene(Scenes.MAIN_MENU);\n    }));\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      pointerScope: ex.Input.PointerScope.Canvas, //make it so clicks don't go \"through\" the help modals\n      suppressPlayButton: true //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport SoundManager from '../engine/soundManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(getGameWindow()),\n    );\n    this.sizeProperly(this.start, 0.4, 0.5, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => this.game.goToScene(Scenes.OPTIONS),\n    );\n    this.sizeProperly(this.options, 0.4, 0.5, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => this.game.goToScene(Scenes.HELP),\n    );\n    this.sizeProperly(this.help, 0.4, 0.5, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.title.addDrawing(Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicEnd();\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"00f14d085530ea0ae58c17a32b3fe27f.wav\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"21c2960a6ef19bc7b845d01041d556b9.png\";","module.exports = __webpack_public_path__ + \"5bbe8e44117d6281e0990e5a0213c814.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"d848ad40f4eee6a0b29882906e9b4c24.png\";","module.exports = __webpack_public_path__ + \"64c5b08a042975010b476c3ca33efd4d.png\";","module.exports = __webpack_public_path__ + \"d23070e309626133deb93bbabf5d25bb.png\";","module.exports = __webpack_public_path__ + \"5d8c965fd0efaf1fa74941ad5cbb8d3c.png\";","module.exports = __webpack_public_path__ + \"135852ebc677f398779a9ac03e3c396b.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","import { GameWindowBase } from './scenes/gameWindows/gameWindowBase';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/sizingManager';\nimport PlayerSettingsManager from './engine/progression/playerSettingsManager';\nimport { StoryGameWindow } from './scenes/gameWindows/storyGameWindow';\nimport { GridGameWindow } from './scenes/gameWindows/gridGameWindow';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.STORY_GAME_WINDOW, new StoryGameWindow(game));\ngame.add(Scenes.GRID_GAME_WINDOW, new GridGameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, new Options(game));\ngame.add(Scenes.HELP, new Help(game));\n\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  SizingManager.initialize(game);\n  PlayerSettingsManager.initialize();\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}