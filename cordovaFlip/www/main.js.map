{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/progressionManager.ts","webpack:///./src/engine/mobileManager.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/engine/fontManager.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/images/title.png","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/myMono.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/helpMenu.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/gameWindow.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","backgroundTile","Resources","Texture","gameOver","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","t","e","Scenes","GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","ProgressionManager","gridSize","difficulty","disableProgression","this","singleton","baseGridSize","baseDifficulty","getGridSize","getDifficulty","getSkullFactor","getBuffAndSkullByDifficulty","skullFactor","getBuffFactor","buffFactor","progress","nextDifficulty","nextGridSize","setGridSize","newSize","setDifficulty","newDifficulty","resetProgress","getLevelNumber","parseFloat","currentGridSize","createReturn","MobileManager","engine","initialize","console","log","isMobile","drawWidth","getUIItemSize","getMenuHeight","excalibur_1","resources_1","BackgroundManager","tile","numberOfCols","Math","ceil","width","numberOfRows","drawHeight","height","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","__extends","setPrototypeOf","__proto__","Array","constructor","create","SpriteEffects_1","ButtonBase","_super","texture","onClick","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","addDrawing","on","EventTypes","PointerUp","onClickWrapper","event","ev","type","Actor","SoundManager","disabled","soundManager","disableSound","backgroundSound","stop","enableSound","backgroundMusicStart","loop","play","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","maxScale","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","FontManager","generalMono","SpriteFont","getMono","CardType","soundManager_1","progressionManager_1","mobileManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","scenes_1","buttonBase_1","backgroundManager_1","Help","onInitialize","bgManager","addTileMap","exitT","exit","goToScene","add","onActivate","onDeactivate","Scene","RadioButton","size","defaultValue","currentSprite","toggleButton","checked","checkedSprite","uncheckedSprite","isChecked","radioButton_1","fontManager_1","LabeledRadio","label","defaultVal","Label","fontSize","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","labelWidth","getTextWidth","ctx","radio","getDrawables","u","NumberSelector","min","max","current","labelText","topLabel","numberLabel","leftButton","addBy","rightButton","nextCurrent","text","getCurrent","setCurrent","newCurrent","a","numberSelector_1","labeledRadio_1","Options","arguments","itemSize","addGridSize","addDifficultySize","addSoundToggle","forEach","helpers_1","Victory","victoryActor","asSprite","GameOver","gameOverActor","playerIdleAnimation","getAnimationForAll","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","suppressPlayButton","start","loader","Engine","MainMenu","game","sizeProperly","options","help","placeActors","actor","padding","resource","getHeight","LevelDisplay","startingLevel","createLabelText","level","PREFIX","updateLevel","newLevel","card_1","Count","index","initialCount","setCount","leftSide","top","count","java8script_1","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","Stream","of","map","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","filter","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","GameCoordinator","healthCoordinator","attackCoordinator","updateLabels","checkIfCompleteGame","mm","coordinator","gridCoordinator","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","skeletonCountForCol","skeletonCountForRow","allMatch","coordinator_1","level_1","GameWindow","onBackButton","levelDisplay","remove","gameWindow_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","mainMenu","keys","k","addResource"],"mappings":"aACA,SAAAA,EAAAC,GAOA,IANA,IAKAC,EAAAC,EALAC,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAGAM,EAAA,EAAAC,KACQD,EAAAH,EAAAK,OAAoBF,IAC5BJ,EAAAC,EAAAG,GACAG,EAAAP,IACAK,EAAAG,KAAAD,EAAAP,GAAA,IAEAO,EAAAP,GAAA,EAEA,IAAAD,KAAAG,EACAO,OAAAC,UAAAC,eAAAC,KAAAV,EAAAH,KACAc,EAAAd,GAAAG,EAAAH,IAIA,IADAe,KAAAhB,GACAO,EAAAC,QACAD,EAAAU,OAAAV,GAOA,OAHAW,EAAAR,KAAAS,MAAAD,EAAAb,OAGAe,IAEA,SAAAA,IAEA,IADA,IAAAC,EACAf,EAAA,EAAiBA,EAAAY,EAAAV,OAA4BF,IAAA,CAG7C,IAFA,IAAAgB,EAAAJ,EAAAZ,GACAiB,KACAC,EAAA,EAAkBA,EAAAF,EAAAd,OAA2BgB,IAAA,CAC7C,IAAAC,EAAAH,EAAAE,GACA,IAAAf,EAAAgB,KAAAF,MAEAA,IACAL,EAAAQ,OAAApB,IAAA,GACAe,EAAAM,IAAAC,EAAAN,EAAA,KAGA,OAAAD,EAIA,IAAAQ,KAKApB,GACAqB,EAAA,GAGAZ,KAGA,SAAAS,EAAA1B,GAGA,GAAA4B,EAAA5B,GACA,OAAA4B,EAAA5B,GAAA8B,QAGA,IAAAC,EAAAH,EAAA5B,IACAK,EAAAL,EACAgC,KACAF,YAUA,OANAhB,EAAAd,GAAAa,KAAAkB,EAAAD,QAAAC,IAAAD,QAAAJ,GAGAK,EAAAC,KAGAD,EAAAD,QAKAJ,EAAAO,EAAAnB,EAGAY,EAAAQ,EAAAN,EAGAF,EAAAS,EAAA,SAAAL,EAAAM,EAAAC,GACAX,EAAAY,EAAAR,EAAAM,IACA1B,OAAA6B,eAAAT,EAAAM,GACAI,gBACAC,cACAC,IAAAL,KAMAX,EAAAiB,EAAA,SAAAb,GACApB,OAAA6B,eAAAT,EAAA,cAAiDc,YAIjDlB,EAAAmB,EAAA,SAAAd,GACA,IAAAM,EAAAN,KAAAe,WACA,WAA2B,OAAAf,EAAAgB,SAC3B,WAAiC,OAAAhB,GAEjC,OADAL,EAAAS,EAAAE,EAAA,IAAAA,GACAA,GAIAX,EAAAY,EAAA,SAAAU,EAAAC,GAAsD,OAAAvC,OAAAC,UAAAC,eAAAC,KAAAmC,EAAAC,IAGtDvB,EAAAwB,EAAA,GAEA,IAAAC,EAAAC,OAAAC,aAAAD,OAAAC,iBACAC,EAAAH,EAAA1C,KAAA8C,KAAAJ,GACAA,EAAA1C,KAAAX,EACAqD,IAAAK,QACA,QAAAnD,EAAA,EAAgBA,EAAA8C,EAAA5C,OAAuBF,IAAAP,EAAAqD,EAAA9C,IACvC,IAAAU,EAAAuC,EAIArC,EAAAR,MAAA,QAEAU,yFCrIA,IAAAsC,EAAA/B,EAAA,GAEMgC,EAAQhC,EAAQ,KAChBiC,EAAQjC,EAAQ,KAChBkC,EAASlC,EAAQ,KACjBmC,EAAOnC,EAAQ,KACfoC,EAAOpC,EAAQ,KACfqC,EAAYrC,EAAQ,KACpBsC,EAAatC,EAAQ,KACrBuC,EAAWvC,EAAQ,KACnBwC,EAAQxC,EAAQ,IAChByC,EAAczC,EAAQ,KACtB0C,EAAO1C,EAAQ,KACf2C,EAAM3C,EAAQ,KACd4C,EAAM5C,EAAQ,KACd6C,EAAQ7C,EAAQ,KAChB8C,EAAO9C,EAAQ,KACf+C,EAAO/C,EAAQ,KACfgD,EAAMhD,EAAQ,KACdiD,EAAQjD,EAAQ,KAChBkD,EAAQlD,EAAQ,KAChBmD,EAAOnD,EAAQ,KAEfoD,EAAUpD,EAAQ,KAClBqD,EAAUrD,EAAQ,KA4EII,EAAAiD,UA3E5B,IAAMC,EAAUtD,EAAQ,KAClBuD,EAASvD,EAAQ,KACjBwD,EAAUxD,EAAQ,KAClByD,EAAMzD,EAAQ,KACd0D,EAAU1D,EAAQ,KAElB2D,EAAW3D,EAAQ,KAEnB4D,EAAU5D,EAAQ,KAClB6D,EAAY7D,EAAQ,KACpB8D,EAAc9D,EAAQ,KACtB+D,EAAY/D,EAAQ,KACpBgE,EAAahE,EAAQ,KACrBiE,EAAajE,EAAQ,KACrBkE,EAAYlE,EAAQ,KACpBmE,EAAkBnE,EAAQ,KAC1BoE,EAAepE,EAAQ,KAEvBqE,EAAiBrE,EAAQ,KAEzBsE,GACFV,QAAS,IAAI7B,EAAGwC,QAAQX,GACxBY,SAAU,IAAIzC,EAAGwC,QAAQ9B,GACzBD,MAAO,IAAIT,EAAGwC,QAAQ/B,GACtBR,MAAO,IAAID,EAAGwC,QAAQvC,GACtBC,MAAO,IAAIF,EAAGwC,QAAQtC,GACtBC,OAAQ,IAAIH,EAAGwC,QAAQrC,GACvBC,KAAM,IAAIJ,EAAGwC,QAAQpC,GACrBC,KAAM,IAAIL,EAAGwC,QAAQnC,GACrBC,UAAW,IAAIN,EAAGwC,QAAQlC,GAC1BC,WAAY,IAAIP,EAAGwC,QAAQjC,GAC3BC,SAAU,IAAIR,EAAGwC,QAAQhC,GACzB8B,eAAgB,IAAItC,EAAGwC,QAAQF,GAE/BI,EAAG,IAAI1C,EAAGwC,QAAQ7B,GAClBvC,EAAG,IAAI4B,EAAGwC,QAAQ5B,GAClB+B,EAAG,IAAI3C,EAAGwC,QAAQ3B,GAClB+B,EAAG,IAAI5C,EAAGwC,QAAQ1B,GAClB+B,EAAG,IAAI7C,EAAGwC,QAAQzB,GAClB+B,EAAG,IAAI9C,EAAGwC,QAAQxB,GAClB+B,EAAG,IAAI/C,EAAGwC,QAAQvB,GAClB+B,EAAG,IAAIhD,EAAGwC,QAAQtB,GAClB+B,EAAG,IAAIjD,EAAGwC,QAAQrB,GAClB+B,EAAG,IAAIlD,EAAGwC,QAAQpB,GAElBC,QAAS,IAAIrB,EAAGwC,QAAQnB,GACxBC,QAAS,IAAItB,EAAGwC,QAAQlB,GACxBE,OAAQ,IAAIxB,EAAGwC,QAAQhB,GACvBC,QAAS,IAAIzB,EAAGwC,QAAQf,GACxBC,IAAK,IAAI1B,EAAGwC,QAAQd,GACpBC,QAAS,IAAI3B,EAAGwC,QAAQb,GACxBJ,QAAS,IAAIvB,EAAGwC,QAAQjB,GAExB4B,OAAQ,IAAInD,EAAGwC,QAAQZ,GAEvBE,UAAW,IAAI9B,EAAGoD,MAAMtB,GACxBE,UAAW,IAAIhC,EAAGoD,MAAMpB,GACxBG,UAAW,IAAInC,EAAGoD,MAAMjB,GACxBD,WAAY,IAAIlC,EAAGoD,MAAMlB,GACzBH,YAAa,IAAI/B,EAAGoD,MAAMrB,GAC1BE,WAAY,IAAIjC,EAAGoD,MAAMnB,GACzBI,aAAc,IAAIrC,EAAGoD,MAAMf,GAC3BD,gBAAiB,IAAIpC,EAAGoD,MAAMhB,IAazB/D,EAAAkE,YAAWlE,EAAAgF,QAThBC,UAAW,EACXC,UAAW,EACXC,YAAa,EACbC,gBAAiB,UACjBC,eAAgB,GAChBC,UAAW,GACXC,cAAe,mBAAAC,EAAAC,EAAA1E,GAAA,aAAAnC,OAAA6B,eAAAgF,EAAA,cAAA3E,OAAA,ICjGnB,SAAY4E,GACRA,EAAAC,YAAA,aACAD,EAAAE,UAAA,WACAF,EAAAG,UAAA,WACAH,EAAAI,QAAA,UACAJ,EAAAK,QAAA,UACAL,EAAAM,KAAA,OANJ,CAAYhG,EAAA0F,SAAA1F,EAAA0F,2FCOZ,IAAAO,EAAA,WAUI,SAAAA,EAAoBC,EAAUC,EAAYC,GACtCC,KAAKH,SAAWA,EAChBG,KAAKF,WAAaA,EAClBE,KAAKD,mBAAqBA,EAyGlC,OAtGkBH,EAAArF,IAAd,WACI,OAAIyF,KAAKC,UACED,KAAKC,WAEZD,KAAKC,UAAY,IAAIL,EACjBA,EAAmBM,aACnBN,EAAmBO,mBAGhBH,KAAKC,YAIbL,EAAApH,UAAA4H,YAAP,WACI,OAAOJ,KAAKH,UAGTD,EAAApH,UAAA6H,cAAP,WACI,OAAOL,KAAKF,YAGTF,EAAApH,UAAA8H,eAAP,WACI,OAAOV,EAAmBW,4BAA4BP,KAAKF,YAAYU,aAGpEZ,EAAApH,UAAAiI,cAAP,WACI,OAAOb,EAAmBW,4BAA4BP,KAAKF,YAAYY,YAGpEd,EAAApH,UAAAmI,SAAP,WACSX,KAAKD,qBACiB,IAApBC,KAAKF,YACJE,KAAKF,WAAaE,KAAKY,eAAeZ,KAAKF,WAAYE,KAAKH,UAC5DG,KAAKH,SAAWG,KAAKa,aAAab,KAAKH,YAE1BG,KAAKY,eAAeZ,KAAKF,WAAYE,KAAKH,UACvDG,KAAKF,WAAaE,KAAKY,eAAeZ,KAAKF,WAAYE,KAAKH,aAKjED,EAAApH,UAAAsI,YAAP,SAAmBC,GACff,KAAKH,SAAWkB,GAGbnB,EAAApH,UAAAwI,cAAP,SAAqBC,GACjBjB,KAAKF,WAAamB,GAGfrB,EAAApH,UAAA0I,cAAP,WACSlB,KAAKD,qBACNC,KAAKF,WAAaF,EAAmBO,eACrCH,KAAKH,SAAWD,EAAmBM,eAIpCN,EAAApH,UAAA2I,eAAP,WACI,OAAOC,WAAcpB,KAAKI,cAAa,IAAIJ,KAAKK,kBAG5CT,EAAApH,UAAAqI,aAAR,SAAqBhB,GAClB,OAAoB,IAAbA,EACJ,EACDA,EAAS,GAKND,EAAApH,UAAAoI,eAAR,SAAuBd,EAAoBuB,GACvC,GAAuB,IAApBA,GAAwC,IAAfvB,EAGxB,OAAmB,IAAfA,GAAmC,IAAfA,EACbA,EAAa,EACE,IAAfA,EACA,EAEAA,EAAa,GAKjBF,EAAAW,4BAAf,SAA2CT,GAGvC,IAAMwB,EAAe,SAACd,EAAaE,GAC/B,OAASF,YAAWA,EAAEE,WAAUA,IAEpC,OAAQZ,GACJ,KAAK,EACD,OAAOwB,EAAa,EAAK,GAC7B,KAAK,EACD,OAAOA,EAAa,IAAK,GAC7B,KAAK,EACD,OAAOA,EAAa,IAAK,GAC7B,KAAK,EACD,OAAOA,EAAa,EAAK,GAC7B,KAAK,EACD,OAAOA,EAAa,EAAK,KAhHtB1B,EAAAM,aAAuB,EACvBN,EAAAO,eAAyB,EAmH5CP,EAtHA,GAAAR,EAAAxE,QAAqBgF,iFCFrB,IAAA2B,EAAA,WAII,SAAAA,EAAoBC,GAChBxB,KAAKwB,OAASA,EA8BtB,OA3BkBD,EAAAE,WAAd,SAAyBD,GACjBxB,KAAKC,UAGLyB,QAAQC,IAAI,sCAFZ3B,KAAKC,UAAY,IAAIsB,EAAcC,IAM7BD,EAAAhH,IAAd,WACI,GAAGyF,KAAKC,UACJ,OAAOD,KAAKC,UAEZ,KAAM,kCAIPsB,EAAA/I,UAAAoJ,SAAP,WACI,OAAO5B,KAAKwB,OAAOK,UAAY,KAE5BN,EAAA/I,UAAAsJ,cAAP,WACI,OAAO9B,KAAK4B,WAAa,GAAK,IAG3BL,EAAA/I,UAAAuJ,cAAP,WACI,OAA8B,EAAvB/B,KAAK8B,iBAGpBP,EAnCA,GAAAnC,EAAAxE,QAAA1C,GAAA,YAAAiH,EAAAC,EAAA1E,GAAA,aAAAnC,OAAA6B,eAAAgF,EAAA,cAAA3E,OAAA,ICLA,IAAAuH,EAAAzI,EAAA,GACA0I,EAAA1I,EAAA,GAEA2I,EAAA,WAII,SAAAA,EAAYV,GACR,IAAMW,EAAOF,EAAApE,UAAUD,eACjBwE,EAAeC,KAAKC,KAAKd,EAAOK,UAAYM,EAAKI,OACjDC,EAAeH,KAAKC,KAAKd,EAAOiB,WAAaN,EAAKO,QAGlDC,EAAU,IAAIX,EAAAY,QAAQ,EAAG,EAAGT,EAAKI,MAAOJ,EAAKO,OAAQF,EAAcJ,GACzEO,EAAQE,oBAHQ,aAGqB,IAAIb,EAAAc,YAAYX,EAAM,EAAG,EAAGA,EAAKI,MAAOJ,EAAKO,SAElF,IADA,IAAMK,EAAa,IAAIf,EAAAgB,WAJP,aAI2B,GAClCC,EAAM,EAAGA,EAAMT,EAAaJ,EAAca,IAE3CN,EAAQO,eAAeD,GAAKE,WAAWJ,GAE/C/C,KAAK2C,QAAUA,EAMvB,OAHWT,EAAA1J,UAAA4K,WAAP,WACI,OAAOpD,KAAK2C,SAEpBT,EAvBA,GAAA9C,EAAAxE,QAAAT,GAAA,WAAAgF,EAAAC,EAAA1E,GAAA,iBAAAxC,EAAAsC,EAAAwF,WAAAqD,YAAAnL,EAAAK,OAAA+K,iBAAAC,wBAAAC,OAAA,SAAArE,EAAAC,GAAAD,EAAAoE,UAAAnE,IAAA,SAAAD,EAAAC,GAAA,QAAA1E,KAAA0E,IAAA3G,eAAAiC,KAAAyE,EAAAzE,GAAA0E,EAAA1E,KAAA,SAAAyE,EAAAC,GAAA,SAAA1E,IAAAsF,KAAAyD,YAAAtE,EAAAjH,EAAAiH,EAAAC,GAAAD,EAAA3G,UAAA,OAAA4G,EAAA7G,OAAAmL,OAAAtE,IAAA1E,EAAAlC,UAAA4G,EAAA5G,UAAA,IAAAkC,KAAAnC,OAAA6B,eAAAgF,EAAA,cAAA3E,OAAA,ICHA,IAAAuH,EAAAzI,EAAA,GAEAoK,EAAApK,EAAA,IAEAqK,EAAA,SAAAC,GAII,SAAAD,EAAmBE,EAAqBC,GAAxC,IAAAC,EACIH,EAAAnL,KAAAsH,OAAOA,YAoBHgE,EAAAC,OAAqB,WACzBD,EAAKE,OAAOC,eACZH,EAAKE,OAAOE,UAAU,IAAIT,EAAAU,OAAO,MAG7BL,EAAAM,QAAsB,WAC1BN,EAAKE,OAAOC,eACZH,EAAKE,OAAOE,UAAU,IAAIT,EAAAU,OAAO,MAG7BL,EAAAO,OAAqB,WACzBP,EAAKE,OAAOC,gBA9BZH,EAAKE,OAAS,IAAIlC,EAAAwC,OAAOV,EAAS,EAAG,EAAGA,EAAQvB,MAAOuB,EAAQpB,QAC/DsB,EAAKS,WAAWT,EAAKE,QACrBF,EAAKU,GAAG,cAAeV,EAAKC,QAC5BD,EAAKU,GAAG1C,EAAA2C,WAAWC,UAAWZ,EAAKa,eAAed,IAClDC,EAAKU,GAAG,eAAgBV,EAAKM,SAC7BN,EAAKU,GAAG,eAAgBV,EAAKO,UA4BrC,OAvCwClB,EAAAO,EAAAC,GAc5BD,EAAApL,UAAAqM,eAAR,SAAuBd,GAAvB,IAAAC,EAAAhE,KACI,OAAO,SAAC8E,GACiB,cAAlBA,EAAMC,GAAGC,OAERhB,EAAKE,OAAOC,eACZJ,OAoBhBH,EAvCA,CAAwC5B,EAAAiD,kGCHxC,IAAAhD,EAAA1I,EAAA,GAEA2L,EAAA,oBAAAA,IAIYlF,KAAAmF,YAyDZ,OApDkBD,EAAA3K,IAAd,WACI,OAAI2K,EAAaE,aACNF,EAAaE,cAEpBF,EAAaE,aAAe,IAAIF,EACzBA,EAAaE,eAIrBF,EAAA1M,UAAA6M,aAAP,WACIrF,KAAKmF,YACDnF,KAAKsF,kBACLtF,KAAKsF,gBAAgBC,OACrBvF,KAAKsF,gBAAkB,OAIxBJ,EAAA1M,UAAAgN,YAAP,WACIxF,KAAKmF,aAGFD,EAAA1M,UAAAiN,qBAAP,WACSzF,KAAKmF,UACDnF,KAAKsF,kBACNtF,KAAKsF,gBAAkBrD,EAAApE,UAAUH,gBACjCsC,KAAKsF,gBAAgBI,QACrB1F,KAAKsF,gBAAgBK,KAAK,MAO/BT,EAAA1M,UAAAoN,mBAAP,SAA0BC,EAAcC,GAChC9F,KAAK+F,cAAgB/F,KAAK+F,aAAaC,cACvChG,KAAK+F,aAAaE,QAClBjG,KAAK+F,aAAe,MAExB/F,KAAKkG,mBAAmBL,EAAOC,IAG3BZ,EAAA1M,UAAA0N,mBAAR,SAA2BL,EAAcC,GAChC9F,KAAKmF,WACNnF,KAAK+F,aAAeF,EAChBC,EACAD,EAAMF,OAAOQ,KAAKL,GAElBD,EAAMF,SAKtBT,EA7DA,GAAA9F,EAAAxE,QAAAJ,GAAA,yBAAA2E,EAAAC,EAAA1E,GAAA,aAAAnC,OAAA6B,eAAAgF,EAAA,cAAA3E,OAAA,ICHA,IAAAuH,EAAAzI,EAAA,GAaA,SAAA6M,EAAoCC,EAAsBC,EAAqBC,EAAoBC,EAAmBC,EAAyBC,GAE3I,IAAMC,EAAeF,GAAkC,EACjDG,EAAYP,EAAeM,EAC3BE,EAAWP,EAAcK,EACzBG,EAAeD,EAAWL,EAEhC,GAAKM,EAAeP,EAAcF,EAAc,CAE5C,IACMU,EADAC,EAAgBJ,EAAYL,EAElC,OACIhE,MAAOiE,GAFLO,EAAaL,EAAWM,EAAgBN,EAAWM,GAGrDtE,OAAQkE,EACRK,MAAO,IAAIjF,EAAAkF,OAAOH,EAAYA,IAIlC,OACIxE,MAAOsE,EACPnE,OAAQ6D,GAHNQ,EAAaL,EAAWI,EAAeJ,EAAWI,GAIpDG,MAAO,IAAIjF,EAAAkF,OAAOH,EAAYA,IAQtCpN,EAAAwN,kCAjCJ,SAA2Cd,EAAsBC,EAAqBxC,EAAkB2C,EAAyBC,GAC7H,OAAON,EAA2BC,EAAcC,EAAaxC,EAAQpB,OAAQoB,EAAQvB,MAAOkE,EAAgBC,IA+B5G/M,EAAAyM,4GCzCJ,IAAApE,EAAAzI,EAAA,GACA0I,EAAA1I,EAAA,GAEA6N,EAAA,WAMI,SAAAA,IACIpH,KAAKqH,YAAc,IAAIrF,EAAAsF,WAAWrF,EAAApE,UAAUY,OAAQ,6CAAiD,GAAI,EAAG,GAAI,KAexH,OAZkB2I,EAAA7M,IAAd,WACI,OAAGyF,KAAKC,UACGD,KAAKC,UAEL,IAAImH,GAIZA,EAAA5O,UAAA+O,QAAP,WACI,OAAOvH,KAAKqH,aAGpBD,EAtBA,GAAAhI,EAAAxE,QAAAT,GAAA,SAAAgF,EAAAC,EAAA1E,GAAA,iBAAAxC,EAAAsC,EAAAwF,WAAAqD,YAAAnL,EAAAK,OAAA+K,iBAAAC,wBAAAC,OAAA,SAAArE,EAAAC,GAAAD,EAAAoE,UAAAnE,IAAA,SAAAD,EAAAC,GAAA,QAAA1E,KAAA0E,IAAA3G,eAAAiC,KAAAyE,EAAAzE,GAAA0E,EAAA1E,KAAA,SAAAyE,EAAAC,GAAA,SAAA1E,IAAAsF,KAAAyD,YAAAtE,EAAAjH,EAAAiH,EAAAC,GAAAD,EAAA3G,UAAA,OAAA4G,EAAA7G,OAAAmL,OAAAtE,IAAA1E,EAAAlC,UAAA4G,EAAA5G,UAAA,IAAAkC,KAAAnC,OAAA6B,eAAAgF,EAAA,cAAA3E,OAAA,ICHA,IAUY+M,EAVZlM,EAAA/B,EAAA,GACA0I,EAAA1I,EAAA,GAEAyI,EAAAzI,EAAA,GACAoK,EAAApK,EAAA,IACAkO,EAAAlO,EAAA,IACAmO,EAAAnO,EAAA,IAEAoO,EAAApO,EAAA,KAEA,SAAYiO,GACRA,EAAAI,KAAA,OACAJ,EAAAK,SAAA,WACAL,EAAAM,OAAA,SACAN,EAAAO,OAAA,SAJJ,CAAYP,EAAA7N,EAAA6N,WAAA7N,EAAA6N,cAWZ,IAAAQ,EAAA,SAAAnE,GAUI,SAAAmE,EAAmBC,EAAyBC,EAAajF,EAAac,EAAyBoE,EAAqBnD,EAAgBlB,GAApI,IAAAE,EACIH,EAAAnL,KAAAsH,OAAOA,KAoBHgE,EAAAM,QAAsB,WAC1BN,EAAKoE,WAAWjE,eAChBH,EAAKoE,WAAWhE,UAAU,IAAIT,EAAAU,OAAO,MAGjCL,EAAAO,OAAqB,WACzBP,EAAKoE,WAAWjE,gBA2EZH,EAAAqE,UAAwB,WAC5B,IAAIxC,EACA7B,EAAKsE,WAAad,EAASK,SAC3BhC,EAAQ5D,EAAApE,UAAUP,UACX0G,EAAKsE,WAAad,EAASO,OAClClC,EAAQ5D,EAAApE,UAAUN,WACXyG,EAAKsE,WAAad,EAASI,KAClC/B,EAAQ5D,EAAApE,UAAUJ,UACXuG,EAAKsE,WAAad,EAASM,SAClCjC,EAAQ5D,EAAApE,UAAUR,aAEtBoK,EAAA7M,QAAaL,MAAMqL,mBAAmBC,IA/GtC7B,EAAKsE,SAAWtD,EAChBhB,EAAKuE,gBAAkBxE,EACvBC,EAAKf,IAAMA,EACXe,EAAKkE,IAAMA,EACXlE,EAAKwE,WACLxE,EAAKF,QAAUA,EACf,IAAM2E,EAAoBT,EAAKU,mBAAoC,EAAjBT,EAAaU,EAAwB,EAAjBV,EAAaW,UACnF5E,EAAKoE,WAAaJ,EAAK9D,OAAOjC,EAAApE,UAAUlC,KAAM8M,EAAKxB,OACnDjD,EAAKS,WAAW,OAAQT,EAAKoE,YAC7BpE,EAAKS,WAAW,OAAQuD,EAAK9D,OAAOF,EAAKF,QAAS2E,EAAKxB,QACvDjD,EAAK6E,SAASJ,EAAKlG,OACnByB,EAAK8E,UAAUL,EAAK/F,QACpBsB,EAAKU,GAAG,YAAaV,EAAK+E,aAC1B/E,EAAKU,GAAG,eAAgBV,EAAKM,SAC7BN,EAAKU,GAAG,eAAgBV,EAAKO,QAC7BP,EAAK4E,EAAIZ,EAAKgB,MAAMd,EAAKO,EAAKlG,MAAO0F,GAAgBQ,EAAKlG,MAC1DyB,EAAK2E,EAAIX,EAAKiB,MAAMR,EAAK/F,OAAQO,EAAKgF,GAAgBQ,EAAK/F,SA6HnE,OAzJ0BW,EAAA2E,EAAAnE,GAwCPmE,EAAAgB,MAAf,SAAqBd,EAAagB,EAAmBC,GAKjD,OAJiBA,EAAOP,EAChBlB,EAAA9M,QAAmBL,MAAM6F,cAAgB,EAAK8I,GAC9CxB,EAAA9M,QAAmBL,MAAM6F,cAAgB,GAAK6B,EAAAtD,OAAOG,YAAe,EAEzDoK,EAAYhB,EAAQjG,EAAAtD,OAAOG,YAAcoJ,GAGjDF,EAAAiB,MAAf,SAAqBG,EAAoBnG,EAAakG,GAMlD,OALYA,EAAOR,EACZhB,EAAA/M,QAAcL,MAAMwH,gBAAgB,EACnC2F,EAAA9M,QAAmBL,MAAM6F,cAAgB,EAAKgJ,GAC9C1B,EAAA9M,QAAmBL,MAAM6F,cAAgB,GAAK6B,EAAAtD,OAAOG,YAAe,EAE9DsK,EAAanG,EAAQhB,EAAAtD,OAAOG,YAAcmE,GAG9C+E,EAAAU,mBAAd,SAAiCrC,EAAsBC,GAC7C,IAAA+C,EAAApH,EAAApE,UAAAlC,KAAE+G,EAAA2G,EAAA3G,OAAQH,EAAA8G,EAAA9G,MACV+G,EAAejD,EAAesB,EAAA/M,QAAcL,MAAMwH,gBAClD6E,EAAYoB,EAAKuB,kBAAkBD,GACnCzC,EAAWmB,EAAKwB,iBAAiBlD,GACjCQ,EAAeD,EAAWtE,EAEhC,GAAKuE,GAAgBpE,GAAUgF,EAAA9M,QAAmBL,MAAM6F,cAAgB,IAAOkJ,EAAc,CAEzF,IAAMtC,EAAgBJ,EAAYlE,EAClC,OACIH,MAAOA,EAAQyE,EACftE,OAAQkE,EACRK,MAAO,IAAIjF,EAAAkF,OAAOF,EAAeA,IAGrC,OACIzE,MAAOsE,EACPnE,OAAQA,EAASoE,EACjBG,MAAO,IAAIjF,EAAAkF,OAAOJ,EAAcA,KAK7BkB,EAAAuB,kBAAf,SAAiClD,GAE7B,MAD4C,IAAfA,GACGqB,EAAA9M,QAAmBL,MAAM6F,cAAgB,GAAM6B,EAAAtD,OAAOG,aAG3EkJ,EAAAwB,iBAAf,SAAgClD,GAE5B,MADoC,IAAdA,GACGoB,EAAA9M,QAAmBL,MAAM6F,cAAgB,GAAM6B,EAAAtD,OAAOG,aAGpEkJ,EAAA9D,OAAf,SAAsBJ,EAAqBmD,GACvC,IAAM/C,EAAoB,IAAIlC,EAAAwC,OAAOV,EAAS,EAAG,EAAGA,EAAQvB,MAAOuB,EAAQpB,QAE3E,OADAwB,EAAO+C,MAAQA,EACR/C,GAGH8D,EAAAxP,UAAAuQ,YAAR,WACS/I,KAAKwI,UACNxI,KAAKwI,WACLxI,KAAKyJ,WAAW,QAChBhC,EAAA7M,QAAaL,MAAMqL,mBACf3D,EAAApE,UAAUT,UACV4C,KAAKqI,WAETrI,KAAKuI,oBAGNP,EAAAxP,UAAAwM,KAAP,WACI,OAAOhF,KAAKsI,UAiBTN,EAAAxP,UAAAkR,OAAP,WACI,OAAO1J,KAAKiD,KAGT+E,EAAAxP,UAAAmR,OAAP,WACI,OAAO3J,KAAKkI,KAGTF,EAAAxP,UAAAoR,UAAP,WACI,OAAO5J,KAAKwI,SAGFR,EAAA6B,SAAd,SAAuB5B,EAAyBhF,EAAaiF,EAAanE,GACtE,OAAO,IAAIiE,EAAKC,EAAcC,EAAKjF,EAAKc,EAASzI,EAAGwO,MAAMC,MAAOvC,EAASK,SAAU5F,EAAApE,UAAUrC,QAGpFwM,EAAAvM,OAAd,SAAqBwM,EAAyBhF,EAAaiF,EAAanE,GACpE,OAAO,IAAIiE,EAAKC,EAAcC,EAAKjF,EAAKc,EAASzI,EAAGwO,MAAME,IAAKxC,EAASM,OAAQ7F,EAAApE,UAAUpC,SAGhFuM,EAAAiC,OAAd,SAAqBhC,EAAyBhF,EAAaiF,EAAanE,GACpE,OAAO,IAAIiE,EAAKC,EAAcC,EAAKjF,EAAKc,EAASzI,EAAGwO,MAAMI,KAAM1C,EAASO,OAAQ9F,EAAApE,UAAUtC,QAGjFyM,EAAAtM,KAAd,SAAmBuM,EAAyBhF,EAAaiF,EAAanE,GAClE,OAAO,IAAIiE,EAAKC,EAAcC,EAAKjF,EAAKc,EAASzI,EAAGwO,MAAMK,OAAQ3C,EAASI,KAAM3F,EAAApE,UAAUnC,OAEnGsM,EAzJA,CAA0B1M,EAAG2J,OAAhBtL,EAAAqO,qCCrBbpO,EAAAD,QAAAJ,EAAAwB,EAAA,wFAAAoE,EAAAC,EAAA1E,GAAA,iBAAAxC,EAAAsC,EAAAwF,WAAAqD,YAAAnL,EAAAK,OAAA+K,iBAAAC,wBAAAC,OAAA,SAAArE,EAAAC,GAAAD,EAAAoE,UAAAnE,IAAA,SAAAD,EAAAC,GAAA,QAAA1E,KAAA0E,IAAA3G,eAAAiC,KAAAyE,EAAAzE,GAAA0E,EAAA1E,KAAA,SAAAyE,EAAAC,GAAA,SAAA1E,IAAAsF,KAAAyD,YAAAtE,EAAAjH,EAAAiH,EAAAC,GAAAD,EAAA3G,UAAA,OAAA4G,EAAA7G,OAAAmL,OAAAtE,IAAA1E,EAAAlC,UAAA4G,EAAA5G,UAAA,IAAAkC,KAAAnC,OAAA6B,eAAAgF,EAAA,cAAA3E,OAAA,ICAA,IAAAa,EAAA/B,EAAA,GACA0I,EAAA1I,EAAA,GACA6Q,EAAA7Q,EAAA,IACAyI,EAAAzI,EAAA,GACA8Q,EAAA9Q,EAAA,IACA+Q,EAAA/Q,EAAA,IAEAgR,EAAA,SAAA1G,GAAA,SAAA0G,mDA4BA,OA5B0BlH,EAAAkH,EAAA1G,GAIjB0G,EAAA/R,UAAAgS,aAAP,SAAoBhJ,GAClBxB,KAAKwB,OAASA,EAEd,IAAMiJ,EAAY,IAAIH,EAAA1P,QAAkB4G,GACxCxB,KAAK0K,WAAWD,EAAUrH,cAE1B,IAAMuH,EAAiB1I,EAAApE,UAAUb,IAC3B4N,EAAO,IAAIP,EAAAzP,QACf+P,EACA,WAAM,OAAAnJ,EAAOqJ,UAAUT,EAAA/K,OAAOE,aAEhCqL,EAAK3D,MAAQ,IAAIjF,EAAAkF,OAAOjF,EAAAtD,OAAOK,eAAiB2L,EAAMpI,MAAON,EAAAtD,OAAOK,eAAiB2L,EAAMjI,QAC3FkI,EAAK9B,UAAU7G,EAAAtD,OAAOK,gBACtB4L,EAAK/B,SAAS5G,EAAAtD,OAAOK,gBACrB4L,EAAKhC,EAAIpH,EAAOK,UAAYI,EAAAtD,OAAOK,eAAiB,EAAIiD,EAAAtD,OAAOG,YAC/D8L,EAAKjC,EAAI1G,EAAAtD,OAAOK,eAAiB,EAAIiD,EAAAtD,OAAOG,YAC5CkB,KAAK8K,IAAIF,IAGJL,EAAA/R,UAAAuS,WAAP,aAGOR,EAAA/R,UAAAwS,aAAP,aAEFT,EA5BA,CAA0BjP,EAAG2P,OAAhBtR,EAAA4Q,wYCPb,IAAAvI,EAAAzI,EAAA,GACA0I,EAAA1I,EAAA,GACAoK,EAAApK,EAAA,IAGA2R,EAAA,SAAArH,GAKI,SAAAqH,EAAYC,EAAcvC,EAAWD,EAAWyC,GAAhD,IAAApH,EACIH,EAAAnL,KAAAsH,OAAOA,YA4CHgE,EAAAC,OAAqB,WACzBD,EAAKqH,gBAAgBlH,eACrBH,EAAKqH,gBAAgBjH,UAAU,IAAIT,EAAAU,OAAO,MAGtCL,EAAAM,QAAsB,WAC1BN,EAAKqH,gBAAgBlH,eACrBH,EAAKqH,gBAAgBjH,UAAU,IAAIT,EAAAU,OAAO,MAGtCL,EAAAO,OAAqB,WACzBP,EAAKqH,gBAAgBlH,gBAIjBH,EAAAsH,aAAe,WACnBtH,EAAKuH,SAAWvH,EAAKuH,QACjBvH,EAAKuH,QACLvH,EAAKyF,WAAW,WAEhBzF,EAAKyF,WAAW,cA/DpBzF,EAAKuH,QAAUH,EACfpH,EAAKwH,cAAgB,IAAIxJ,EAAAwC,OAAOvC,EAAApE,UAAUb,IAAK,EAAG,EAAGiF,EAAApE,UAAUb,IAAIuF,MAAON,EAAApE,UAAUb,IAAI0F,QACxFsB,EAAKyH,gBAAkB,IAAIzJ,EAAAwC,OAAOvC,EAAApE,UAAUZ,QAAS,EAAG,EAAGgF,EAAApE,UAAUZ,QAAQsF,MAAON,EAAApE,UAAUZ,QAAQyF,QACtGsB,EAAKiD,MAAQ,IAAIjF,EAAAkF,OAAOiE,EAAOlJ,EAAApE,UAAUb,IAAIuF,MAAO4I,EAAOlJ,EAAApE,UAAUb,IAAI0F,QACzEsB,EAAK8E,UAAUqC,GACfnH,EAAK6E,SAASsC,GACdnH,EAAK4E,EAAIA,EACT5E,EAAK2E,EAAIA,EAGT3E,EAAKS,WAAW,UAAWT,EAAKwH,eAChCxH,EAAKS,WAAW,YAAaT,EAAKyH,iBAC9BzH,EAAKuH,QACLvH,EAAKyF,WAAW,WAEhBzF,EAAKyF,WAAW,aAEpBzF,EAAKU,GAAG,cAAeV,EAAKC,QAC5BD,EAAKU,GAAG,eAAgBV,EAAKM,SAC7BN,EAAKU,GAAG,eAAgBV,EAAKO,QAC7BP,EAAKU,GAAG,YAAaV,EAAKa,eAAeb,EAAKsH,iBA+CtD,OA1EyCjI,EAAA6H,EAAArH,GA8B9BqH,EAAA1S,UAAAkT,UAAP,WACI,OAAO1L,KAAKuL,SAGRL,EAAA1S,UAAAqM,eAAR,SAAuBd,GAAvB,IAAAC,EAAAhE,KACI,OAAO,SAAC8E,GACkB,cAAlBA,EAAMC,GAAGC,OAEThB,EAAKqH,gBAAgBlH,eACrBJ,IACAC,EAAKM,aAMT4G,EAAA1S,UAAA6S,cAAR,WACI,OAAOrL,KAAKuL,QAAUvL,KAAKwL,cAAgBxL,KAAKyL,iBA2BxDP,EA1EA,CAAyClJ,EAAAiD,kGCLzC,IAAA0G,EAAApS,EAAA,IACAyI,EAAAzI,EAAA,GAEAqS,EAAArS,EAAA,IAEAsS,EAAA,WAKI,SAAAA,EAAYC,EAAeX,EAAcvC,EAAWD,EAAWoD,EAAqBvK,GAChFxB,KAAK8L,MAAQ,IAAI9J,EAAAgK,MAAMF,EAAOlD,EAAGD,EAAG,KAAMiD,EAAAhR,QAAYL,MAAMgN,WAC5DvH,KAAK8L,MAAMG,SAAWd,EACtBnL,KAAK8L,MAAMI,UAAYlK,EAAAmK,UAAUC,OACjCpM,KAAK8L,MAAMO,UAAYrK,EAAAsK,UAAUC,OACjC,IAAMC,EAAaxM,KAAK8L,MAAMW,aAAajL,EAAOkL,KAClDhL,QAAQC,IAAI,cAAc6K,GAC1BxM,KAAK8L,MAAMlD,EAAIA,EAAI4D,EAAW,EAE9BxM,KAAK2M,MAAQ,IAAIhB,EAAA/Q,QAAYuQ,EAAMvC,EAAE4D,GAAY,EAAE,GAAI7D,EAAGoD,GAclE,OAVWF,EAAArT,UAAAkT,UAAP,WACI,OAAO1L,KAAK2M,MAAMjB,aAGfG,EAAArT,UAAAoU,aAAP,WACI,OACI5M,KAAK2M,MACL3M,KAAK8L,QAGjBD,EA5BA,GAAAzM,EAAAxE,QAAAiS,GAAA,SAAA1N,EAAAC,EAAA1E,GAAA,aAAAnC,OAAA6B,eAAAgF,EAAA,cAAA3E,OAAA,ICLA,IAAAuH,EAAAzI,EAAA,GACA0I,EAAA1I,EAAA,GACA8Q,EAAA9Q,EAAA,IACAqS,EAAArS,EAAA,IAEAuT,EAAA,WAYI,SAAAA,EAAmBhB,EAAeiB,EAAaC,EAAaC,EAAiBrE,EAAWD,EAAWsD,GAAnG,IAAAjI,EAAAhE,KACIA,KAAKkN,UAAYpB,EACjB9L,KAAK+M,IAAMA,EACX/M,KAAKgN,IAAMA,EACXhN,KAAKiN,QAAUA,EACfjN,KAAKiM,SAAWA,EAGhBjM,KAAKmN,SAAW,IAAInL,EAAAgK,MAAMhM,KAAKkN,UAAWtE,EAAGD,EAAE1G,EAAAtD,OAAOG,YAAa,KAAM8M,EAAAhR,QAAYL,MAAMgN,WAC3FvH,KAAKmN,SAASlB,SAAWjM,KAAKiM,SAC9BjM,KAAKmN,SAASjB,UAAYlK,EAAAmK,UAAUC,OACpCpM,KAAKmN,SAASd,UAAYrK,EAAAsK,UAAUC,OAEpCvM,KAAKoN,YAAc,IAAIpL,EAAAgK,MAAM,GAAGiB,EAAWrE,EAAGD,EAAEsD,EAAU,KAAML,EAAAhR,QAAYL,MAAMgN,WAElFvH,KAAKoN,YAAYnB,SAAWjM,KAAKiM,SACjCjM,KAAKoN,YAAYlB,UAAYlK,EAAAmK,UAAUC,OACvCpM,KAAKoN,YAAYf,UAAYrK,EAAAsK,UAAUC,OAGvCvM,KAAKqN,WAAa,IAAIhD,EAAAzP,QAAWqH,EAAApE,UAAUf,OAAQ,WAAM,OAAAkH,EAAKsJ,OAAO,KACrEtN,KAAKqN,WAAWzE,EAAIA,EAAkB,IAAd5I,KAAKiM,SAC7BjM,KAAKqN,WAAW1E,EAAIA,EAAIsD,EACxBjM,KAAKqN,WAAWpG,MAAQ,IAAIjF,EAAAkF,OAAOlH,KAAKiM,SAAShK,EAAApE,UAAUf,OAAOyF,MAAOvC,KAAKiM,SAAShK,EAAApE,UAAUf,OAAO4F,QACxG1C,KAAKqN,WAAWvE,UAAU9I,KAAKiM,UAC/BjM,KAAKqN,WAAWxE,SAAS7I,KAAKiM,UAG9BjM,KAAKuN,YAAc,IAAIlD,EAAAzP,QAAWqH,EAAApE,UAAUd,QAAS,WAAM,OAAAiH,EAAKsJ,MAAM,KACtEtN,KAAKuN,YAAY3E,EAAIA,EAAkB,IAAd5I,KAAKiM,SAC9BjM,KAAKuN,YAAY5E,EAAIA,EAAIsD,EACzBjM,KAAKuN,YAAYtG,MAAQ,IAAIjF,EAAAkF,OAAOlH,KAAKiM,SAAShK,EAAApE,UAAUd,QAAQwF,MAAOvC,KAAKiM,SAAShK,EAAApE,UAAUd,QAAQ2F,QAC3G1C,KAAKuN,YAAYzE,UAAU9I,KAAKiM,UAChCjM,KAAKuN,YAAY1E,SAAS7I,KAAKiM,UA6BvC,OAzBYa,EAAAtU,UAAA8U,MAAR,SAAcxC,GACV,IAAM0C,EAAcxN,KAAKiN,QAAUnC,EAChC9K,KAAK+M,KAAOS,GAAexN,KAAKgN,KAAOQ,IACtCxN,KAAKiN,QAAUO,EACfxN,KAAKoN,YAAYK,KAAO,GAAGD,IAI5BV,EAAAtU,UAAAkV,WAAP,WACI,OAAO1N,KAAKiN,SAGTH,EAAAtU,UAAAmV,WAAP,SAAkBC,GACd5N,KAAKiN,QAAUW,EACf5N,KAAKoN,YAAYK,KAAO,GAAGG,GAGxBd,EAAAtU,UAAAoU,aAAP,WACI,OACI5M,KAAKqN,WACLrN,KAAKuN,YACLvN,KAAKoN,YACLpN,KAAKmN,WAGjBL,EA1EA,GAAA1N,EAAAxE,QAAAiT,GAAA,SAAA1O,EAAAC,EAAA1E,GAAA,iBAAAxC,EAAAsC,EAAAwF,WAAAqD,YAAAnL,EAAAK,OAAA+K,iBAAAC,wBAAAC,OAAA,SAAArE,EAAAC,GAAAD,EAAAoE,UAAAnE,IAAA,SAAAD,EAAAC,GAAA,QAAA1E,KAAA0E,IAAA3G,eAAAiC,KAAAyE,EAAAzE,GAAA0E,EAAA1E,KAAA,SAAAyE,EAAAC,GAAA,SAAA1E,IAAAsF,KAAAyD,YAAAtE,EAAAjH,EAAAiH,EAAAC,GAAAD,EAAA3G,UAAA,OAAA4G,EAAA7G,OAAAmL,OAAAtE,IAAA1E,EAAAlC,UAAA4G,EAAA5G,UAAA,IAAAkC,KAAAnC,OAAA6B,eAAAgF,EAAA,cAAA3E,OAAA,ICLA,IAAAa,EAAA/B,EAAA,GACA0I,EAAA1I,EAAA,GACA6Q,EAAA7Q,EAAA,IACAyI,EAAAzI,EAAA,GACA8Q,EAAA9Q,EAAA,IACA+Q,EAAA/Q,EAAA,IACAuU,EAAAvU,EAAA,IACAmO,EAAAnO,EAAA,IAGAwU,EAAAxU,EAAA,IACAkO,EAAAlO,EAAA,IACAoO,EAAApO,EAAA,IAEAyU,EAAA,SAAAnK,GAAA,SAAAmK,IAAA,IAAAhK,EAAA,OAAAH,KAAA9K,MAAAiH,KAAAiO,YAAAjO,YAgCUgE,EAAAO,OAAS,WACfmD,EAAA9M,QAAmBL,MAAMuG,YAAYkD,EAAKnE,SAAS6N,cACnDhG,EAAA9M,QAAmBL,MAAMyG,cAAcgD,EAAKlE,WAAW4N,cACnD1J,EAAK6B,MAAM6F,YACbjE,EAAA7M,QAAaL,MAAMiL,cAEnBiC,EAAA7M,QAAaL,MAAM8K,eAErBrB,EAAKxC,OAAOqJ,UAAUT,EAAA/K,OAAOE,cA6BjC,OArE6B8D,EAAA2K,EAAAnK,GAOpBmK,EAAAxV,UAAAgS,aAAP,SAAoBhJ,GAClBxB,KAAKwB,OAASA,EAEd,IAAMiJ,EAAY,IAAIH,EAAA1P,QAAkB4G,GACxCxB,KAAK0K,WAAWD,EAAUrH,cAC1B,IAAM8K,EAAWvG,EAAA/M,QAAcL,MAAMuH,gBAE/B6I,EAAiB1I,EAAApE,UAAUb,IAC3B4N,EAAO,IAAIP,EAAAzP,QACf+P,EACA3K,KAAKuE,QAGPvE,KAAKmO,YAAYD,GACjBlO,KAAKoO,kBAAkBF,GACvBlO,KAAKqO,eAAeH,GAEpBtD,EAAK3D,MAAQ,IAAIjF,EAAAkF,OAAOjF,EAAAtD,OAAOK,eAAiB2L,EAAMpI,MAAON,EAAAtD,OAAOK,eAAiB2L,EAAMjI,QAC3FkI,EAAK9B,UAAU7G,EAAAtD,OAAOK,gBACtB4L,EAAK/B,SAAS5G,EAAAtD,OAAOK,gBACrB4L,EAAKhC,EAAIpH,EAAOK,UAAYI,EAAAtD,OAAOK,eAAiB,EAAIiD,EAAAtD,OAAOG,YAC/D8L,EAAKjC,EAAI1G,EAAAtD,OAAOK,eAAiB,EAAIiD,EAAAtD,OAAOG,YAC5CkB,KAAK8K,IAAIF,IAcHoD,EAAAxV,UAAA2V,YAAR,SAAoBD,GAApB,IAAAlK,EAAAhE,KACEA,KAAKH,SAAW,IAAIiO,EAAAlT,QAAe,YAAa,EAAG,EAAG8M,EAAA9M,QAAmBL,MAAM6F,cAAeJ,KAAKwB,OAAOK,UAAY,EAAG7B,KAAKwB,OAAOiB,WAAa,EAAGyL,GACrJlO,KAAKH,SAAS+M,eACX0B,QAAQ,SAAApW,GAAK,OAAA8L,EAAK8G,IAAI5S,MAGnB8V,EAAAxV,UAAA4V,kBAAR,SAA0BF,GAA1B,IAAAlK,EAAAhE,KACEA,KAAKF,WAAa,IAAIgO,EAAAlT,QAAe,aAAc,EAAG,EAAG8M,EAAA9M,QAAmBL,MAAM8F,gBAAiBL,KAAKwB,OAAOK,UAAY,EAAG7B,KAAKwB,OAAOiB,WAAa,EAAa,EAATyL,EAAajM,EAAAtD,OAAOO,cAAegP,GAC9LlO,KAAKF,WAAW8M,eACb0B,QAAQ,SAAApW,GAAK,OAAA8L,EAAK8G,IAAI5S,MAGnB8V,EAAAxV,UAAA6V,eAAR,SAAuBH,GAAvB,IAAAlK,EAAAhE,KACEA,KAAK6F,MAAQ,IAAIkI,EAAAnT,QAAa,QAASsT,EAAUlO,KAAKwB,OAAOK,UAAU,EAAG7B,KAAKwB,OAAOiB,WAAW,EAAIyL,EAAWjM,EAAAtD,OAAOO,iBAAqBc,KAAKwB,QAEjJxB,KAAK6F,MAAM+G,eACV0B,QAAQ,SAAAlP,GAAK,OAAA4E,EAAK8G,IAAI1L,MAGlB4O,EAAAxV,UAAAuS,WAAP,WACE/K,KAAKH,SAAS8N,WAAWjG,EAAA9M,QAAmBL,MAAM6F,eAClDJ,KAAKF,WAAW6N,WAAWjG,EAAA9M,QAAmBL,MAAM8F,kBAG/C2N,EAAAxV,UAAAwS,aAAP,aAEFgD,EArEA,CAA6B1S,EAAG2P,OAAnBtR,EAAAqU,2YCdb,IAAA1S,EAAA/B,EAAA,GACA0I,EAAA1I,EAAA,GACA6Q,EAAA7Q,EAAA,IACAkO,EAAAlO,EAAA,IACAmO,EAAAnO,EAAA,IACAgV,EAAAhV,EAAA,IACA+Q,EAAA/Q,EAAA,IAEAiV,EAAA,SAAA3K,GAAA,SAAA2K,mDA0BA,OA1B6BnL,EAAAmL,EAAA3K,GAIpB2K,EAAAhW,UAAAgS,aAAP,SAAoBhJ,GAApB,IAAAwC,EAAAhE,KACEA,KAAKwB,OAASA,EACd,IAAMiN,EAAe,IAAInT,EAAG2J,MAC5BwJ,EAAahK,WAAWxC,EAAApE,UAAUV,QAAQuR,YAC1CD,EAAa7F,EAAI5I,KAAKwB,OAAOK,UAAY,EACzC4M,EAAa9F,EAAI3I,KAAKwB,OAAOiB,WAAa,EAC1C,IAAMgG,EAAO8F,EAAApH,kCAAkCnH,KAAKwB,OAAOiB,WAAYzC,KAAKwB,OAAOK,UAAWI,EAAApE,UAAUV,QAAS,GAAK,KACtHsR,EAAa3F,UAAUL,EAAK/F,QAC5B+L,EAAa5F,SAASJ,EAAKlG,OAC3BkM,EAAaxH,MAAQwB,EAAKxB,MAC1BwH,EAAa/J,GAAG,YAAa,WAC3BgD,EAAA9M,QAAmBL,MAAMoG,WACzBqD,EAAKxC,OAAOqJ,UAAUT,EAAA/K,OAAOC,eAE/BU,KAAK8K,IAAI2D,GACTzO,KAAK8K,IAAI,IAAIR,EAAA1P,QAAkB4G,GAAQ4B,eAElCoL,EAAAhW,UAAAuS,WAAP,WACEtD,EAAA7M,QAAaL,MAAMqL,mBAAmB3D,EAAApE,UAAUF,eAE3C6Q,EAAAhW,UAAAwS,aAAP,aAEFwD,EA1BA,CAA6BlT,EAAG2P,OAAnBtR,EAAA6U,2YCRb,IAAAlT,EAAA/B,EAAA,GACA0I,EAAA1I,EAAA,GACA6Q,EAAA7Q,EAAA,IACAkO,EAAAlO,EAAA,IAEAmO,EAAAnO,EAAA,IACAgV,EAAAhV,EAAA,IACA+Q,EAAA/Q,EAAA,IAEAoV,EAAA,SAAA9K,GAAA,SAAA8K,mDAgCA,OAhC8BtL,EAAAsL,EAAA9K,GAIrB8K,EAAAnW,UAAAgS,aAAP,SAAoBhJ,GAApB,IAAAwC,EAAAhE,KACEA,KAAKwB,OAASA,EACd,IAAMoN,EAAgB,IAAItT,EAAG2J,MAEvB4J,EADc,IAAIvT,EAAGwH,YAAYb,EAAApE,UAAUE,SAAU,EAAG,EAAG,IAAK,KAC9B+Q,mBAAmB9O,KAAKwB,OAAQ,KACxEoN,EAAcnK,WAAW,OAAQoK,GACjC,IAAMpG,EAAO8F,EAAAnI,2BAA2BpG,KAAKwB,OAAOiB,WAAYzC,KAAKwB,OAAOK,UAAW,IAAK,IAAK,GAAK,KACtG7B,KAAK8K,IAAI8D,GACTA,EAAchG,EAAI5I,KAAKwB,OAAOK,UAAU,EACxC+M,EAAcjG,EAAI3I,KAAKwB,OAAOiB,WAAW,EACzCmM,EAAc9F,UAAUL,EAAK/F,QAC7BkM,EAAc/F,SAASJ,EAAKlG,OAC5BqM,EAAc3H,MAAQwB,EAAKxB,MAC3B2H,EAAclK,GAAG,YAAa,WAC5BgD,EAAA9M,QAAmBL,MAAM2G,gBACzB8C,EAAKxC,OAAOqJ,UAAUT,EAAA/K,OAAOE,aAE/BS,KAAK8K,IAAI,IAAIR,EAAA1P,QAAkB4G,GAAQ4B,eAIlCuL,EAAAnW,UAAAuS,WAAP,WACEtD,EAAA7M,QAAaL,MAAMqL,mBAAmB3D,EAAApE,UAAUL,aAG3CmR,EAAAnW,UAAAwS,aAAP,WACE/I,EAAApE,UAAUL,WAAW+H,QAEzBoJ,EAhCA,CAA8BrT,EAAG2P,OAApBtR,EAAAgV,4YCTb,IAAArT,EAAA/B,EAAA,GACA0I,EAAA1I,EAAA,GACMwV,EAAUxV,EAAQ,IAExByV,EAAA,SAAAnL,GAEI,SAAAmL,IAAA,IAAAhL,EACIH,EAAAnL,KAAAsH,OAAOA,YACPgE,EAAKjF,gBAAkBkD,EAAAtD,OAAOI,gBAAgBkQ,WAC9CjL,EAAKkL,KAAOH,EACZ/K,EAAKmL,WAAa,IAClBnL,EAAKoL,UAAY,KAAAhQ,EAEzB,OATgCiE,EAAA2L,EAAAnL,GAShCmL,EATA,CAAgC1T,EAAG+T,QAAtB1V,EAAAqV,8YCJb,IAAA1T,EAAA/B,EAAA,GAEA+V,EAAA,SAAAzL,GACE,SAAAyL,WACEzL,EAAAnL,KAAAsH,MACEuP,8BACAC,YAAalU,EAAGmU,YAAYC,WAC5BC,yBACA3P,KAMN,OAZkCqD,EAAAiM,EAAAzL,GASzByL,EAAA9W,UAAAoX,MAAP,SAAaC,GACX,OAAOhM,EAAArL,UAAMoX,MAAKlX,KAAAsH,KAAC6P,IAEvBP,EAZA,CAAkChU,EAAGwU,qZCFrC,IAAA9N,EAAAzI,EAAA,GACA0I,EAAA1I,EAAA,GACA6Q,EAAA7Q,EAAA,IACA8Q,EAAA9Q,EAAA,IACAgV,EAAAhV,EAAA,IACA+Q,EAAA/Q,EAAA,IAEAwW,EAAA,SAAAlM,GAAA,SAAAkM,mDAuEA,OAvE8B1M,EAAA0M,EAAAlM,GAWrBkM,EAAAvX,UAAAgS,aAAP,SAAoBhJ,GAApB,IAAAwC,EAAAhE,KACEA,KAAKsG,YAAc9E,EAAOK,UAC1B7B,KAAKqG,aAAe7E,EAAOiB,WAC3BzC,KAAKgQ,KAAOxO,EACZ,IAAMiJ,EAAY,IAAIH,EAAA1P,QAAkB4G,GACxCxB,KAAK0K,WAAWD,EAAUrH,cAE1BpD,KAAK4P,MAAQ,IAAIvF,EAAAzP,QACfqH,EAAApE,UAAUjC,UAAW,WAAM,OAAAoI,EAAKgM,KAAKnF,UAAUT,EAAA/K,OAAOC,eAExDU,KAAKiQ,aAAajQ,KAAK4P,MAAO,GAAK,GAAK3N,EAAApE,UAAUjC,WAClDoE,KAAK8K,IAAI9K,KAAK4P,OAEd5P,KAAKkQ,QAAU,IAAI7F,EAAAzP,QACjBqH,EAAApE,UAAUhC,WACV,WAAM,OAAAmI,EAAKgM,KAAKnF,UAAUT,EAAA/K,OAAOK,WAEnCM,KAAKiQ,aAAajQ,KAAKkQ,QAAS,GAAK,GAAKjO,EAAApE,UAAUhC,YACpDmE,KAAK8K,IAAI9K,KAAKkQ,SAEdlQ,KAAKmQ,KAAO,IAAI9F,EAAAzP,QACdqH,EAAApE,UAAU/B,SACV,WAAM,OAAAkI,EAAKgM,KAAKnF,UAAUT,EAAA/K,OAAOM,QAEnCK,KAAKiQ,aAAajQ,KAAKmQ,KAAM,GAAK,GAAKlO,EAAApE,UAAU/B,UACjDkE,KAAK8K,IAAI9K,KAAKmQ,MAEdnQ,KAAKjE,MAAQiE,KAAKiQ,aAAa,IAAIjO,EAAAiD,MAAS,GAAK,EAAGhD,EAAApE,UAAU9B,OAC9DiE,KAAKjE,MAAM0I,WAAWxC,EAAApE,UAAU9B,OAChCiE,KAAK8K,IAAI9K,KAAKjE,OAEdiE,KAAKoQ,eAGAL,EAAAvX,UAAAuS,WAAP,aAGOgF,EAAAvX,UAAAyX,aAAP,SAAoBI,EAAOC,EAASrJ,EAAOsJ,GACzC,IAAM9H,EAAO8F,EAAApH,kCAAkCnH,KAAKqG,aAAcrG,KAAKsG,YAAaiK,EAAUD,EAASrJ,GAIvG,OAHAoJ,EAAMpJ,MAAQwB,EAAKxB,MACnBoJ,EAAMvH,UAAUL,EAAK/F,QACrB2N,EAAMxH,SAASJ,EAAKlG,OACb8N,GAGFN,EAAAvX,UAAA4X,YAAP,WACEpQ,KAAK4P,MAAMhH,EAAI5I,KAAKsG,YAAc,EAClCtG,KAAK4P,MAAMjH,EAAI3I,KAAKqG,aAAe,EAAIrG,KAAK4P,MAAMY,YAAcvO,EAAAtD,OAAOG,YAEvEkB,KAAKkQ,QAAQtH,EAAI5I,KAAKsG,YAAc,EACpCtG,KAAKkQ,QAAQvH,EAAI3I,KAAKqG,aAAe,EAErCrG,KAAKmQ,KAAKvH,EAAI5I,KAAKsG,YAAc,EACjCtG,KAAKmQ,KAAKxH,EAAI3I,KAAKqG,aAAe,EAAIrG,KAAKmQ,KAAKK,YAAcvO,EAAAtD,OAAOG,YAErEkB,KAAKjE,MAAM6M,EAAI5I,KAAKsG,YAAc,EAClCtG,KAAKjE,MAAM4M,EAAI3I,KAAKjE,MAAMyU,YAAY,EAAIvO,EAAAtD,OAAOG,aAG5CiR,EAAAvX,UAAAwS,aAAP,aACF+E,EAvEA,CAA8B/N,EAAAiJ,OAAjBtR,EAAAoW,4YCPb,IAAA/N,EAAAzI,EAAA,GACAqS,EAAArS,EAAA,IAEAkX,EAAA,SAAA5M,GAEI,SAAA4M,EAAmB7H,EAAWD,EAAWwC,EAAcuF,GAAvD,IAAA1M,EACIH,EAAAnL,KAAAsH,KACIyQ,EAAaE,gBAAgBD,GAC7B9H,EACAD,EACA,KACAiD,EAAAhR,QAAYL,MAAMgN,YACrBvH,YAEDgE,EAAKiI,SAAWd,EAChBnH,EAAKkI,UAAYlK,EAAAmK,UAAUC,OAC3BpI,EAAKqI,UAAYrK,EAAAsK,UAAUC,SAYnC,OAzB0ClJ,EAAAoN,EAAA5M,GAiBvB4M,EAAAE,gBAAf,SAA+BC,GAC3B,OAAUH,EAAaI,OAAM,IAAID,GAG9BH,EAAAjY,UAAAsY,YAAP,SAAmBC,GACf/Q,KAAKyN,KAAOgD,EAAaE,gBAAgBI,IArB9BN,EAAAI,OAAiB,QAwBpCJ,EAzBA,CAA0CzO,EAAAgK,iBAArByE,mYCHrB,IAAAnV,EAAA/B,EAAA,GACA0I,EAAA1I,EAAA,GACAyX,EAAAzX,EAAA,IAEAmO,EAAAnO,EAAA,IACAoO,EAAApO,EAAA,IAIA0X,EAAA,SAAApN,GAMI,SAAAoN,EAAmBjM,EAAiBkM,EAAejJ,EAAyBkJ,GAA5E,IAAAnN,EACIH,EAAAnL,KAAAsH,OAAOA,KACPgE,EAAKgB,KAAOA,EACZhB,EAAKkN,MAAQA,EACblN,EAAKiE,aAAeA,EACpB,IAAMQ,EAAOuI,EAAAhJ,KAAKU,mBAAkC,EAAfT,EAAaU,EAAoB,EAAfV,EAAaW,UAEpE5E,EAAKS,WAAW,IAAKwM,EAAM/M,OAAOjC,EAAApE,UAAU,GAAI4K,EAAKxB,QACrDjD,EAAKS,WAAW,IAAKwM,EAAM/M,OAAOjC,EAAApE,UAAU,GAAI4K,EAAKxB,QACrDjD,EAAKS,WAAW,IAAKwM,EAAM/M,OAAOjC,EAAApE,UAAU,GAAI4K,EAAKxB,QACrDjD,EAAKS,WAAW,IAAKwM,EAAM/M,OAAOjC,EAAApE,UAAU,GAAI4K,EAAKxB,QACrDjD,EAAKS,WAAW,IAAKwM,EAAM/M,OAAOjC,EAAApE,UAAU,GAAI4K,EAAKxB,QACrDjD,EAAKS,WAAW,IAAKwM,EAAM/M,OAAOjC,EAAApE,UAAU,GAAI4K,EAAKxB,QACrDjD,EAAKS,WAAW,IAAKwM,EAAM/M,OAAOjC,EAAApE,UAAU,GAAI4K,EAAKxB,QACrDjD,EAAKS,WAAW,IAAKwM,EAAM/M,OAAOjC,EAAApE,UAAU,GAAI4K,EAAKxB,QACrDjD,EAAKS,WAAW,IAAKwM,EAAM/M,OAAOjC,EAAApE,UAAU,GAAI4K,EAAKxB,QACrDjD,EAAKS,WAAW,IAAKwM,EAAM/M,OAAOjC,EAAApE,UAAU,GAAI4K,EAAKxB,QAGrDjD,EAAK6E,SAASJ,EAAKlG,OACnByB,EAAK8E,UAAUL,EAAK/F,QACpBsB,EAAK4E,EAAIqI,EAAMjI,MAAMhE,EAAMkM,EAAOjJ,EAAcQ,EAAKlG,OAASkG,EAAKlG,MACnEyB,EAAK2E,EAAIsI,EAAMhI,MAAMjE,EAAMkM,EAAOjJ,EAAcQ,EAAK/F,QAAU+F,EAAK/F,OACpEsB,EAAKoN,SAASD,KAwCtB,OArEmC9N,EAAA4N,EAAApN,GAgChBoN,EAAAjI,MAAf,SAAqBhE,EAAiBkM,EAAe/H,EAAmBD,GACpE,IAAMmI,EAAWlI,EAAOP,EAChBlB,EAAA9M,QAAmBL,MAAM6F,cAAgB,EAAK8I,EAChDA,GACExB,EAAA9M,QAAmBL,MAAM6F,cAAc,GAAK6B,EAAAtD,OAAOG,YAAe,EAE1E,MAAa,QAATkG,EACOqM,EAEAA,EAAWnI,EAAaA,EAAYgI,EAAUjP,EAAAtD,OAAOG,aAAeoS,EAAM,IAI1ED,EAAAhI,MAAf,SAAqBjE,EAAiBkM,EAAe/H,EAAmBC,GACpE,IAAMkI,EAAMnI,EAAOR,EACbhB,EAAA/M,QAAcL,MAAMwH,gBAAkB,EACpC2F,EAAA9M,QAAmBL,MAAM6F,cAAc,EAAIgJ,EAC7CA,GACE1B,EAAA9M,QAAmBL,MAAM6F,cAAc,GAAK6B,EAAAtD,OAAOG,YAAa,EAEpE,MAAY,QAATkG,EACQsM,EAEAA,EAAMlI,EAAcA,EAAa8H,EAAUjP,EAAAtD,OAAOG,aAAeoS,EAAQ,IAI7ED,EAAA/M,OAAf,SAAsBJ,EAAqBmD,GACvC,IAAM/C,EAAoBJ,EAAQ4K,WAElC,OADAxK,EAAO+C,MAAQA,EACR/C,GAGJ+M,EAAAzY,UAAA4Y,SAAP,SAAgBG,GAEZ,OADAvR,KAAKyJ,WAAW,GAAG8H,GACZvR,MAEfiR,EArEA,CAAmC3V,EAAG2J,kGCTtC,IAAA+L,EAAAzX,EAAA,IAEAiY,EAAAjY,EAAA,IAEAyI,EAAAzI,EAAA,GACAmO,EAAAnO,EAAA,IAGAkY,EAAA,WAUI,SAAAA,EAAoBC,EAAwC7R,EAAkBoI,GAC1EjI,KAAK2R,cAAgB,EACrB3R,KAAK4R,YAAc,EACnB5R,KAAK6R,WAAa,EAClB7R,KAAKH,SAAWA,EAChBG,KAAK0R,iBAAmBA,EACxB1R,KAAKiI,aAAeA,EACpBjI,KAAK8R,KAAOL,EAAgBM,UAAUlS,EAAU6R,EAAkB1R,KAAKiI,cA0G/E,OAvGWwJ,EAAAjZ,UAAAwZ,cAAP,WAMI,OALaR,EAAAS,OAAOC,GAAGlS,KAAK8R,MACvBK,IAAI,SAAAtE,GAAK,OAAA2D,EAAAS,OAAOG,SAAQrZ,MAAfyY,EAAAS,OAAmBpE,KAC5BwE,QAAQb,EAAAc,SAASC,YACjBC,WAKFf,EAAAjZ,UAAAia,QAAP,SAAeC,EAAkBC,GAC7B,OAAO3S,KAAK8R,KAAKY,GAAUC,IAGxBlB,EAAAjZ,UAAAkR,OAAP,SAAcgJ,GACV,OAAOlB,EAAAS,OAAOC,GAAGlS,KAAK8R,MACrBK,IAAI,SAAAtE,GAAK,OAAA2D,EAAAS,OAAOG,SAAQrZ,MAAfyY,EAAAS,OAAmBpE,KAC5BwE,QAAQ,SAAAxY,GAAK,OAAAA,IACb+Y,OAAO,SAAAjX,GAAQ,OAAAA,EAAK+N,UAAYgJ,IAChCF,WAGEf,EAAAjZ,UAAAmR,OAAP,SAAcgJ,GACV,OAAOnB,EAAAS,OAAOC,GAAGlS,KAAK8R,MACrBK,IAAI,SAAAtE,GAAK,OAAA2D,EAAAS,OAAOG,SAAQrZ,MAAfyY,EAAAS,OAAmBpE,KAC5BwE,QAAQ,SAAAxY,GAAK,OAAAA,IACb+Y,OAAO,SAAAjX,GAAQ,OAAAA,EAAKgO,UAAYgJ,IAChCH,WAGUf,EAAAM,UAAf,SAAyBlS,EAAkB6R,EAAwCzJ,GAAnF,IAAAjE,EAAAhE,KACI,OAAOwR,EAAAS,OAAOY,MAAM,EAAGhT,GAClBsS,IAAI,SAAAW,GAAU,OAAA9O,EAAK+O,aAAalT,EAAUiT,EAAQpB,EAAkBzJ,KACpEuK,WAGMf,EAAAsB,aAAf,SAA4BlT,EAAkB6S,EAAkBhB,EAAwCzJ,GACpG,OAAOuJ,EAAAS,OAAOY,MAAM,EAAGhT,GAClBsS,IAAI,SAAAa,GAAe,OAAAhC,EAAAhJ,KAAKtM,KAAKuM,EAAcyK,EAAUM,EAAatB,EAAiBuB,oBACnFT,WAGDf,EAAAjZ,UAAA0a,oBAAR,WACI,KAAOlT,KAAKmT,qBAAqB,CAC7B,IAAMlQ,EAAcjD,KAAKoT,cACnBlL,EAAclI,KAAKoT,cACtBpT,KAAKqT,OAAOpQ,EAAKiF,IAChBlI,KAAKsT,WAAWrQ,EAAKiF,EAAK8I,EAAAhJ,KAAK6B,SAAS7J,KAAKiI,aAAchF,EAAKiF,EAAKlI,KAAK0R,iBAAiB6B,yBAK/F9B,EAAAjZ,UAAAgb,gBAAR,WACI,KAAMxT,KAAKyT,iBAAiB,CACxB,IAAMxQ,EAAcjD,KAAKoT,cACnBlL,EAAclI,KAAKoT,cACtBpT,KAAKqT,OAAOpQ,EAAKiF,IAChBlI,KAAKsT,WAAWrQ,EAAKiF,EAAKlI,KAAK0T,iBAAiBzQ,EAAKiF,MAKzDuJ,EAAAjZ,UAAAkb,iBAAR,SAAyBzQ,EAAaiF,GAClC,OAAO7F,KAAKsR,SAAW,GACrB3C,EAAAhJ,KAAKiC,OAAOjK,KAAKiI,aAAchF,EAAKiF,EAAKlI,KAAK0R,iBAAiBkC,oBAC/D5C,EAAAhJ,KAAKvM,OAAOuE,KAAKiI,aAAchF,EAAKiF,EAAKlI,KAAK0R,iBAAiBmC,qBAG7DpC,EAAAjZ,UAAA8a,WAAR,SAAmBrQ,EAAaiF,EAAavM,GACrCA,EAAKqJ,QAAUgM,EAAAxJ,SAASK,SACxB7H,KAAK2R,gBACEhW,EAAKqJ,QAAUgM,EAAAxJ,SAASO,OAC/B/H,KAAK6R,aACElW,EAAKqJ,QAAUgM,EAAAxJ,SAASM,QAC/B9H,KAAK4R,cAET5R,KAAK8R,KAAK7O,GAAKiF,GAAOvM,GAGlB8V,EAAAjZ,UAAA6a,OAAR,SAAepQ,EAAYiF,GACvB,OAAOlI,KAAK8R,KAAK7O,GAAKiF,GAAKlD,QAAUgM,EAAAxJ,SAASI,MAG1C6J,EAAAjZ,UAAA2a,kBAAR,WACI,OAAOnT,KAAK2R,cAAgBtP,KAAKC,KAAOtC,KAAKH,SAAWG,KAAKH,SAAa6H,EAAA9M,QAAmBL,MAAM+F,mBAG/FmR,EAAAjZ,UAAAib,cAAR,WAEI,OADmBzT,KAAK4R,YAAc5R,KAAK6R,WACvB7R,KAAK2R,cAAgBjK,EAAA9M,QAAmBL,MAAMkG,iBAG9DgR,EAAAjZ,UAAA4a,YAAR,WACI,OAAO/Q,KAAKyR,MAAMzR,KAAKsR,SAAW3T,KAAKH,WAG7B4R,EAAAsC,WAAd,SAAyBrC,EAAwC7R,EAAkB2B,GAC/E,IACMwS,EAAyB,IAAIvC,EAAgBC,EAAkB7R,EADhD,IAAImC,EAAAkF,OAAO1F,EAAOK,UAAU,EAAGL,EAAOiB,WAAW,IAItE,OAFAuR,EAAMd,sBACNc,EAAMR,kBACCQ,GAGfvC,EA3HA,GAAa9X,EAAA8X,mCCRb7X,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,EAAAC,EAAA1E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAoE,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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([246,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nimport { Color } from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst helpMenu = require('./images/helpMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n\n    myMono: new ex.Texture(fontMono),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 20,\n};\n\nexport { Resources, Config, uiHeart}\n","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}","type Difficulty = 1 | 2 | 3 | 4 | 5;\ntype GridSize = 3 | 4 | 5 | 6 | 7 | 8 | 9;\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport default class ProgressionManager {\n\n    private static baseGridSize: number = 4;\n    private static baseDifficulty: number = 1;\n    private static singleton: ProgressionManager;\n\n    private gridSize: number;\n    private difficulty: number;\n    private disableProgression: boolean;\n\n    private constructor(gridSize, difficulty, disableProgression) {\n        this.gridSize = gridSize;\n        this.difficulty = difficulty;\n        this.disableProgression = disableProgression;\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager(\n                ProgressionManager.baseGridSize,\n                ProgressionManager.baseDifficulty,\n                false\n            );\n            return this.singleton;\n        }\n    }\n\n    public getGridSize(): number {\n        return this.gridSize;\n    }\n\n    public getDifficulty(): number {\n        return this.difficulty;\n    }\n\n    public getSkullFactor(): number {\n        return ProgressionManager.getBuffAndSkullByDifficulty(this.difficulty).skullFactor;\n    }\n\n    public getBuffFactor(): number {\n        return ProgressionManager.getBuffAndSkullByDifficulty(this.difficulty).buffFactor;\n    }\n\n    public progress(): void {\n        if (!this.disableProgression) {\n            if(this.difficulty === 5) {\n                this.difficulty = this.nextDifficulty(this.difficulty, this.gridSize);\n                this.gridSize = this.nextGridSize(this.gridSize);    \n            } else {\n                const next = this.nextDifficulty(this.difficulty, this.gridSize); \n                this.difficulty = this.nextDifficulty(this.difficulty, this.gridSize); \n            }   \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        this.gridSize = newSize;\n    }\n\n    public setDifficulty(newDifficulty: number) {\n        this.difficulty = newDifficulty;\n    }\n\n    public resetProgress(): void {\n        if (!this.disableProgression) {\n            this.difficulty = ProgressionManager.baseDifficulty;\n            this.gridSize = ProgressionManager.baseGridSize;\n        }\n    }\n\n    public getLevelNumber(): number {\n        return parseFloat(`${this.getGridSize()}.${this.getDifficulty()}`);\n    }\n\n    private nextGridSize(gridSize: number): number {\n       return gridSize === 9 \n       ?  9\n       : gridSize+1;\n    }\n\n    //Normal progression is 1,3,5 and then bump the grid size.\n    //if the player sets the initial difficulty to 2 or 4 then we should handle that\n    private nextDifficulty(difficulty: number, currentGridSize: number): number {\n        if(currentGridSize === 9 && difficulty === 5) {\n            // do nothing\n        } else {\n            if (difficulty === 2 || difficulty === 4) {\n                return difficulty + 1;\n            } else if (difficulty === 5) {\n                return 1;\n            } else {\n                return difficulty + 2;\n            }\n        }\n    }\n\n    private static getBuffAndSkullByDifficulty(difficulty: number): Factors {\n        //skull factor: easy 3 (30%), medium 2.5 (40%), hard 2 (50%)\n        //buff factor: easy 0, med 1, hard 2\n        const createReturn = (skullFactor, buffFactor) => {\n            return { skullFactor, buffFactor };\n        }\n        switch (difficulty) {\n            case 1:\n                return createReturn(3.0, 0.0);\n            case 2:\n                return createReturn(2.5, 0.0);\n            case 3:\n                return createReturn(2.5, 1.0);\n            case 4:\n                return createReturn(2.0, 1.0);\n            case 5:\n                return createReturn(2.0, 2.0);\n        }\n    }\n\n}","import { Engine } from \"excalibur\";\n\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class MobileManager {\n    private engine: Engine;\n    private static singleton: MobileManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new MobileManager(engine);\n        } else {\n            console.log(\"Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): MobileManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 768; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 3;\n    }\n\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(engine: Engine) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(engine.drawWidth / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(engine.drawHeight / tile.height); \n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows*numberOfCols; row++) {\n\n                tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    public getTileMap(): TileMap {\n        return this.tileMap;\n    }\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>) {\n        super();\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if(event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.sprite.clearEffects();\n                onClick();\n            } else {\n            }\n        }\n    }\n\n    private onDown: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.sprite.clearEffects();\n    }\n\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n    private disabled: boolean = false;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        this.disabled = true;\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public enableSound() {\n        this.disabled = false;\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.disabled) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play(0.1);\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!this.disabled) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import { Texture, Vector } from \"excalibur\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n    \n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport MobileManager from '../../engine/mobileManager';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (MobileManager.get().getMenuHeight()/2) //adjust for menu size\n            - ((ProgressionManager.get().getGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - MobileManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Help extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n  }\n  \n  public onActivate() {\n  }\n  \n  public onDeactivate() {\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier } from \"java8script\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, SpriteFont, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine) {\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = size;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        console.log(`labelwidth ${labelWidth}`)\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(size, x+labelWidth*(2/3), y, defaultVal);\n        \n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButton: Actor;\n    private rightButton: Actor;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = this.fontSize;\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+fontSize, null, FontManager.get().getMono());\n        //this.numberLabel.anchor = new Vector(1, 1);\n        this.numberLabel.fontSize = this.fontSize;\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButton.x = x - this.fontSize*1.5\n        this.leftButton.y = y + fontSize;\n        this.leftButton.scale = new Vector(this.fontSize/Resources.uiLeft.width, this.fontSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(this.fontSize);\n        this.leftButton.setWidth(this.fontSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButton.x = x + this.fontSize*1.5;\n        this.rightButton.y = y + fontSize;\n        this.rightButton.scale = new Vector(this.fontSize/Resources.uiRight.width, this.fontSize/Resources.uiRight.height);\n        this.rightButton.setHeight(this.fontSize);\n        this.rightButton.setWidth(this.fontSize);\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Label, Color, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progressionManager';\nimport { MainMenu } from './mainMenu';\nimport RadioButton from '../actors/bars/radioButton';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SoundManager from '../engine/soundManager';\nimport MobileManager from '../engine/mobileManager';\n\nexport class Options extends ex.Scene {\n\n  private engine;\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n    const itemSize = MobileManager.get().getUIItemSize();\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      this.onExit\n    );\n\n    this.addGridSize(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addSoundToggle(itemSize);\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n  }\n\n  private onExit = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    if (this.sound.isChecked()) {\n      SoundManager.get().enableSound();\n    } else {\n      SoundManager.get().disableSound();\n    }\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n  private addGridSize(itemSize): void {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getGridSize(), this.engine.drawWidth / 2, this.engine.drawHeight / 2, itemSize);\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 + itemSize*2 + Config.optionPadding, itemSize);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 - itemSize - Config.optionPadding, true, this.engine);\n\n    this.sound.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  public onActivate() {\n    this.gridSize.setCurrent(ProgressionManager.get().getGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty()); \n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progressionManager';\nimport { calcDimensionsSingleObject, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1.5)\n    victoryActor.setHeight(dims.height);\n    victoryActor.setWidth(dims.width);\n    victoryActor.scale = dims.scale;\n    victoryActor.on('pointerup', () => {\n      ProgressionManager.get().progress();\n      this.engine.goToScene(Scenes.GAME_WINDOW);\n    });\n    this.add(victoryActor);\n    this.add(new BackgroundManager(engine).getTileMap())\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine, Actor } from 'excalibur';\nimport ProgressionManager from '../engine/progressionManager';\nimport { calcDimensionsSingleObject } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    const dims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(dims.height);\n    gameOverActor.setWidth(dims.width);\n    gameOverActor.scale = dims.scale;\n    gameOverActor.on('pointerup', () => {\n      ProgressionManager.get().resetProgress();\n      this.engine.goToScene(Scenes.MAIN_MENU);\n    });\n    this.add(new BackgroundManager(engine).getTileMap())\n\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      suppressPlayButton: true //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(Scenes.GAME_WINDOW),\n    );\n    this.sizeProperly(this.start, 0.4, 0.5, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => this.game.goToScene(Scenes.OPTIONS),\n    );\n    this.sizeProperly(this.options, 0.4, 0.5, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => this.game.goToScene(Scenes.HELP),\n    );\n    this.sizeProperly(this.help, 0.4, 0.5, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.title.addDrawing(Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: number) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: number) {\n        return `${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: number): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progressionManager';\nimport MobileManager from '../../engine/mobileManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + MobileManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"6f20cd91097c8be0d36eaad2bf6244ec.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport { Config } from \"../../resources\";\nimport MobileManager from \"../../engine/mobileManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(MobileManager.get().getUIItemSize()/texture.width, MobileManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport { Config } from \"../resources\";\nimport MobileManager from \"../engine/mobileManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * MobileManager.get().getUIItemSize()), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * MobileManager.get().getUIItemSize()), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progressionManager\";\nimport MobileManager from \"../engine/mobileManager\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const mm: MobileManager = MobileManager.get();\n        const coordinator: GameCoordinator = new GameCoordinator(\n            engine,\n            NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword)\n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, ProgressionManager.get().getGridSize(), engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n        }\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinator } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport SoundManager from '../engine/soundManager';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { Actor, Engine, Color, Texture, Vector } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { Scenes } from './scenes';\nimport LevelDisplay from '../actors/bars/level';\nimport ProgressionManager from '../engine/progressionManager';\nimport MobileManager from '../engine/mobileManager';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator: GameCoordinator;\n  private engine: Engine;\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    /*\n    const bar = new Actor();\n    bar.y = Config.menuHeight;\n    bar.x = this.engine.drawWidth/2;\n    bar.setHeight(1);\n    bar.setWidth(this.engine.drawWidth)\n    bar.color = Color.Red;\n    bar\n    this.add(bar);//todo remove\n    */\n\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n\n    //todo move this to be actually score keeper\n    /*\n    const coins: Actor = new Actor();\n    coins.addDrawing(Resources.uiCoins);\n    coins.scale = new Vector(Config.uiItemSize / Resources.uiCoins.width, Config.uiItemSize / Resources.uiCoins.height);\n    coins.x = Config.uiItemSize / 2;\n    coins.y = Config.uiItemSize * 2.5;\n    this.add(coins);\n    */\n\n    const mm: MobileManager = MobileManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth/2, mm.getMenuHeight()-mm.getUIItemSize()/2, mm.getUIItemSize(), ProgressionManager.get().getLevelNumber());\n    this.add(this.levelDisplay);\n  }\n\n  public onActivate() {\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelNumber());\n\n    SoundManager.get().backgroundMusicStart();\n    const coordinator: GameCoordinator = GameCoordinator.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n\n    //cordova specific\n    //document.addEventListener(\"backbutton\", this.onBackButton);\n  }\n\n  private onBackButton = () => this.engine.goToScene(Scenes.MAIN_MENU);\n\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n\n    //document.removeEventListener(\"backbutton\", this.onBackButton);\n  }\n} \n","import { GameWindow } from './scenes/gameWindow';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport MobileManager from './engine/mobileManager';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, new Options(game));\ngame.add(Scenes.HELP, new Help(game));\n\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  MobileManager.initialize(game);\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}