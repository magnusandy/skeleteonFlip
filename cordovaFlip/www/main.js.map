{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/engine/sizingManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/fontManager.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/images/title.png","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/engine/progression/playerSettingsManager.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/button.wav","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/myMono.png","webpack:///./src/images/helpTitle.png","webpack:///./src/images/optionTitle.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/helpMenu.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/gameWindow.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","optionTitle","helpTitle","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","buttonSound","backgroundTile","Resources","Texture","gameOver","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","t","e","difficulty_1","playerSettingsManager_1","ProgressionManager","this","singleton","getGameGridSize","ps","isProgressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","maxLevel","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","difficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","setProgressionDisabled","isProgressDisabled","resetProgress","getLevelString","Scenes","GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","resources_1","SoundManager","disabled","soundManager","disableSound","backgroundSound","stop","enableSound","backgroundMusicStart","volume","loop","play","backgroundMusicEnd","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","SizingManager","engine","initialize","console","log","isMobile","drawWidth","getUIItemSize","getMenuHeight","excalibur_1","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","maxScale","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","width","height","scale","Vector","calcDimensionsSingleObjectTexture","texture","safePointerUp","onClick","event","ev","type","BackgroundManager","tile","numberOfCols","Math","ceil","numberOfRows","drawHeight","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","__extends","setPrototypeOf","__proto__","Array","constructor","create","SpriteEffects_1","soundManager_1","helpers_1","ButtonBase","_super","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","addDrawing","on","EventTypes","PointerUp","onClickWrapper","getSprite","setDisabled","Actor","FontManager","generalMono","SpriteFont","getMono","CardType","progressionManager_1","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","java8script_1","difficultyLevel","buff","text","buffFactor","skeletonFactor","difficultyName","getDifficultyLevel","level","Stream","of","VERY_EASY","EASY","NORMAL","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","scenes_1","buttonBase_1","backgroundManager_1","Help","onInitialize","bgManager","addTileMap","exitT","exit","goToScene","add","addTitle","onActivate","onDeactivate","asSprite","Scene","RadioButton","size","defaultValue","onToggle","currentSprite","toggleButton","checked","ifPresent","func","checkedSprite","uncheckedSprite","Optional","ofNullable","isChecked","radioButton_1","fontManager_1","LabeledRadio","label","defaultVal","textSize","buttonSize","Label","fontSize","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","labelWidth","getTextWidth","ctx","radio","getDrawables","u","NumberSelector","min","max","current","updateDisabled","isDisabled","leftButtonSprite","rightButtonSprite","disColor","topLabel","color","numberLabel","Colorize","leftButton","rightButton","Black","labelText","addBy","nextCurrent","getCurrent","setCurrent","newCurrent","a","numberSelector_1","labeledRadio_1","Options","arguments","gridSize","progressionToggle","itemSize","callbackForEnabling","addGridSize","addDifficultySize","addSoundToggle","addProgressionToggle","forEach","toggleCallback","Victory","victoryActor","GameOver","gameOverActor","playerIdleAnimation","getAnimationForAll","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","suppressPlayButton","start","loader","Engine","MainMenu","game","sizeProperly","options","help","placeActors","actor","padding","resource","getHeight","LevelDisplay","startingLevel","createLabelText","PREFIX","updateLevel","newLevel","card_1","Count","index","initialCount","setCount","leftSide","top","count","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","map","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","PlayerSettingsManager","toggleSound","progressionDisabled","chosenDiff","chosenGridSize","maxDiff","soundOff","chosenDifficulty","maxDifficulty","DEFAULT","newStage","difficutly","isProgDisabled","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","GameCoordinator","healthCoordinator","attackCoordinator","updateLabels","checkIfCompleteGame","mm","coordinator","gridCoordinator","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","skeletonCountForCol","skeletonCountForRow","allMatch","coordinator_1","level_1","GameWindow","onBackButton","levelDisplay","remove","gameWindow_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","mainMenu","keys","k","addResource"],"mappings":"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,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAuE,EAAAC,EAAA7E,GCAAd,EAAAD,QAAAJ,EAAAwB,E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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([251,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst helpMenu = require('./images/helpMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\nconst optionTitle = require('./images/optionTitle.png');\nconst helpTitle = require('./images/helpTitle.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\nconst buttonSound = require('./sounds/button.wav');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    optionTitle: new ex.Texture(optionTitle),\n    helpTitle: new ex.Texture(helpTitle),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n\n    myMono: new ex.Texture(fontMono),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    buttonSound: new ex.Sound(buttonSound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport { Resources, Config, uiHeart}\n","import { Difficulty } from \"./difficulty\";\nimport PlayerSettingsManager from \"./playerSettingsManager\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private constructor() {\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager();\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = PlayerSettingsManager.get();\n        if(ps.isProgressionDisabled()) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return PlayerSettingsManager.get().getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return PlayerSettingsManager.get().getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public isProgressionDisabled() {\n        return PlayerSettingsManager.get().isProgressionDisabled();\n    }\n\n    public progress(): void {\n        if(!PlayerSettingsManager.get().isProgressionDisabled()) {\n            const currentLevel = PlayerSettingsManager.get().getCurrentLevel();\n            const currentStage = PlayerSettingsManager.get().getCurrentStage();\n    \n            if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n                //on the last stage of the level, need to find out if we can move on or just move up stages\n                if(currentLevel === PlayerSettingsManager.get().maxLevel) {\n                    // on the max upgraded level just increase stage\n                    PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n                } else {\n                    PlayerSettingsManager.get().setCurrentStage(1);\n                    PlayerSettingsManager.get().setCurrentLevel(currentLevel + 1);\n                }\n            } else {\n                //move on to the next stage, no extra logic\n                PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n            }  \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        PlayerSettingsManager.get().setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        PlayerSettingsManager.get().setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public setProgressionDisabled(isProgressDisabled: boolean) {\n        return PlayerSettingsManager.get().setProgressionDisabled(isProgressDisabled);\n    }\n\n    public resetProgress(): void {\n        const ps = PlayerSettingsManager.get();\n        if (!ps.isProgressionDisabled()) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        if (PlayerSettingsManager.get().getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${PlayerSettingsManager.get().getCurrentLevel()}.${PlayerSettingsManager.get().getCurrentStage()}`;\n        }\n    }\n}","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n    private disabled: boolean = false;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        this.disabled = true;\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public enableSound() {\n        this.disabled = false;\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.disabled) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.volume = 0.1;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play();\n            }\n        }\n    }\n\n    public backgroundMusicEnd(): void {\n        if(!this.disabled) {\n            if (this.backgroundSound) {\n                this.backgroundSound.stop();\n                this.backgroundSound = null;\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!this.disabled) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import { Engine } from \"excalibur\";\n\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 768; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 3;\n    }\n\n}","import { Texture, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n\n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nfunction safePointerUp(onClick: Supplier<void>): (event?: any) => void {\n    return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                onClick();\n            }\n    }\n}\n\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture,\n    safePointerUp\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(engine: Engine) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(engine.drawWidth / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(engine.drawHeight / tile.height); \n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows*numberOfCols; row++) {\n\n                tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    public getTileMap(): TileMap {\n        return this.tileMap;\n    }\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport SoundManager from \"../../engine/soundManager\";\nimport { Resources } from \"../../resources\";\nimport { safePointerUp } from \"../../engine/helpers\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n    private disabled: boolean;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>, disabled?: boolean) {\n        super();\n        this.disabled = disabled ? disabled : false;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    public getSprite():Sprite {\n        return this.sprite;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return safePointerUp(() => {\n            if (!this.disabled) {\n                this.sprite.clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n                onClick();\n            }\n        });\n    }\n\n    private onDown: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.2))\n        }\n\n    }\n\n    private onEnter: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.1))\n        }\n\n    }\n\n    private onExit: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n        }\n    }\n\n    public setDisabled(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/sizingManager';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight()/2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\n\nexport class Help extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n    this.addTitle();\n  }\n  \n  public onActivate() {\n  }\n  \n  public onDeactivate() {\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.helpTitle, 0.6, 1);\n    const sprite = Resources.helpTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth/2;\n    title.y = dims.height/2+ Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale; \n    this.add(title);\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier, Function, Optional, Consumer } from \"java8script\";\nimport SoundManager from \"../../engine/soundManager\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n    private onToggle: Optional<Consumer<boolean>>\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean, onToggle?: Consumer<boolean>) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n        this.onToggle = Optional.ofNullable(onToggle);\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound)\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.onToggle.ifPresent(func => func(this.checked));\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine, onToggle?: (checked:boolean) => void) {\n        const textSize = size - (size * 0.25)\n        const buttonSize = size + (size * 0.25);\n        \n\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = textSize;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(buttonSize, x+labelWidth*(3/4), y, defaultVal, onToggle);\n        \n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign, Color, Sprite } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/fontManager\";\nimport { Colorize } from \"excalibur/dist/Drawing/SpriteEffects\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButtonSprite:Sprite;\n    private leftButton: ButtonBase;\n    private rightButtonSprite: Sprite;\n    private rightButton: ButtonBase;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number, disabled: boolean) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n\n        const textSize = this.fontSize - (this.fontSize * 0.25)\n        const buttonSize = this.fontSize + (this.fontSize * 0.25);\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = textSize\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        \n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+buttonSize, null, FontManager.get().getMono());\n        this.numberLabel.fontSize = textSize\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        \n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButtonSprite = this.leftButton.getSprite();\n        this.leftButton.x = x - buttonSize*1.5\n        this.leftButton.y = y + buttonSize;\n        this.leftButton.scale = new Vector(buttonSize/Resources.uiLeft.width, buttonSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(buttonSize);\n        this.leftButton.setWidth(buttonSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButtonSprite = this.rightButton.getSprite();\n        this.rightButton.x = x + buttonSize*1.5;\n        this.rightButton.y = y + buttonSize;\n        this.rightButton.scale = new Vector(buttonSize/Resources.uiRight.width, buttonSize/Resources.uiRight.height);\n        this.rightButton.setHeight(buttonSize);\n        this.rightButton.setWidth(buttonSize);\n\n        this.updateDisabled(disabled);\n    }\n\n    public updateDisabled = (isDisabled: boolean) => {\n        this.leftButtonSprite.clearEffects();\n        this.rightButtonSprite.clearEffects();\n        if(isDisabled) {\n            const disColor = Color.Gray;\n            this.topLabel.color = disColor\n            this.numberLabel.color = disColor;\n            this.leftButtonSprite.addEffect(new Colorize(disColor));\n            this.rightButtonSprite.addEffect(new Colorize(disColor));\n            this.leftButton.setDisabled(true);\n            this.rightButton.setDisabled(true);\n        } else {\n            this.topLabel.color = Color.Black;\n            this.numberLabel.color = Color.Black;\n            this.leftButton.setDisabled(false);\n            this.rightButton.setDisabled(false);\n        }\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Label, Color, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { MainMenu } from './mainMenu';\nimport RadioButton from '../actors/bars/radioButton';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SoundManager from '../engine/soundManager';\nimport SizingManager from '../engine/sizingManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport { Consumer } from 'java8script';\n\nexport class Options extends ex.Scene {\n\n  private engine;\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n  private progressionToggle: LabeledRadio;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n    const itemSize = SizingManager.get().getUIItemSize();\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      this.onExit\n    );\n\n    const callbackForEnabling = this.addGridSize(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addSoundToggle(itemSize);\n    this.addTitle();\n    this.addProgressionToggle(itemSize, callbackForEnabling)\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n  }\n\n  private onExit = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    ProgressionManager.get().setProgressionDisabled(!this.progressionToggle.isChecked());\n    if (this.sound.isChecked()) {\n      SoundManager.get().enableSound();\n    } else {\n      SoundManager.get().disableSound();\n    }\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.optionTitle, 0.6, 1);\n    const sprite = Resources.optionTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth/2;\n    title.y = dims.height/2+ Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale; \n    this.add(title);\n  }\n  \n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 - itemSize*2.5 - Config.optionPadding, true, this.engine);\n\n    this.sound.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 - itemSize*0.5 - Config.optionPadding, itemSize, false);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addProgressionToggle(itemSize, toggleCallback: Consumer<boolean>) {\n    this.progressionToggle = new LabeledRadio(\"Story Mode\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 + itemSize*1 + Config.optionPadding, true, this.engine, toggleCallback);\n\n    this.progressionToggle.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  //returns callback for toggling the objects\n  private addGridSize(itemSize): Consumer<boolean> {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 + itemSize*3 + Config.optionPadding, itemSize, true);\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n\n      return this.gridSize.updateDisabled;\n  }\n\n  public onActivate() {\n    this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel());\n    //todo update sound based on player settings\n    //todo update story mode based on toggle\n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport {calcDimensionsSingleObjectTexture, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1.5)\n    victoryActor.setHeight(engine.drawHeight);// set height/width so you can tap anywhere on the screen\n    victoryActor.setWidth(engine.drawWidth);\n    victoryActor.scale = dims.scale;\n    victoryActor.on('pointerup', safePointerUp(() => {\n      ProgressionManager.get().progress();\n      this.engine.goToScene(Scenes.GAME_WINDOW);\n    }));\n    this.add(victoryActor);\n    this.add(new BackgroundManager(engine).getTileMap())\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine, Actor } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n\n\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    const dims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = dims.scale;\n    gameOverActor.on('pointerup', safePointerUp(() => {\n      ProgressionManager.get().resetProgress();\n      this.engine.goToScene(Scenes.MAIN_MENU);\n    }));\n    this.add(new BackgroundManager(engine).getTileMap())\n\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      suppressPlayButton: true //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport SoundManager from '../engine/soundManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(Scenes.GAME_WINDOW),\n    );\n    this.sizeProperly(this.start, 0.4, 0.5, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => this.game.goToScene(Scenes.OPTIONS),\n    );\n    this.sizeProperly(this.options, 0.4, 0.5, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => this.game.goToScene(Scenes.HELP),\n    );\n    this.sizeProperly(this.help, 0.4, 0.5, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.title.addDrawing(Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicEnd();\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\nimport ProgressionManager from \"../../engine/progression/progressionManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return ProgressionManager.get().isProgressionDisabled() ? \"\" :`${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport ProgressionManager from \"./progressionManager\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\nexport default class PlayerSettingsManager {\n    public static singleton: PlayerSettingsManager;\n    private static DEFAULT: PlayerSettingsManager = new PlayerSettingsManager(false, false, Difficulty.VERY_EASY, 3, 3, Difficulty.NORMAL, 1, 1);\n    //Settings\n    private soundOff: boolean;\n    private progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    public readonly maxLevel: number;\n    public readonly maxDifficulty: Difficulty;\n\n    //Progression\n    private currentLevel: number;\n    private currentStage: number;\n\n    private constructor(toggleSound, progressionDisabled, chosenDiff, chosenGridSize, maxLevel, maxDiff, currentLevel, currentStage) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty  = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxLevel = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n    }    \n\n    public static get(): PlayerSettingsManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = PlayerSettingsManager.DEFAULT;\n            return this.singleton;\n        }\n    }\n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public  getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n\n    public setProgressionDisabled(isProgDisabled: boolean) {\n        this.progressionDisabled = isProgDisabled;\n    }\n\n    public isProgressionDisabled(): boolean {\n        return this.progressionDisabled;\n    }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"00f14d085530ea0ae58c17a32b3fe27f.wav\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"1b708fab0fb46c4291e239a822e3d553.png\";","module.exports = __webpack_public_path__ + \"5bbe8e44117d6281e0990e5a0213c814.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"6f20cd91097c8be0d36eaad2bf6244ec.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport SizingManager from \"../../engine/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport { Config } from \"../resources\";\nimport SizingManager from \"../engine/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/sizingManager\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const mm: SizingManager = SizingManager.get();\n        const coordinator: GameCoordinator = new GameCoordinator(\n            engine,\n            NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword)\n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, ProgressionManager.get().getGameGridSize(), engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n        }\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinator } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport SoundManager from '../engine/soundManager';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { Actor, Engine, Color, Texture, Vector } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { Scenes } from './scenes';\nimport LevelDisplay from '../actors/bars/level';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport SizingManager from '../engine/sizingManager';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator: GameCoordinator;\n  private engine: Engine;\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    /*\n    const bar = new Actor();\n    bar.y = Config.menuHeight;\n    bar.x = this.engine.drawWidth/2;\n    bar.setHeight(1);\n    bar.setWidth(this.engine.drawWidth)\n    bar.color = Color.Red;\n    bar\n    this.add(bar);//todo remove\n    */\n\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n\n    //todo move this to be actually score keeper\n    /*\n    const coins: Actor = new Actor();\n    coins.addDrawing(Resources.uiCoins);\n    coins.scale = new Vector(Config.uiItemSize / Resources.uiCoins.width, Config.uiItemSize / Resources.uiCoins.height);\n    coins.x = Config.uiItemSize / 2;\n    coins.y = Config.uiItemSize * 2.5;\n    this.add(coins);\n    */\n\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth / 2, mm.getMenuHeight() - mm.getUIItemSize() / 2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n\n  }\n\n  public onActivate() {\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n\n    SoundManager.get().backgroundMusicStart();\n    const coordinator: GameCoordinator = GameCoordinator.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n\n    //cordova specific\n    //document.addEventListener(\"backbutton\", this.onBackButton);\n  }\n\n  private onBackButton = () => this.engine.goToScene(Scenes.MAIN_MENU);\n\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n\n    //document.removeEventListener(\"backbutton\", this.onBackButton);\n  }\n} \n","import { GameWindow } from './scenes/gameWindow';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/sizingManager';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, new Options(game));\ngame.add(Scenes.HELP, new Help(game));\n\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  SizingManager.initialize(game);\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}