{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/engine/sizingManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/fontManager.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/images/title.png","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/engine/progression/playerSettings.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/button.wav","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/myMono.png","webpack:///./src/images/helpTitle.png","webpack:///./src/images/optionTitle.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/helpMenu.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/gameWindow.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","optionTitle","helpTitle","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","buttonSound","backgroundTile","Resources","Texture","gameOver","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","t","e","Scenes","GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","difficulty_1","playerSettings_1","ProgressionManager","playerSettings","this","singleton","DEFAULT","getGameGridSize","ps","progressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","maxLevel","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","difficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","resetProgress","getLevelString","resources_1","SoundManager","disabled","soundManager","disableSound","backgroundSound","stop","enableSound","backgroundMusicStart","volume","loop","play","backgroundMusicEnd","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","SizingManager","engine","initialize","console","log","isMobile","drawWidth","getUIItemSize","getMenuHeight","excalibur_1","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","maxScale","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","width","height","scale","Vector","calcDimensionsSingleObjectTexture","texture","safePointerUp","onClick","event","ev","type","BackgroundManager","tile","numberOfCols","Math","ceil","numberOfRows","drawHeight","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","__extends","setPrototypeOf","__proto__","Array","constructor","create","SpriteEffects_1","soundManager_1","helpers_1","ButtonBase","_super","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","addDrawing","on","EventTypes","PointerUp","onClickWrapper","Actor","FontManager","generalMono","SpriteFont","getMono","CardType","progressionManager_1","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","java8script_1","difficultyLevel","buff","text","buffFactor","skeletonFactor","difficultyName","getDifficultyLevel","level","Stream","of","VERY_EASY","EASY","NORMAL","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","scenes_1","buttonBase_1","backgroundManager_1","Help","onInitialize","bgManager","addTileMap","exitT","exit","goToScene","add","addTitle","onActivate","onDeactivate","asSprite","Scene","RadioButton","size","defaultValue","currentSprite","toggleButton","checked","checkedSprite","uncheckedSprite","isChecked","radioButton_1","fontManager_1","LabeledRadio","label","defaultVal","Label","fontSize","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","labelWidth","getTextWidth","ctx","radio","getDrawables","u","NumberSelector","min","max","current","labelText","topLabel","numberLabel","leftButton","addBy","rightButton","nextCurrent","getCurrent","setCurrent","newCurrent","a","numberSelector_1","labeledRadio_1","Options","arguments","gridSize","itemSize","addGridSize","addDifficultySize","addSoundToggle","forEach","Victory","victoryActor","GameOver","gameOverActor","playerIdleAnimation","getAnimationForAll","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","suppressPlayButton","start","loader","Engine","MainMenu","game","sizeProperly","options","help","placeActors","actor","padding","resource","getHeight","LevelDisplay","startingLevel","createLabelText","PREFIX","updateLevel","newLevel","card_1","Count","index","initialCount","setCount","leftSide","top","count","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","map","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","PlayerSettings","toggleSound","chosenDiff","chosenGridSize","maxDiff","soundOff","chosenDifficulty","maxDifficulty","newStage","difficutly","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","GameCoordinator","healthCoordinator","attackCoordinator","updateLabels","checkIfCompleteGame","mm","coordinator","gridCoordinator","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","skeletonCountForCol","skeletonCountForRow","allMatch","coordinator_1","level_1","GameWindow","onBackButton","levelDisplay","remove","gameWindow_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","mainMenu","keys","k","addResource"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([251,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst helpMenu = require('./images/helpMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\nconst optionTitle = require('./images/optionTitle.png');\nconst helpTitle = require('./images/helpTitle.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\nconst buttonSound = require('./sounds/button.wav');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    optionTitle: new ex.Texture(optionTitle),\n    helpTitle: new ex.Texture(helpTitle),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n\n    myMono: new ex.Texture(fontMono),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    buttonSound: new ex.Sound(buttonSound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport { Resources, Config, uiHeart}\n","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}","import { Difficulty } from \"./difficulty\";\nimport PlayerSettings from \"./playerSettings\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private playerSettings: PlayerSettings;\n\n    private constructor(playerSettings: PlayerSettings) {\n        this.playerSettings = playerSettings;\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager(\n                PlayerSettings.DEFAULT\n            );\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = this.playerSettings;\n        if(ps.progressionDisabled) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return this.playerSettings.getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return this.playerSettings.getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public progress(): void {\n        const currentLevel = this.playerSettings.getCurrentLevel();\n        const currentStage = this.playerSettings.getCurrentStage();\n\n        if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n            //on the last stage of the level, need to find out if we can move on or just move up stages\n            if(currentLevel === this.playerSettings.maxLevel) {\n                // on the max upgraded level just increase stage\n                this.playerSettings.setCurrentStage(currentStage + 1);\n            } else {\n                this.playerSettings.setCurrentStage(1);\n                this.playerSettings.setCurrentLevel(currentLevel + 1);\n            }\n        } else {\n            //move on to the next stage, no extra logic\n            this.playerSettings.setCurrentStage(currentStage + 1);\n        }  \n    }\n\n\n    public setGridSize(newSize: number) {\n        this.playerSettings.setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        this.playerSettings.setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public resetProgress(): void {\n        const ps = this.playerSettings;\n        if (!ps.progressionDisabled) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        if (this.playerSettings.getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${this.playerSettings.getCurrentLevel()}.${this.playerSettings.getCurrentStage()}`;\n        }\n    }\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n    private disabled: boolean = false;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        this.disabled = true;\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public enableSound() {\n        this.disabled = false;\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.disabled) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.volume = 0.1;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play();\n            }\n        }\n    }\n\n    public backgroundMusicEnd(): void {\n        if(!this.disabled) {\n            if (this.backgroundSound) {\n                this.backgroundSound.stop();\n                this.backgroundSound = null;\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!this.disabled) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import { Engine } from \"excalibur\";\n\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 768; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 3;\n    }\n\n}","import { Texture, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n\n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nfunction safePointerUp(onClick: Supplier<void>): (event?: any) => void {\n    return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                onClick();\n            }\n    }\n}\n\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture,\n    safePointerUp\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(engine: Engine) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(engine.drawWidth / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(engine.drawHeight / tile.height); \n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows*numberOfCols; row++) {\n\n                tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    public getTileMap(): TileMap {\n        return this.tileMap;\n    }\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport SoundManager from \"../../engine/soundManager\";\nimport { Resources } from \"../../resources\";\nimport { safePointerUp } from \"../../engine/helpers\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>) {\n        super();\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return  safePointerUp(() => {\n            this.sprite.clearEffects();\n            SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n            onClick();\n        });\n    }\n\n    private onDown: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.sprite.clearEffects();\n    }\n\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/sizingManager';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight()/2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\n\nexport class Help extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n    this.addTitle();\n  }\n  \n  public onActivate() {\n  }\n  \n  public onDeactivate() {\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.helpTitle, 0.6, 2);\n    const sprite = Resources.helpTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth/2;\n    title.y = dims.height/2+ Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale; \n    this.add(title);\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier } from \"java8script\";\nimport SoundManager from \"../../engine/soundManager\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound)\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, SpriteFont, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine) {\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = size;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        console.log(`labelwidth ${labelWidth}`)\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(size, x+labelWidth*(2/3), y, defaultVal);\n        \n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButton: Actor;\n    private rightButton: Actor;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = this.fontSize;\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+fontSize, null, FontManager.get().getMono());\n        //this.numberLabel.anchor = new Vector(1, 1);\n        this.numberLabel.fontSize = this.fontSize;\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButton.x = x - this.fontSize*1.5\n        this.leftButton.y = y + fontSize;\n        this.leftButton.scale = new Vector(this.fontSize/Resources.uiLeft.width, this.fontSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(this.fontSize);\n        this.leftButton.setWidth(this.fontSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButton.x = x + this.fontSize*1.5;\n        this.rightButton.y = y + fontSize;\n        this.rightButton.scale = new Vector(this.fontSize/Resources.uiRight.width, this.fontSize/Resources.uiRight.height);\n        this.rightButton.setHeight(this.fontSize);\n        this.rightButton.setWidth(this.fontSize);\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Label, Color, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { MainMenu } from './mainMenu';\nimport RadioButton from '../actors/bars/radioButton';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SoundManager from '../engine/soundManager';\nimport SizingManager from '../engine/sizingManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\n\nexport class Options extends ex.Scene {\n\n  private engine;\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n    const itemSize = SizingManager.get().getUIItemSize();\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      this.onExit\n    );\n\n    this.addGridSize(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addSoundToggle(itemSize);\n    this.addTitle();\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n  }\n\n  private onExit = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    if (this.sound.isChecked()) {\n      SoundManager.get().enableSound();\n    } else {\n      SoundManager.get().disableSound();\n    }\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.optionTitle, 0.6, 2);\n    const sprite = Resources.optionTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth/2;\n    title.y = dims.height/2+ Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale; \n    this.add(title);\n  }\n  \n  private addGridSize(itemSize): void {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2, this.engine.drawHeight / 2, itemSize);\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2, this.engine.drawHeight / 2 + itemSize*2 + Config.optionPadding, itemSize);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\", itemSize, this.engine.drawWidth/2, this.engine.drawHeight/2 - itemSize - Config.optionPadding, true, this.engine);\n\n    this.sound.getDrawables()\n    .forEach(e => this.add(e));\n  }\n\n  public onActivate() {\n    this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel()); \n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport {calcDimensionsSingleObjectTexture, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1.5)\n    victoryActor.setHeight(engine.drawHeight);// set height/width so you can tap anywhere on the screen\n    victoryActor.setWidth(engine.drawWidth);\n    victoryActor.scale = dims.scale;\n    victoryActor.on('pointerup', safePointerUp(() => {\n      ProgressionManager.get().progress();\n      this.engine.goToScene(Scenes.GAME_WINDOW);\n    }));\n    this.add(victoryActor);\n    this.add(new BackgroundManager(engine).getTileMap())\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine, Actor } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n\n\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    const dims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = dims.scale;\n    gameOverActor.on('pointerup', safePointerUp(() => {\n      ProgressionManager.get().resetProgress();\n      this.engine.goToScene(Scenes.MAIN_MENU);\n    }));\n    this.add(new BackgroundManager(engine).getTileMap())\n\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      suppressPlayButton: true //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport SoundManager from '../engine/soundManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(Scenes.GAME_WINDOW),\n    );\n    this.sizeProperly(this.start, 0.4, 0.5, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => this.game.goToScene(Scenes.OPTIONS),\n    );\n    this.sizeProperly(this.options, 0.4, 0.5, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => this.game.goToScene(Scenes.HELP),\n    );\n    this.sizeProperly(this.help, 0.4, 0.5, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.title.addDrawing(Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicEnd();\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return `${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport ProgressionManager from \"./progressionManager\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\nexport default class PlayerSettings {\n    public static DEFAULT: PlayerSettings = new PlayerSettings(false, false, Difficulty.VERY_EASY, 3, 3, Difficulty.NORMAL, 1, 1);\n    //Settings\n    public readonly soundOff: boolean;\n    public readonly progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    public readonly maxLevel: number;\n    public readonly maxDifficulty: Difficulty;\n\n    //Progression\n    private currentLevel: number;\n    private currentStage: number;\n\n    private constructor(toggleSound, progressionDisabled, chosenDiff, chosenGridSize, maxLevel, maxDiff, currentLevel, currentStage) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty  = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxLevel = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n    }    \n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public  getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"00f14d085530ea0ae58c17a32b3fe27f.wav\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"1b708fab0fb46c4291e239a822e3d553.png\";","module.exports = __webpack_public_path__ + \"5bbe8e44117d6281e0990e5a0213c814.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"6f20cd91097c8be0d36eaad2bf6244ec.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport { Config } from \"../../resources\";\nimport SizingManager from \"../../engine/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport { Config } from \"../resources\";\nimport SizingManager from \"../engine/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/sizingManager\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const mm: SizingManager = SizingManager.get();\n        const coordinator: GameCoordinator = new GameCoordinator(\n            engine,\n            NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword)\n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, ProgressionManager.get().getGameGridSize(), engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n        }\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinator } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport SoundManager from '../engine/soundManager';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { Actor, Engine, Color, Texture, Vector } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { Scenes } from './scenes';\nimport LevelDisplay from '../actors/bars/level';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport SizingManager from '../engine/sizingManager';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator: GameCoordinator;\n  private engine: Engine;\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    /*\n    const bar = new Actor();\n    bar.y = Config.menuHeight;\n    bar.x = this.engine.drawWidth/2;\n    bar.setHeight(1);\n    bar.setWidth(this.engine.drawWidth)\n    bar.color = Color.Red;\n    bar\n    this.add(bar);//todo remove\n    */\n\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n\n    exit.scale = new Vector(Config.exitButtonSize / exitT.width, Config.exitButtonSize / exitT.height);\n    exit.setHeight(Config.exitButtonSize);\n    exit.setWidth(Config.exitButtonSize);\n    exit.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n    exit.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    this.add(exit);\n\n    //todo move this to be actually score keeper\n    /*\n    const coins: Actor = new Actor();\n    coins.addDrawing(Resources.uiCoins);\n    coins.scale = new Vector(Config.uiItemSize / Resources.uiCoins.width, Config.uiItemSize / Resources.uiCoins.height);\n    coins.x = Config.uiItemSize / 2;\n    coins.y = Config.uiItemSize * 2.5;\n    this.add(coins);\n    */\n\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth/2, mm.getMenuHeight()-mm.getUIItemSize()/2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n  }\n\n  public onActivate() {\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n\n    SoundManager.get().backgroundMusicStart();\n    const coordinator: GameCoordinator = GameCoordinator.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n\n    //cordova specific\n    //document.addEventListener(\"backbutton\", this.onBackButton);\n  }\n\n  private onBackButton = () => this.engine.goToScene(Scenes.MAIN_MENU);\n\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n\n    //document.removeEventListener(\"backbutton\", this.onBackButton);\n  }\n} \n","import { GameWindow } from './scenes/gameWindow';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/sizingManager';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, new Options(game));\ngame.add(Scenes.HELP, new Help(game));\n\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  SizingManager.initialize(game);\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}