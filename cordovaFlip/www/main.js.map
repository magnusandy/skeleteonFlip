{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/engine/managers/sizingManager.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/managers/soundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/engine/managers/fontManager.ts","webpack:///./src/engine/progression/playerSettingsManager.ts","webpack:///./src/actors/bars/exitButton.ts","webpack:///./src/engine/managers/backgroundManager.ts","webpack:///./src/scenes/BaseScene.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/engine/progression/gridState.ts","webpack:///./src/scenes/gameWindows/gameWindowBase.ts","webpack:///./src/modal/modal.tsx","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/title.png","webpack:///./src/images/sword.png","webpack:///./src/images/skull.png","webpack:///./src/images/potion.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/coin.png","webpack:///./src/actors/upgrades/upgradeWidget.ts","webpack:///./src/scenes/upgrades.ts","webpack:///./src/scenes/gameWindows/gridGameWindow.ts","webpack:///./src/actors/bars/coinCount.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/scenes/gameWindows/storyGameWindow.ts","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/game/GameLoader.ts","webpack:///./src/engine/game/Game.ts","webpack:///./src/actors/bars/scrollBar.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/sounds/button.wav","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/fonts/myMono.png","webpack:///./src/images/victory.png","webpack:///./src/images/upgradesTitle.png","webpack:///./src/images/upgrades/grid.png","webpack:///./src/images/upgrades/difficulty.png","webpack:///./src/images/ui/scroll.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/coin.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/optionTitle.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/menu/upgrade.png","webpack:///./src/images/menu/start.png","webpack:///./src/images/menu/playing.png","webpack:///./src/images/menu/options.png","webpack:///./src/images/menu/next.png","webpack:///./src/images/menu/menu.png","webpack:///./src/images/menu/intro.png","webpack:///./src/images/menu/help.png","webpack:///./src/images/menu/credits.png","webpack:///./src/images/menu/confirm.png","webpack:///./src/images/menu/cards.png","webpack:///./src/images/icon-512.png","webpack:///./src/images/icon-192.png","webpack:///./src/images/helpTitle.png","webpack:///./src/images/card.png","webpack:///./src/images/background.png","webpack:///./src/images/background.old.png","webpack:///./src/images/GameOver.png","webpack:///./src/images sync ^\\.\\/.*$","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","reqImg","imgpath","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","cardsMenu","introMenu","creditsMenu","playingMenu","confirmMenu","nextMenu","menuMenu","upgradeMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","uiScroll","optionTitle","helpTitle","upgradeTitle","gridTile","difficultyTile","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","buttonSound","backgroundTile","Resources","Texture","gameOver","cardMenu","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","t","e","SizingManager","engine","this","initialize","singleton","console","log","isMobile","drawWidth","getUIItemSize","getUIButtonSizing","padding","maxScale","getMenuHeight","difficulty_1","playerSettingsManager_1","ProgressionManager","getGameGridSize","ps","isProgressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","maxLevel","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","difficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","setProgressionDisabled","isProgressDisabled","resetProgress","getLevelString","Scenes","progressionManager_1","STORY_GAME_WINDOW","GRID_GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","UPGRADES","getGameWindow","SpriteEffects_1","soundManager_1","resources_1","helpers_1","ButtonBase","_super","texture","onClick","disabled","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","width","height","addDrawing","on","EventTypes","PointerUp","onClickWrapper","__extends","getSprite","safePointerUp","playSoundInterrupt","setDisabled","Actor","SoundManager","soundManager","disableSound","backgroundSound","stop","backgroundMusicStart","isSoundOff","volume","loop","play","backgroundMusicEnd","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","event","ev","type","FontManager","generalMono","SpriteFont","getMono","java8script_1","localForage","gridState_1","PlayerSettingsManager","toggleSound","progressionDisabled","chosenDiff","chosenGridSize","maxDiff","storyGrid","practiceGrid","totalCoins","soundOff","chosenDifficulty","maxDifficulty","config","version","size","storeName","description","getItem","STORE_KEY","v","DEFAULT","saveData","deserializeV1","saveGridState","gridState","Optional","ofNullable","saveToStorage","getGridState","newCurrent","newStage","gridSize","difficutly","setIsSoundOff","isProgDisabled","getTotalCoins","setTotalCoins","newTotal","serializeV1","getDifficultyLevel","map","g","toSaveState","orElse","save","GridState","fromSaveState","setItem","VERY_EASY","NORMAL","empty","buttonBase_1","ExitButton","setHeight","setWidth","x","y","BackgroundManager","tile","numberOfCols","Math","ceil","numberOfRows","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","getDefaultTileMap","drawHeight","getCustomTileMap","setPrototypeOf","__proto__","Array","constructor","create","backgroundManager_1","scrollBar_1","BaseScene","scrollBar","add","setBackround","bottomOfBottomElement","addTileMap","initScroll","setScrollBottom","camera","strategy","lockToActorAxis","Axis","Y","createButton","dims","button","Scene","CardType","ex","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","calcCardDimensions","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","silentSetFlipped","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","callbackProvider","skeletonCardCallback","attackCardCallback","coinCardCallback","potionCardCallback","grid","hearts","swords","coins","getGridSize","getHearts","getSwords","getCoins","Stream","ofValues","cardState","toArray","CardState","getType","coordinator_1","scenes_1","exitButton_1","GameWindowBase","onInitialize","goToScene","coordinator","GameCoordinator","onActivate","getAllActors","forEach","onDeactivate","remove","React","ReactModal","react_dom_1","xButton","skullImage","swordImage","potionImage","coinImage","heartUIImg","swordUIImage","threeImage","styles","margin","fontSize","flex","textAlign","h1","holder","imgHolder","cardImg","ModalRenderer","isOpen","setOpenAndRerender","innerStuff","render","open","closeFunc","props","createElement","E","__assign","document","getElementById","upgradeMaxGridModal","currentMax","price","style","onClickAndClose","onclick","introModal","howToPlayModal","src","alt","cardModal","textModal","text","content","borderRadius","borderWidth","borderColor","appElement","float","position","right","top","onPointerUp","borderStyle","minHeight","display","Component","difficultyLevel","buff","buffFactor","skeletonFactor","difficultyName","level","of","EASY","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","modal_1","fontManager_1","UpgradeWidget","tileDims","tileTexture","label","details","tileButton","Label","getRight","baseAlign","BaseAlign","Middle","TextAlign","Left","getDrawables","getBottom","BaseScene_1","upgradeWidget_1","Upgrades","coinsLabel","playercoinsLabel","sizing","gridButton","alert","asSprite","coinsLabelString","Center","gameWindowBase_1","GridGameWindow","currentOptionGridSize","resetGame","CoinCount","currentCount","countIcon","countLabel","coinCount","coinIcon","coinActor","createCoinIcon","createCountLabel","getCoinCount","addToCoinCount","toAdd","drawables","actor","color","fromHex","card_1","Count","index","initialCount","setCount","leftSide","clone","count","GridCoordinator","skeletonCount","potionCount","swordCount","blankGrid","createGridFromState","state","loadSavedGrid","orElseGet","createNewGrid","coord","initializeSkeletons","initializeBuffs","currentGridState","cardStates","getGridAsList","flatMap","a","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","needMoreSkeletons","randomCoord","isCardACoin","insertCard","needMoreBuffs","generateBuffCard","initializeFromState","createdCard","random","floor","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getCurrent","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","coinCount_1","updateLabels","rowCounts","skeletonCountForRow","columnCounts","skeletonCountForCol","attackCoordinator","healthCoordinator","saveGridProgress","checkIfCompleteGame","shouldCreateFresh","mm","saveState","gs","gridCoordinator","createRowCountCards","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","allFlipped","allMatch","psm","progman","LevelDisplay","startingLevel","createLabelText","PREFIX","updateLevel","newLevel","level_1","StoryGameWindow","levelDisplay","Help","arguments","modalRenderer","titleDims","centerx","intro","playing","cards","credits","RadioButton","defaultValue","onToggle","currentSprite","toggleButton","checked","setCheckedDrawing","ifPresent","func","checkedSprite","uncheckedSprite","setOnToggle","isChecked","setChecked","radioButton_1","LabeledRadio","defaultVal","textSize","buttonSize","labelWidth","getTextWidth","ctx","radio","addOnToggle","NumberSelector","min","updateDisabled","isDisabled","leftButtonSprite","rightButtonSprite","disColor","topLabel","numberLabel","Colorize","leftButton","rightButton","Black","labelText","addBy","nextCurrent","setCurrent","numberSelector_1","labeledRadio_1","Options","onConfirm","progressionToggle","itemSize","addTitle","addSoundToggle","addDifficultySize","addProgressionToggle","callbackForEnabling","addGridSize","createbuttonDims","createButtonY","Victory","onNext","buttonDims","imageDims","offset","victoryActor","nextButton","GameOver","onMenu","gameOverActor","playerIdleAnimation","getAnimationForAll","menuButton","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","pointerScope","Input","PointerScope","Canvas","suppressPlayButton","start","loader","Engine","ScrollBar","isDragging","scrollBarBotton","scrollBarTop","pe","worldY","pointer","lastWorldPos","num","visible","MainMenu","centerX","upgrades","options","help","./GameOver.png","./background.old.png","./background.png","./card.png","./coin.png","./helpTitle.png","./icon-192.png","./icon-512.png","./menu/cards.png","./menu/confirm.png","./menu/credits.png","./menu/help.png","./menu/intro.png","./menu/menu.png","./menu/next.png","./menu/options.png","./menu/playing.png","./menu/start.png","./menu/upgrade.png","./numbers/0.png","./numbers/1.png","./numbers/2.png","./numbers/3.png","./numbers/4.png","./numbers/5.png","./numbers/6.png","./numbers/7.png","./numbers/8.png","./numbers/9.png","./optionTitle.png","./potion.png","./skull.png","./sword.png","./title.png","./ui/blank.png","./ui/coin.png","./ui/coinPile.png","./ui/heart.png","./ui/left.png","./ui/right.png","./ui/scroll.png","./ui/sword.png","./ui/x.png","./upgrades/difficulty.png","./upgrades/grid.png","./upgradesTitle.png","./victory.png","webpackContext","req","id","webpackContextResolve","code","keys","resolve","mainMenu_1","Game_1","GameLoader_1","gameOver_1","victory_1","options_1","help_1","storyGameWindow_1","gridGameWindow_1","upgrades_1","game","mainMenu","k","addResource"],"mappings":"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AAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAAA5F,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAsF,EAAAC,EAA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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([301,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Texture, Sound } from \"excalibur\";\n\nconst reqImg = (imgpath: string) => require(`./images/${imgpath}`);\n\nconst sword = reqImg('sword.png');\nconst skull = reqImg('skull.png');\nconst potion = reqImg('potion.png');\nconst coin = reqImg('coin.png');\nconst card = reqImg('card.png');\nconst startMenu = reqImg('menu/start.png');\nconst optionMenu = reqImg('menu/options.png');\nconst helpMenu = reqImg('menu/help.png');\nconst cardsMenu = reqImg('menu/cards.png');\nconst introMenu = reqImg('menu/intro.png');\nconst creditsMenu = reqImg('menu/credits.png');\nconst playingMenu = reqImg('menu/playing.png');\nconst confirmMenu = reqImg('menu/confirm.png');\nconst nextMenu = reqImg('menu/next.png');\nconst menuMenu = reqImg('menu/menu.png');\nconst upgradeMenu = reqImg('menu/upgrade.png');\n\nconst title = reqImg('title.png');\nconst gameOverImg = reqImg('GameOver.png');\nconst zero = reqImg('numbers/0.png');\nconst one = reqImg('numbers/1.png');\nconst two = reqImg('numbers/2.png');\nconst three = reqImg('numbers/3.png');\nconst four = reqImg('numbers/4.png');\nconst five = reqImg('numbers/5.png');\nconst six = reqImg('numbers/6.png');\nconst seven = reqImg('numbers/7.png');\nconst eight = reqImg('numbers/8.png');\nconst nine = reqImg('numbers/9.png');\n\nconst uiSword = reqImg('ui/sword.png');\nconst uiHeart = reqImg('ui/heart.png');\nconst uiCoins = reqImg('ui/coinPile.png');\nconst uiLeft = reqImg('ui/left.png');\nconst uiRight = reqImg('ui/right.png');\nconst uiX = reqImg('ui/x.png');\nconst uiBlank = reqImg('ui/blank.png');\nconst uiScroll = reqImg('ui/scroll.png');\n\nconst optionTitle = reqImg('optionTitle.png');\nconst helpTitle = reqImg('helpTitle.png');\nconst upgradeTitle = reqImg('upgradesTitle.png');\n\nconst gridTile = reqImg('upgrades/grid.png');\nconst difficultyTile = reqImg('upgrades/difficulty.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = reqImg('victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\nconst buttonSound = require('./sounds/button.wav');\n\nconst backgroundTile = reqImg('background.png');\n\nconst Resources = {\n    victory: new Texture(victory),\n    gameOver: new Texture(gameOverImg),\n    title: new Texture(title),\n    sword: new Texture(sword),\n    skull: new Texture(skull),\n    potion: new Texture(potion),\n    coin: new Texture(coin),\n    card: new Texture(card),\n\n    startMenu: new Texture(startMenu),\n    optionMenu: new Texture(optionMenu),\n    helpMenu: new Texture(helpMenu),\n    cardMenu: new Texture(cardsMenu),\n    introMenu: new Texture(introMenu),\n    creditsMenu: new Texture(creditsMenu),\n    playingMenu: new Texture(playingMenu),\n    confirmMenu: new Texture(confirmMenu),\n    nextMenu: new Texture(nextMenu),\n    menuMenu: new Texture(menuMenu),\n    upgradeMenu: new Texture(upgradeMenu),\n\n    optionTitle: new Texture(optionTitle),\n    helpTitle: new Texture(helpTitle),\n    backgroundTile: new Texture(backgroundTile),\n    upgradeTitle: new Texture(upgradeTitle),\n\n    0: new Texture(zero),\n    1: new Texture(one),\n    2: new Texture(two),\n    3: new Texture(three),\n    4: new Texture(four),\n    5: new Texture(five),\n    6: new Texture(six),\n    7: new Texture(seven),\n    8: new Texture(eight),\n    9: new Texture(nine),\n\n    uiSword: new Texture(uiSword),\n    uiHeart: new Texture(uiHeart),\n    uiLeft: new Texture(uiLeft),\n    uiRight: new Texture(uiRight),\n    uiX: new Texture(uiX),\n    uiBlank: new Texture(uiBlank),\n    uiCoins: new Texture(uiCoins),\n    uiScroll: new Texture(uiScroll),\n\n    gridTile: new Texture(gridTile),\n    difficultyTile: new Texture(difficultyTile),\n\n    myMono: new Texture(fontMono),\n\n    cardSound: new Sound(cardSound),\n    boneSound: new Sound(boneSound),\n    coinSound: new Sound(coinSound),\n    laughSound: new Sound(laughSound),\n    potionSound: new Sound(potionSound),\n    swordSound: new Sound(swordSound),\n    victorySound: new Sound(victorySound),\n    buttonSound: new Sound(buttonSound),\n    backgroundMusic: new Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport { Resources, Config, uiHeart }\n","import { Engine } from \"excalibur\";\n\nexport interface IButtonSizing {\n    padding: number, \n    maxScale: number\n}\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"ERROR: Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 1200; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getUIButtonSizing(): IButtonSizing {\n        return this.isMobile() \n        ? {padding: 0.4, maxScale: 0.3}\n        : {padding: 0.4, maxScale: 0.5}\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 4;\n    }\n\n}","import { Difficulty } from \"./difficulty\";\nimport PlayerSettingsManager from \"./playerSettingsManager\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private constructor() {\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager();\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = PlayerSettingsManager.get();\n        if(ps.isProgressionDisabled()) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return PlayerSettingsManager.get().getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return PlayerSettingsManager.get().getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public isProgressionDisabled() {\n        return PlayerSettingsManager.get().isProgressionDisabled();\n    }\n\n    public progress(): void {\n        if(!PlayerSettingsManager.get().isProgressionDisabled()) {\n            const currentLevel = PlayerSettingsManager.get().getCurrentLevel();\n            const currentStage = PlayerSettingsManager.get().getCurrentStage();\n    \n            if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n                //on the last stage of the level, need to find out if we can move on or just move up stages\n                if(currentLevel === PlayerSettingsManager.get().maxLevel) {\n                    // on the max upgraded level just increase stage\n                    PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n                } else {\n                    PlayerSettingsManager.get().setCurrentStage(1);\n                    PlayerSettingsManager.get().setCurrentLevel(currentLevel + 1);\n                }\n            } else {\n                //move on to the next stage, no extra logic\n                PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n            }  \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        PlayerSettingsManager.get().setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        PlayerSettingsManager.get().setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public setProgressionDisabled(isProgressDisabled: boolean) {\n        return PlayerSettingsManager.get().setProgressionDisabled(isProgressDisabled);\n    }\n\n    public resetProgress(): void {\n        const ps = PlayerSettingsManager.get();\n        if (!ps.isProgressionDisabled()) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        if (PlayerSettingsManager.get().getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${PlayerSettingsManager.get().getCurrentLevel()}.${PlayerSettingsManager.get().getCurrentStage()}`;\n        }\n    }\n}","import ProgressionManager from \"../engine/progression/progressionManager\";\n\nexport enum Scenes {\n    STORY_GAME_WINDOW = \"storyGameWindow\",\n    GRID_GAME_WINDOW = \"gridGameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n    UPGRADES = \"upgrades\"\n}\n\nexport function getGameWindow(): Scenes {\n    return ProgressionManager.get().isProgressionDisabled()\n        ? Scenes.GRID_GAME_WINDOW \n        : Scenes.STORY_GAME_WINDOW;\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport SoundManager from \"../../engine/managers/soundManager\";\nimport { Resources } from \"../../resources\";\nimport { safePointerUp } from \"../../engine/helpers\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n    private disabled: boolean;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>, disabled?: boolean) {\n        super();\n        this.disabled = disabled ? disabled : false;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    public getSprite():Sprite {\n        return this.sprite;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return safePointerUp(() => {\n            if (!this.disabled) {\n                this.sprite.clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n                onClick();\n            }\n        });\n    }\n\n    private onDown: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.2))\n        }\n\n    }\n\n    private onEnter: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.1))\n        }\n\n    }\n\n    private onExit: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n        }\n    }\n\n    public setDisabled(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport PlayerSettingsManager from \"../progression/playerSettingsManager\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public backgroundMusicStart(): void {\n        if (!PlayerSettingsManager.get().isSoundOff()) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.volume = 0.1;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play();\n            }\n        }\n    }\n\n    public backgroundMusicEnd(): void {\n        if(PlayerSettingsManager.get().isSoundOff()) {\n            if (this.backgroundSound) {\n                this.backgroundSound.stop();\n                this.backgroundSound = null;\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!PlayerSettingsManager.get().isSoundOff()) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import { Texture, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n\n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth * scaleToUse,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nfunction safePointerUp(onClick: Supplier<void>): (event?: any) => void {\n    return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                onClick();\n            }\n    }\n}\n\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture,\n    safePointerUp\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport * as localForage from \"localforage\";\nimport { CardType } from \"../../actors/card/card\";\nimport { GridState } from \"./gridState\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\n\ninterface SaveDataV1 {\n    version: number;\n    soundOff: boolean;\n    progressionDisabled: boolean;\n    chosenDifficulty: number; //difficulty level number\n    chosenGridSize: number;\n    maxLevel: number;\n    maxDifficulty: number; //difficulty level number\n    currentLevel: number;\n    currentStage: number;\n    storyGrid?: SaveDataGrid;\n    practiceGrid?: SaveDataGrid;\n    totalCoins: number;\n}\n\nexport interface SaveDataGrid {\n    hearts: number;\n    swords: number;\n    coins: number;\n    gridSize: number;\n    grid: SaveCellData[][];\n};\n\nexport interface SaveCellData {\n    type: CardType;\n    flipped: boolean;\n}\n\n\nexport default class PlayerSettingsManager {\n    private static STORE_KEY = 'player_settings_v1';\n    public static singleton: PlayerSettingsManager;\n    private static DEFAULT: PlayerSettingsManager = new PlayerSettingsManager(false, false, Difficulty.VERY_EASY, 3, 3, Difficulty.NORMAL, 1, 1, Optional.empty(), Optional.empty(), 0);\n\n\n    //Settings\n    private soundOff: boolean;\n    private progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    public readonly maxLevel: number; //unused atm\n    public readonly maxDifficulty: Difficulty; //unused atm\n\n    //Progression\n    private totalCoins: number; //total coins collected, outside of current games\n    private currentLevel: number;\n    private currentStage: number;\n    private storyGrid: Optional<GridState>;\n    private practiceGrid: Optional<GridState>;\n\n\n    private constructor(toggleSound: boolean,\n        progressionDisabled: boolean,\n        chosenDiff: Difficulty,\n        chosenGridSize: number,\n        maxLevel: number,\n        maxDiff: Difficulty,\n        currentLevel: number,\n        currentStage: number,\n        storyGrid: Optional<GridState>,\n        practiceGrid: Optional<GridState>,\n        totalCoins: number,\n    ) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxLevel = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n        this.storyGrid = storyGrid;\n        this.practiceGrid = practiceGrid;\n        this.totalCoins = totalCoins;\n    }\n\n    public static get(): PlayerSettingsManager {\n        return this.singleton;\n    }\n\n    public static initialize(): Promise<any> {\n        localForage.config({\n            name: 'skeletonFlip',\n            version: 1.0,\n            size: 4980736,\n            storeName: 'playerSettings',\n            description: 'Store save data'\n        });//try with no settings\n        return localForage.getItem(PlayerSettingsManager.STORE_KEY, (e, v) => {\n            console.log(`retrieved from storage:`, [v]);\n            if (e) {\n                console.log(`problem retrieving from store: ${e}`);\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else if (!v) {\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else {\n                const saveData: any = v;\n                if (saveData.version === 1) {\n                    this.singleton = PlayerSettingsManager.deserializeV1(saveData);\n                }\n            }\n        });\n    }\n    /** \n    * clear grid state\n    */\n    public saveGridState(): void;\n    /** \n     * clear grid state\n     */    \n    public saveGridState(gridState: GridState);\n    public saveGridState(gridState?: GridState): void {\n        if (this.isProgressionDisabled()) {\n            this.practiceGrid = Optional.ofNullable(gridState);\n        } else {\n            this.storyGrid = Optional.ofNullable(gridState);\n        }\n        this.saveToStorage();\n    }\n\n    public getGridState(): Optional<GridState> {\n        if (this.isProgressionDisabled()) {\n            return this.practiceGrid;\n        } else {\n            return this.storyGrid;\n        }\n    }\n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n        this.saveToStorage();\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n        this.saveToStorage();\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n        this.saveToStorage();\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n        this.saveToStorage();\n    }\n\n    public isSoundOff(): boolean {\n        return this.soundOff;\n    }\n\n    public setIsSoundOff(isSoundOff: boolean): void {\n        this.soundOff = isSoundOff;\n        this.saveToStorage();\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n\n    public setProgressionDisabled(isProgDisabled: boolean) {\n        this.progressionDisabled = isProgDisabled;\n        this.saveToStorage();\n    }\n\n    public isProgressionDisabled(): boolean {\n        return this.progressionDisabled;\n    }\n\n    public getTotalCoins(): number {\n        return this.totalCoins;\n    }\n\n    public setTotalCoins(newTotal: number): void {\n        this.totalCoins = newTotal;\n        this.saveToStorage();\n    }\n\n    private serializeV1(): SaveDataV1 {\n        return {\n            version: 1,\n            soundOff: this.soundOff,\n            progressionDisabled: this.progressionDisabled,\n            chosenDifficulty: this.chosenDifficulty.getDifficultyLevel(),\n            chosenGridSize: this.chosenGridSize,\n            maxLevel: this.maxLevel,\n            maxDifficulty: this.maxDifficulty.getDifficultyLevel(),\n            currentLevel: this.currentLevel,\n            currentStage: this.currentStage,\n            storyGrid: this.storyGrid.map(g => g.toSaveState()).orElse(null),\n            practiceGrid: this.practiceGrid.map(g => g.toSaveState()).orElse(null),\n            totalCoins: this.totalCoins,\n        }\n\n    }\n\n    private static deserializeV1(save: SaveDataV1): PlayerSettingsManager {\n        return new PlayerSettingsManager(\n            save.soundOff,\n            save.progressionDisabled,\n            Difficulty.getByDifficultyLevel(save.chosenDifficulty),\n            save.chosenGridSize,\n            save.maxLevel,\n            Difficulty.getByDifficultyLevel(save.maxDifficulty),\n            save.currentLevel,\n            save.currentStage,\n            Optional.ofNullable(save.storyGrid).map(s => GridState.fromSaveState(s)),\n            Optional.ofNullable(save.practiceGrid).map(s => GridState.fromSaveState(s)),\n            save.totalCoins\n        );\n    }\n\n    private saveToStorage() {\n        localForage.setItem(\n            PlayerSettingsManager.STORE_KEY,\n            this.serializeV1(),\n        );\n    }\n}","import ButtonBase from \"./buttonBase\";\nimport { Vector, Engine } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport { Supplier } from \"java8script\";\n\nexport class ExitButton extends ButtonBase {\n\n    public constructor(engine: Engine, onExit: Supplier<void>) {\n        const texture = Resources.uiX;\n        super(texture, onExit);\n        this.scale = new Vector(Config.exitButtonSize / texture.width, Config.exitButtonSize / texture.height);\n        this.setHeight(Config.exitButtonSize);\n        this.setWidth(Config.exitButtonSize);\n        this.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n        this.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    }\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(width: number, height: number) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(width / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(height / tile.height);\n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows * numberOfCols; row++) {\n\n            tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    private getTileMap(): TileMap {\n        return this.tileMap;\n    }\n\n    public static getDefaultTileMap(engine: Engine): TileMap {\n        return new BackgroundManager(engine.drawWidth, engine.drawHeight).getTileMap();\n    }\n\n    public static getCustomTileMap(width, height): TileMap {\n        return new BackgroundManager(width, height).getTileMap();\n    }\n}","import { Scene, Engine, Axis, Texture } from \"excalibur\";\nimport BackgroundManager from \"../engine/managers/backgroundManager\";\nimport { Config } from \"../resources\";\nimport ScrollBar from \"../actors/bars/scrollBar\";\nimport { IDimensions } from \"../engine/helpers\";\nimport ButtonBase from \"../actors/bars/buttonBase\";\n\nexport default class BaseScene extends Scene {\n\n    public scrollBar: ScrollBar;\n    public engine: Engine;\n\n    constructor(engine: Engine) {\n        super(engine);\n        this.engine = engine;\n        this.scrollBar = new ScrollBar(engine);\n        this.add(this.scrollBar);//for some reason adding in the initialize makes the drag stop working\n    }\n\n    public setBackround(bottomOfBottomElement: number) {\n        if (bottomOfBottomElement > this.engine.drawHeight) {\n            this.addTileMap(BackgroundManager.getCustomTileMap(this.engine.drawWidth, bottomOfBottomElement + Config.optionPadding));//need to draw to fit the whole canvas rather than just the screen \n        } else {\n            this.addTileMap(BackgroundManager.getDefaultTileMap(this.engine));\n        }\n    }\n\n    public initScroll(bottomOfBottomElement: number) {\n        this.scrollBar.setScrollBottom(this.engine.drawHeight / 2 + (bottomOfBottomElement - this.engine.drawHeight) + Config.optionPadding)\n        this.camera.strategy.lockToActorAxis(this.scrollBar, Axis.Y)\n    }\n\n    public createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n        const button = new ButtonBase(texture, onClick);\n        button.x = x\n        button.y = y\n        button.scale = dims.scale;\n        button.setHeight(dims.height);\n        button.setWidth(dims.width);\n        return button;\n    }\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/managers/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/managers/sizingManager';\nimport { CardCallbackProvider } from './cardCallbackProvider';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight() / 2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.silentSetFlipped();\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n\n    public silentSetFlipped() {\n        this.flipped = true;\n        this.setDrawing(\"flip\");\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n\n    public static create(screenCenter: ex.Vector, row: number, col: number, callbackProvider: CardCallbackProvider, type: CardType, flipped: boolean): Card {\n        let card: Card;\n        if (type === CardType.SKELETON) {\n            card = Card.skeleton(screenCenter, row, col, callbackProvider.skeletonCardCallback);\n        } else if (type === CardType.ATTACK) {\n            card = Card.attack(screenCenter, row, col, callbackProvider.attackCardCallback);\n        } else if (type === CardType.COIN) {\n            card = Card.coin(screenCenter, row, col, callbackProvider.coinCardCallback);\n        } else if (type === CardType.POTION) {\n            card = Card.potion(screenCenter, row, col, callbackProvider.potionCardCallback);\n        }\n\n        if (flipped) {\n            card.silentSetFlipped();\n        }\n        return card;\n    }\n}\n\n","import { CardType } from \"../../actors/card/card\";\nimport { SaveDataGrid, SaveCellData } from \"./playerSettingsManager\";\nimport { Stream } from \"java8script\";\n\nexport class GridState {\n    private hearts: number;\n    private swords: number;\n    private coins: number;\n    private gridSize: number;\n    private grid: CardState[][];\n\n    constructor(gridSize: number, grid: CardState[][], hearts: number, swords: number, coins: number) {\n        this.gridSize = gridSize;\n        this.grid = grid;\n        this.hearts = hearts;\n        this.swords = swords;\n        this.coins = coins;\n    }\n\n    public getGridSize(): number {\n        return this.gridSize;\n    }\n\n    public getGridState(): CardState[][] {\n        return this.grid;\n    }\n\n    public getHearts(): number {\n        return this.hearts;\n    }\n\n    public getSwords(): number {\n        return this.swords;\n    }\n\n    public getCoins(): number {\n        return this.coins;\n    }\n\n    public toSaveState(): SaveDataGrid {\n        const saveGridState: SaveCellData[][] = Stream.ofValues(...this.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(cardState => cardState.toSaveState())\n                .toArray())\n            .toArray();\n        return {\n            hearts: this.getHearts(),\n            swords: this.getSwords(),\n            coins: this.getCoins(),\n            gridSize: this.getGridSize(),\n            grid: saveGridState,\n        };\n    }\n\n    public static fromSaveState(save: SaveDataGrid): GridState {\n        const saveGridState: CardState[][] = Stream.ofValues(...save.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(cardState => CardState.fromSaveState(cardState))\n                .toArray())\n            .toArray();\n        return new GridState(save.gridSize, saveGridState, save.hearts, save.swords, save.coins);\n    }\n}\n\nexport class CardState {\n    private type: CardType;\n    private flipped: boolean;\n\n    constructor(type: CardType, flipped: boolean) {\n        this.type = type;\n        this.flipped = flipped;\n    }\n\n    public getType(): CardType {\n        return this.type;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public toSaveState(): SaveCellData {\n        return {\n            type: this.type,\n            flipped: this.flipped,\n        };\n    }\n\n    public static fromSaveState(save: SaveCellData): CardState {\n        return new CardState(\n            save.type,\n            save.flipped\n        );\n    }\n}","import { GameCoordinator } from '../../coordinator/coordinator';\nimport SoundManager from '../../engine/managers/soundManager';\nimport BackgroundManager from '../../engine/managers/backgroundManager';\nimport { Engine, Scene } from 'excalibur';\nimport { Scenes } from '../scenes';\nimport { ExitButton } from '../../actors/bars/exitButton';\n\nexport abstract class GameWindowBase extends Scene {\n\n  protected coordinator: GameCoordinator;\n  protected engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.coordinator = GameCoordinator.initialize(this.engine);\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    this.coordinator.getAllActors()\n      .forEach(c => this.add(c));\n  }\n\n  public onDeactivate() {\n    this.coordinator.getAllActors()\n      .forEach(c => this.remove(c));\n  }\n} \n","\nimport * as React from 'react';\nimport ReactModal = require('react-modal');\nimport { render } from 'react-dom';\nimport { Config } from '../resources';\nimport { TextAlignProperty } from 'csstype';\nimport { Supplier } from 'java8script';\nconst xButton = require('../images/ui/x.png');\nconst skullImage = require('../images/skull.png');\nconst swordImage = require('../images/sword.png');\nconst potionImage = require('../images/potion.png');\nconst coinImage = require('../images/coin.png');\nconst heartUIImg = require('../images/ui/heart.png');\nconst swordUIImage = require('../images/ui/sword.png');\nconst threeImage = require('../images/numbers/3.png');\n\ninterface Styles {\n    p: {\n        padding: string,\n        margin: string,\n        fontSize: number,\n        flex: number,\n        textAlign: TextAlignProperty,\n    },\n    h1: {\n        textAlign: TextAlignProperty,\n    },\n    holder: {\n        width: string,\n    }\n    imgHolder: {\n        width: string,\n        textAlign: TextAlignProperty,\n    }\n    cardImg: {\n        width: number,\n    }\n}\n\nconst styles: Styles = {\n    p: { padding: \"16px\", margin: \"0px\", fontSize: 20, flex: 1, textAlign: \"center\" },\n    h1: { textAlign: \"center\" },\n    holder: {\n        width: \"100%\"\n    },\n    imgHolder: {\n        width: \"100%\",\n        textAlign: \"center\"\n    },\n    cardImg: {\n        width: 100\n    }\n}\n\nexport class ModalRenderer {\n\n    private isOpen: boolean;\n    private static singleton;\n\n    public static get(): ModalRenderer {\n        if(!this.singleton) {\n            this.singleton = new ModalRenderer(false);\n        }\n        return this.singleton;\n    }\n\n    private constructor(isOpen: boolean) {\n        this.isOpen = isOpen;\n    }\n\n    public upgradeMaxGridModal(currentMax: number, price: number, onClick: Supplier<void>) {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>Increase Max Grid</h1>\n            <h2 style={styles.h1}>Price to Upgrade: {price}</h2>\n            <h2 style={styles.h1}>Current Max: {currentMax}</h2>\n            <p style={styles.p}>Progress to a harder challenge, increase the max grid size you can reach, both in story mode or set to practice in the options.</p>\n            <div style={styles.h1}>            \n                <button onClick={this.onClickAndClose(onClick)}>BUY</button>\n            </div>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    private onClickAndClose(onclick: Supplier<void>): Supplier<void> {\n        return () => {\n            onclick();\n            this.setOpenAndRerender(false);\n        }\n    }\n\n    public introModal() {\n        const innerStuff = (<div >\n            <h1 style={styles.h1}>Introduction</h1>\n            <p style={styles.p}>Welcome to Skeleton Flip!</p>\n            <p style={styles.p}>Flip cards, find coins, drink potions and kill skeletons. The goal of the game is to flip all the cards on the board without running out of hearts.</p>\n            <p style={styles.p}>In Story Mode, you progress through increasingly larger and larger grids, you can unlock larger grid sizes and harder difficulties by collecting coins and unlocking upgrades.</p>\n            <p style={styles.p}>If Story Mode is disabled, you may choose to practice any grid size you like.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public howToPlayModal() {\n        const innerStuff = (<div>\n            <h1 style={styles.h1}>How To Play</h1>\n            <p style={styles.p}>The top right of the game screen shows your health (<img width={20} src={heartUIImg} alt=\"heart\" />) and current attack (<img width={20} src={swordUIImage} alt=\"sword\" />). If you run out of health you lose!</p>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={threeImage} alt=\"three\" />\n            </div>\n            <p style={styles.p}>The numbers on the outer edges of the grid indicate how many skeletons are hiding in that row or column.</p>\n            <p style={styles.p}>Tap cards inside the grid to flip them over. Remember you need to flip every card in the grid to advance, so choose your path wisely!</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public cardModal() {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>Cards</h1>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={skullImage} alt=\"skull\" />\n            </div>\n            <p style={styles.p}>Oh no! Flipping over a skeleton card will hurt you, taking away one health unless you have a sword to defend yourself.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={swordImage} alt=\"sword\" />\n            </div>\n            <p style={styles.p}>Sweep Low! Flipping over a sword card will add to your attack count, no need to fear the next skeleton you flip over, the sword will take care of it!</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={potionImage} alt=\"potion\" />\n            </div>\n            <p style={styles.p}>Tastes like Strawberry! Flipping over a potion card will heal any wounds that you have taken from those nasty skeletons.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={coinImage} alt=\"coin\" />\n            </div>\n            <p style={styles.p}>Take that to the bank! Flipping over a coin card will add to your riches, if you complete a level you will keep the coins you found and can use them for upgrades.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public textModal(title: string, text: string) {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>{title}</h1>\n            <p style={styles.p}>\n                {text}\n            </p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    private setOpenAndRerender = (isOpen: boolean, innerStuff?: any) => {\n        this.isOpen = isOpen;\n        this.render({\n            innerStuff: innerStuff,\n            open: this.isOpen,\n            closeFunc: () => this.setOpenAndRerender(false)\n        });\n    }\n\n    private render = (props: Props) => {\n        render(<E {...props} />,\n            document.getElementById('modal')\n        );\n    }\n}\n\ninterface Props {\n    open: boolean;\n    closeFunc: () => void;\n    innerStuff?: any;\n}\n\ninterface State {\n}\n\nexport default class E extends React.Component<Props, State> {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <ReactModal\n                style={{\n                    content: {\n                        borderRadius: \"0px\",\n                        backgroundColor: '#a77600',\n                        borderWidth: 8,\n                        borderColor: \"#402f08\",\n                        padding: \"16px\",\n                    }\n                }}\n                appElement={document.getElementById('modal')}\n                isOpen={this.props.open}>\n                <div style={{ float: \"right\", height: Config.exitButtonSize, position: \"fixed\", right: \"24px\", top: \"24px\" }}>\n                    <a style={{}}>\n                        <img height={Config.exitButtonSize} width={Config.exitButtonSize} src={xButton} alt=\"exit\" onPointerUp={this.props.closeFunc} />\n                    </a>\n                </div>\n                <div style={{ borderRadius: \"16px\", borderStyle: \"solid\", borderWidth: \"4px\", minHeight: \"95%\", backgroundColor: \"#896000\", borderColor: \"#402f08\", display: \"flex\" }}>\n                    {this.props.innerStuff}\n                </div>\n            </ReactModal>\n        );\n    }\n}","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","import { Actor, Label, Texture, BaseAlign, TextAlign } from \"excalibur\";\nimport ButtonBase from \"../bars/buttonBase\";\nimport { calcDimensionsSingleObjectTexture, IDimensions } from \"../../engine/helpers\";\nimport { ModalRenderer } from \"../../modal/modal\";\nimport { Config } from \"../../resources\";\nimport FontManager from \"../../engine/managers/fontManager\";\nimport SizingManager from \"../../engine/managers/sizingManager\";\n\nexport interface UpgradeDetails {\n    title: string;\n    price: number;\n    currentLevel: number;\n    maxLevel: number;\n    description: string;\n}\n\nexport default class UpgradeWidget {\n    private tileButton: Actor;\n    private label: Label;\n    private purchaseOnClick: () => void;\n    private upgradeDetails: UpgradeDetails;\n\n    public constructor(x, y, tileDims: IDimensions, tileTexture: Texture, label: string, details: UpgradeDetails, onClick: () => void) {\n\n        this.tileButton = new ButtonBase(tileTexture, () => ModalRenderer.get().upgradeMaxGridModal(3, 100, onClick));\n        this.tileButton.x = x;\n        this.tileButton.y = y;\n        this.tileButton.scale = tileDims.scale;\n        this.tileButton.setHeight(tileDims.height);\n        this.tileButton.setWidth(tileDims.width);\n\n        this.label = new Label(label, this.tileButton.getRight() + Config.gridPadding, y, null, FontManager.get().getMono());\n        this.label.fontSize = SizingManager.get().getUIItemSize();\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Left;\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.label,\n            this.tileButton\n        ];\n    }\n\n    public  getBottom(): number {\n        return this.tileButton.getBottom();\n    }\n}","import { Scenes } from './scenes';\nimport { Engine, Label, BaseAlign, TextAlign, Actor } from 'excalibur';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport BaseScene from './BaseScene';\nimport FontManager from '../engine/managers/fontManager';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport SizingManager from '../engine/managers/sizingManager';\nimport { calcDimensionsSingleObject, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport { Resources, Config } from '../resources';\nimport { ModalRenderer } from '../modal/modal';\nimport UpgradeWidget from '../actors/upgrades/upgradeWidget';\n\nexport class Upgrades extends BaseScene {\n\n  private coinsLabel: Label;\n\n  public onInitialize(engine: Engine) {\n    const title = this.title();\n    this.coinsLabel = this.playercoinsLabel(engine.drawWidth / 2, title.getBottom() + Config.optionPadding);\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.gridTile, sizing.padding, sizing.maxScale);\n    \n    const gridButton = new UpgradeWidget(\n      engine.drawWidth / 3,\n      this.coinsLabel.getBottom() + 100,\n      dims,\n      Resources.gridTile,\n      \"Grid Size\",\n      <any>{},//todo\n      () => alert(\"nice\"),\n    );\n\n    const difficulty = new UpgradeWidget(\n      engine.drawWidth / 3,\n      gridButton.getBottom() + Config.optionPadding*2,\n      dims,\n      Resources.difficultyTile,\n      \"Difficulty\",\n      <any>{},//todo\n      () => alert(\"diff\"),\n    );\n\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.add(title)\n    this.add(this.coinsLabel);\n    gridButton.getDrawables()\n    .forEach(d => this.add(d));\n    difficulty.getDrawables()\n    .forEach(d => this.add(d));\n\n    this.initScroll(0);\n    this.setBackround(engine.drawHeight);\n  }\n\n  private title(): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.upgradeTitle, 0.6, 1);\n    const sprite = Resources.upgradeTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth / 2;\n    title.y = dims.height / 2 + Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale;\n    return title;\n  }\n\n  private playercoinsLabel(x: number, y: number): Label {\n    const coins = PlayerSettingsManager.get().getTotalCoins();\n    const coinsLabel = new Label(this.coinsLabelString(coins), x, y, null, FontManager.get().getMono());\n    coinsLabel.fontSize = SizingManager.get().getUIItemSize();\n    coinsLabel.baseAlign = BaseAlign.Middle;\n    coinsLabel.textAlign = TextAlign.Center;\n    return coinsLabel;\n  }\n\n  private coinsLabelString(coins: number): string {\n    return `Current Coins: ${coins}`;\n  }\n\n  public onActivate() {\n    this.coinsLabel.text = this.coinsLabelString(PlayerSettingsManager.get().getTotalCoins());\n  }\n\n  public onDeactivate() {\n  }\n} \n","import { GameWindowBase } from './gameWindowBase';\nimport ProgressionManager from '../../engine/progression/progressionManager';\n\nexport class GridGameWindow extends GameWindowBase {\n\n  private currentOptionGridSize: number;\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    this.currentOptionGridSize = ProgressionManager.get().getOptionGridSize()\n  }\n\n  //Override\n  public onActivate(): void {\n    const newSize = ProgressionManager.get().getOptionGridSize()\n    if(this.currentOptionGridSize != newSize) {\n      this.currentOptionGridSize = newSize;\n      this.coordinator.resetGame(true);\n    }\n    super.onActivate();\n  }\n} \n","import { Actor, Label, Sprite, Vector, BaseAlign, TextAlign, Color } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport SizingManager from \"../../engine/managers/sizingManager\";\nimport FontManager from \"../../engine/managers/fontManager\";\n\nexport default class CoinCount {\n\n    private coinCount: number;\n    private coinIcon: Actor;\n    private countLabel: Label;\n\n    private constructor(currentCount: number, countIcon: Actor, countLabel: Label) {\n        this.coinCount = currentCount;\n        this.coinIcon = countIcon;\n        this.countLabel = countLabel;\n    }\n\n    public static create(x: number, y: number, currentCount: number): CoinCount {\n        const coinActor = CoinCount.createCoinIcon(x, y);\n        return new CoinCount(\n            currentCount,\n            coinActor,\n            CoinCount.createCountLabel(currentCount, coinActor.getRight() + Config.gridPadding, y),\n        );\n    }\n\n    public getCoinCount(): number {\n        return this.coinCount;\n    }\n\n    public addToCoinCount(toAdd: number): void {\n        this.coinCount = this.coinCount + toAdd;\n        this.countLabel.text = `${this.coinCount}`;\n    }\n\n    public drawables(): Actor[] {\n        return [\n            this.coinIcon,\n            this.countLabel,\n        ];\n    }\n\n    private static createCoinIcon(x: number, y: number): Actor {\n        const texture = Resources.uiCoins;\n        const sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        const scale = new Vector(SizingManager.get().getUIItemSize() / texture.width, SizingManager.get().getUIItemSize() / texture.height);\n        const actor = new Actor(x, y, texture.width, texture.height);\n        actor.addDrawing(sprite);\n        actor.scale = scale;\n        return actor;\n    }\n\n    private static createCountLabel(currentCount: number, x: number, y: number): Label {\n        const label = new Label(\n            `${currentCount}`,\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        label.fontSize = SizingManager.get().getUIItemSize() * 0.7;\n        label.baseAlign = BaseAlign.Middle;\n        label.textAlign = TextAlign.Left;\n        label.color = Color.fromHex(\"#958a2d\");\n        return label;\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/managers/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize() + 1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index + 1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize() + 1) * Config.gridPadding) / 2;\n\n        if (type === \"col\") {\n            return top;\n        } else {\n            return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n        }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite().clone();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Optional, Supplier } from \"java8script\";\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport { GridState, CardState } from \"../engine/progression/gridState\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, screenCenter);\n    }\n\n    public static createGridFromState(callbackProvider: CardCallbackProvider, gridSize: number, state: Optional<GridState>, engine: ex.Engine): GridCoordinator {\n        return state\n            .map(s => GridCoordinator.loadSavedGrid(callbackProvider, engine, s))\n            .orElseGet(() => GridCoordinator.createNewGrid(callbackProvider, gridSize, engine))\n    }\n\n    public static createNewGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth / 2, engine.drawHeight / 2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons(screenCenter, callbackProvider.skeletonCardCallback);\n        coord.initializeBuffs(screenCenter, callbackProvider);\n        return coord;\n    }\n\n    public currentGridState(): { gridSize: number, cardState: CardState[][] } {\n        const cardStates: CardState[][] = Stream.ofValues(...this.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(card => new CardState(card.type(), card.isFlipped()))\n                .toArray())\n            .toArray();\n        return {\n            gridSize: this.gridSize,\n            cardState: cardStates\n        };\n    }\n\n    public getGridAsList(): Card[] {\n        return Stream.of(this.grid)\n            .flatMap(a => Stream.ofValues(...a))\n            .toArray();\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n            .flatMap(a => Stream.ofValues(...a))\n            .filter(card => card.getRow() == rowIndex)\n            .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n            .flatMap(a => Stream.ofValues(...a))\n            .filter(card => card.getCol() == colIndex)\n            .toArray();\n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(screenCenter: Vector, skeletonCardCallback: Supplier<void>): void {\n        while (this.needMoreSkeletons()) {\n            const { row, col } = this.randomCoord();\n            if (this.isCardACoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(screenCenter, row, col, skeletonCardCallback));\n            }\n        }\n    }\n\n    private initializeBuffs(screenCenter: Vector, callbackProvider: CardCallbackProvider): void {\n        while (this.needMoreBuffs()) {\n            const { row, col } = this.randomCoord();\n            if (this.isCardACoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col, screenCenter, callbackProvider))\n            }\n        }\n    }\n\n    private initializeFromState(state: GridState, screenCenter: Vector, callbackProvider: CardCallbackProvider): void {\n        this.gridSize = state.getGridSize();\n        state.getGridState().forEach((row: CardState[], rowIndex: number) => {\n            row.forEach((card: CardState, colIndex: number) => {\n                const createdCard = Card.create(screenCenter, rowIndex, colIndex, callbackProvider, card.getType(), card.isFlipped());\n                this.insertCard(rowIndex, colIndex, createdCard);\n            });\n        });\n    }\n\n    private generateBuffCard(row: number, col: number, screenCenter: Vector, callbackProvider: CardCallbackProvider): Card {\n        return Math.random() < 0.5\n            ? Card.attack(screenCenter, row, col, callbackProvider.attackCardCallback)\n            : Card.potion(screenCenter, row, col, callbackProvider.potionCardCallback)\n    }\n\n    private insertCard(row: number, col: number, card: Card): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCardACoin(row: number, col: number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    }\n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): { row: number, col: number } {\n        return {\n            row: Math.floor(Math.random() * this.gridSize),\n            col: Math.floor(Math.random() * this.gridSize)\n        };\n    }\n\n    private static loadSavedGrid(callbackProvider: CardCallbackProvider, engine: ex.Engine, gridState: GridState): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth / 2, engine.drawHeight / 2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridState.getGridSize(), screenCenter);\n        coord.initializeFromState(gridState, screenCenter, callbackProvider);\n        return coord;\n    }\n}","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport SizingManager from \"../../engine/managers/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport SizingManager from \"../engine/managers/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max: number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n            .map(idx => {\n                if (idx > (defaultedCurrent - 1)) {\n                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                } else {\n                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                }\n            })\n            .toArray();\n\n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if ((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n        this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if (this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n}","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream, Optional } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport { Vector, Actor } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/managers/sizingManager\";\nimport PlayerSettingsManager from \"../engine/progression/playerSettingsManager\";\nimport { GridState } from \"../engine/progression/gridState\";\nimport CoinCount from \"../actors/bars/coinCount\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private coinCount: CoinCount;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine) {\n        this.engine = engine;\n        this.resetGame(false);\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const coordinator: GameCoordinator = new GameCoordinator(engine);\n        return coordinator;\n    }\n\n    public resetGame(shouldCreateFresh: boolean): void {\n        const mm: SizingManager = SizingManager.get();\n        const saveState: Optional<GridState> = PlayerSettingsManager.get().getGridState();\n        this.healthCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { }, Resources.uiHeart, saveState.map(s => s.getHearts()).orElse(Config.maxHealth));\n        this.attackCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword, saveState.map(s => s.getSwords()).orElse(0));\n        this.coinCount = CoinCount.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 2.5, saveState.map(gs => gs.getCoins()).orElse(0));\n\n        this.gridCoordinator = shouldCreateFresh\n            ? GridCoordinator.createNewGrid(this, ProgressionManager.get().getGameGridSize(), this.engine)\n            : GridCoordinator.createGridFromState(this, ProgressionManager.get().getGameGridSize(), saveState, this.engine);\n        this.rowCounts = this.createRowCountCards();\n        this.columnCounts = this.createColCountCards();\n    }\n\n    private getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    private getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    private getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    public getAllActors(): Actor[] {\n        return Stream.ofValues<Actor[]>(\n            this.gridCoordinator.getGridAsList(),\n            this.getColCountCards(),\n            this.getRowCountCards(),\n            this.getStatTrackers(),\n            ProgressionManager.get().isProgressionDisabled() ? [] : this.coinCount.drawables(),\n        ).flatMap(a => Stream.ofValues(...a))\n            .toArray();\n    }\n\n    private updateLabels = () => {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (this.healthCoordinator.getCurrent() === 0) {\n            this.gameOver();\n        } else if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.victory();\n        }\n    }\n\n    private gameOver(): void {\n        this.engine.goToScene(Scenes.GAME_OVER);\n        ProgressionManager.get().resetProgress();\n        PlayerSettingsManager.get().saveGridState();\n        this.resetGame(true);\n    }\n\n    private victory(): void {\n        const psm = PlayerSettingsManager.get();\n        const progman = ProgressionManager.get();\n        this.engine.goToScene(Scenes.VICTORY);\n        progman.progress();\n        psm.saveGridState();\n        if (!progman.isProgressionDisabled()) {\n            //don't want to add coin to total in practice mode\n            psm.setTotalCoins(psm.getTotalCoins() + this.coinCount.getCoinCount());\n        }\n        this.resetGame(true);\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.coinCount.addToCoinCount(1);\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    private saveGridProgress(): void {\n        const grid = this.gridCoordinator.currentGridState();\n        PlayerSettingsManager.get().saveGridState(new GridState(\n            grid.gridSize,\n            grid.cardState,\n            this.healthCoordinator.getCurrent(),\n            this.attackCoordinator.getCurrent(),\n            this.coinCount.getCoinCount(),\n        ));\n    }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/managers/fontManager\";\nimport ProgressionManager from \"../../engine/progression/progressionManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return ProgressionManager.get().isProgressionDisabled() ? \"\" :`${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport LevelDisplay from '../../actors/bars/level';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/managers/sizingManager';\nimport { GameWindowBase } from './gameWindowBase';\n\nexport class StoryGameWindow extends GameWindowBase {\n\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth / 2, mm.getMenuHeight() - mm.getUIItemSize() / 2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n\n  }\n\n  public onActivate() {\n    super.onActivate();\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Actor, Engine, Axis } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture, IDimensions } from '../engine/helpers';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport { ModalRenderer } from '../modal/modal';\nimport SizingManager from '../engine/managers/sizingManager';\nimport BaseScene from './BaseScene';\n\nexport class Help extends BaseScene {\n\n  private modalRenderer: ModalRenderer = ModalRenderer.get();\n\n  public onInitialize(engine: ex.Engine) {\n\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n\n    const titleDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.helpTitle, 0.6, 1);\n    const title = new Actor(\n      engine.drawWidth / 2,\n      titleDims.height / 2 + Config.gridPadding,\n      titleDims.width,\n      titleDims.height\n    );\n    title.addDrawing(Resources.helpTitle);\n    title.scale = titleDims.scale;\n    this.add(title);\n\n    const centerx = engine.drawWidth / 2;\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.introMenu, sizing.padding, sizing.maxScale);\n\n    const intro = this.createButton(dims, centerx, title.getBottom() + dims.height / 2 + Config.optionPadding, Resources.introMenu, () => this.modalRenderer.introModal());\n    const playing = this.createButton(dims, centerx, intro.getBottom() + Config.gridPadding + dims.height / 2, Resources.playingMenu, () => this.modalRenderer.howToPlayModal());\n    const cards = this.createButton(dims, centerx, playing.getBottom() + Config.gridPadding + dims.height / 2, Resources.cardMenu, () => this.modalRenderer.cardModal());\n    const credits = this.createButton(dims, centerx, cards.getBottom() + Config.gridPadding + dims.height / 2, Resources.creditsMenu, () => this.modalRenderer.textModal(\"Credits\", \"Made by Andrew\"));\n\n    this.add(intro);\n    this.add(playing);\n    this.add(cards);\n    this.add(credits);\n\n\n    this.initScroll(credits.getBottom());\n    this.setBackround(credits.getBottom());\n  }\n\n  public createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n    const button = new ButtonBase(texture, onClick);\n    button.x = x\n    button.y = y\n    button.scale = dims.scale;\n    button.setHeight(dims.height);\n    button.setWidth(dims.width);\n    return button;\n  }\n\n  public onActivate() {\n  }\n\n  public onDeactivate() {\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier, Function, Optional, Consumer } from \"java8script\";\nimport SoundManager from \"../../engine/managers/soundManager\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n    private onToggle: Optional<Consumer<boolean>>\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean, onToggle?: Consumer<boolean>) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n        this.onToggle = Optional.ofNullable(onToggle);\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public setOnToggle(onToggle: Consumer<boolean>): void {\n        this.onToggle = Optional.of(onToggle);\n    }\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    public setChecked(isChecked: boolean): void {\n        this.checked = isChecked;\n        this.setCheckedDrawing();\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound)\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n    private setCheckedDrawing() {\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        this.setCheckedDrawing();\n        this.onToggle.ifPresent(func => func(this.checked));\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport FontManager from \"../../engine/managers/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine, onToggle?: (checked:boolean) => void) {\n        const textSize = size - (size * 0.25)\n        const buttonSize = size + (size * 0.25);\n        \n\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = textSize;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(buttonSize, x+labelWidth*(3/4), y, defaultVal, onToggle);\n        \n    }\n\n    public addOnToggle(onToggle: (checked:boolean) => void): void {\n        this.radio.setOnToggle(onToggle);\n    }\n    \n    public setChecked(isChecked: boolean): void {\n        this.radio.setChecked(isChecked);\n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getBottom() {\n        return Math.max(this.radio.getBottom(), this.label.getBottom());\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign, Color, Sprite } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/managers/fontManager\";\nimport { Colorize } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Stream } from \"java8script\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButtonSprite:Sprite;\n    private leftButton: ButtonBase;\n    private rightButtonSprite: Sprite;\n    private rightButton: ButtonBase;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number, disabled: boolean) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n\n        const textSize = this.fontSize - (this.fontSize * 0.25)\n        const buttonSize = this.fontSize + (this.fontSize * 0.25);\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = textSize\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        \n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+buttonSize, null, FontManager.get().getMono());\n        this.numberLabel.fontSize = textSize\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        \n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButtonSprite = this.leftButton.getSprite();\n        this.leftButton.x = x - buttonSize*1.5\n        this.leftButton.y = y + buttonSize;\n        this.leftButton.scale = new Vector(buttonSize/Resources.uiLeft.width, buttonSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(buttonSize);\n        this.leftButton.setWidth(buttonSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButtonSprite = this.rightButton.getSprite();\n        this.rightButton.x = x + buttonSize*1.5;\n        this.rightButton.y = y + buttonSize;\n        this.rightButton.scale = new Vector(buttonSize/Resources.uiRight.width, buttonSize/Resources.uiRight.height);\n        this.rightButton.setHeight(buttonSize);\n        this.rightButton.setWidth(buttonSize);\n\n        this.updateDisabled(disabled);\n    }\n\n    public updateDisabled = (isDisabled: boolean) => {\n        this.leftButtonSprite.clearEffects();\n        this.rightButtonSprite.clearEffects();\n        if(isDisabled) {\n            const disColor = Color.Gray;\n            this.topLabel.color = disColor\n            this.numberLabel.color = disColor;\n            this.leftButtonSprite.addEffect(new Colorize(disColor));\n            this.rightButtonSprite.addEffect(new Colorize(disColor));\n            this.leftButton.setDisabled(true);\n            this.rightButton.setDisabled(true);\n        } else {\n            this.topLabel.color = Color.Black;\n            this.numberLabel.color = Color.Black;\n            this.leftButton.setDisabled(false);\n            this.rightButton.setDisabled(false);\n        }\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getBottom() {\n        return Stream.ofValues<Actor>(this.leftButton, this.rightButton, this.numberLabel)\n        .map(a => a.getBottom())\n        .max()\n        .orElse(0);\n    }\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Actor, Engine } from 'excalibur';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SizingManager from '../engine/managers/sizingManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport { Consumer } from 'java8script';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport BaseScene from './BaseScene';\n\nexport class Options extends BaseScene {\n\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n  private progressionToggle: LabeledRadio;\n  private title: Actor;\n\n  public onInitialize(engine: Engine) {\n    const itemSize = SizingManager.get().getUIItemSize();\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n\n    this.addTitle();\n    this.addSoundToggle(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addProgressionToggle(itemSize)\n    const callbackForEnabling = this.addGridSize(itemSize);\n    this.progressionToggle.addOnToggle(callbackForEnabling);\n\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const createbuttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.confirmMenu, sizing.padding, sizing.maxScale);\n\n    const createButtonY =\n      this.gridSize.getBottom() < engine.drawHeight - createbuttonDims.height\n        ? engine.drawHeight - createbuttonDims.height / 2 - Config.optionPadding //grid size and confirm dont overelap so all good, draw at the bottom of screen \n        : this.gridSize.getBottom() + Config.optionPadding + createbuttonDims.height / 2;\n    const createButton = this.createButton(\n      createbuttonDims,\n      engine.drawWidth / 2,\n      createButtonY,\n      Resources.confirmMenu,\n      () => this.onConfirm()\n    );\n    this.add(createButton);\n\n    this.initScroll(createButton.getBottom());\n    this.setBackround(createButton.getBottom())\n  }\n\n  private onConfirm = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    ProgressionManager.get().setProgressionDisabled(!this.progressionToggle.isChecked());\n    PlayerSettingsManager.get().setIsSoundOff(!this.sound.isChecked())\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.optionTitle, 0.6, 1);\n    const sprite = Resources.optionTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth / 2;\n    title.y = dims.height / 2 + Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale;\n    this.title = title;\n    this.add(title);\n  }\n\n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\",\n      itemSize, this.engine.drawWidth / 2,\n      this.title.getBottom() + Config.optionPadding * 2,\n      !PlayerSettingsManager.get().isSoundOff(),\n      this.engine\n    );\n\n    this.sound.getDrawables()\n      .forEach(e => this.add(e));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2,\n      this.sound.getBottom() + itemSize * 0.5 + Config.optionPadding,\n      itemSize, false);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addProgressionToggle(itemSize) {\n    this.progressionToggle = new LabeledRadio(\"Story Mode\", itemSize, this.engine.drawWidth / 2,\n      this.difficulty.getBottom() + itemSize * 1 + Config.optionPadding,\n      !ProgressionManager.get().isProgressionDisabled(), this.engine);\n\n    this.progressionToggle.getDrawables()\n      .forEach(e => this.add(e));\n  }\n\n  //returns callback for toggling the objects\n  private addGridSize(itemSize): Consumer<boolean> {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2,\n      this.progressionToggle.getBottom() + itemSize * 0.5 + Config.optionPadding, itemSize,\n      !ProgressionManager.get().isProgressionDisabled());\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n\n    return this.gridSize.updateDisabled;\n  }\n\n  public onActivate() {\n    this.sound.setChecked(!PlayerSettingsManager.get().isSoundOff());\n    this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel());\n    this.progressionToggle.setChecked(!ProgressionManager.get().isProgressionDisabled())\n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport SoundManager from '../engine/managers/soundManager';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport {calcDimensionsSingleObjectTexture, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/managers/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport SizingManager, { IButtonSizing } from '../engine/managers/sizingManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n    const sizing: IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.nextMenu, sizing.padding, sizing.maxScale);\n    const imageDims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1)\n    const offset = buttonDims.height/2 + Config.optionPadding;\n\n    const victoryActor = new ex.Actor(\n      this.engine.drawWidth / 2,\n      this.engine.drawHeight / 2 - offset,\n      imageDims.width,\n      imageDims.height\n    );\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.scale = imageDims.scale;\n    this.add(victoryActor);\n\n    const nextButton = new ButtonBase(\n      Resources.nextMenu, \n      this.onNext,\n    );\n    nextButton.setHeight(buttonDims.height);\n    nextButton.setWidth(buttonDims.width);\n    nextButton.scale = buttonDims.scale;\n    nextButton.x = engine.drawWidth/2;\n    nextButton.y = engine.drawHeight - offset;\n    this.add(nextButton);\n  }\n\n  private onNext = () => {\n    this.engine.goToScene(getGameWindow());\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/managers/soundManager';\nimport { Engine } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, safePointerUp, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/managers/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport SizingManager, { IButtonSizing } from '../engine/managers/sizingManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n\n    const imageDims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    const sizing: IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.menuMenu, sizing.padding, sizing.maxScale);\n    const offset = buttonDims.height/2 + Config.optionPadding;\n\n\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2 - offset;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = imageDims.scale;\n\n    const menuButton = new ButtonBase(\n      Resources.menuMenu, \n      this.onMenu,\n    );\n    menuButton.setHeight(buttonDims.height);\n    menuButton.setWidth(buttonDims.width);\n    menuButton.scale = buttonDims.scale;\n    menuButton.x = engine.drawWidth/2;\n    menuButton.y = engine.drawHeight - offset;\n    this.add(menuButton)\n  }\n\n  private onMenu = () => {\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  };\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import { Config } from '../../resources';\nimport { Loader } from 'excalibur';\nconst logoImg = require('../../images/title.png');\n\nexport class GameLoader extends Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import { Config } from '../../resources';\nimport { Color, Engine, Input, DisplayMode } from 'excalibur';\n\nexport default class Game extends Engine {\n\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: DisplayMode.FullScreen,\n      pointerScope: Input.PointerScope.Canvas, //make it so clicks don't go \"through\" the help modals\n      suppressPlayButton: true, //todo think about customizing the button\n      backgroundColor: Color.fromHex(Config.backgroundColor),\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Color, Engine, Vector } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class ScrollBar extends Actor {\n\n    private scrollBarTop: number;\n    private scrollBarBotton: number;\n    private isDragging = false;\n\n    constructor(engine: Engine) {\n        super();\n        this.scrollBarBotton = engine.drawHeight / 2;\n        this.scrollBarTop = engine.drawHeight / 2; // dont want to be able to go past the top of the screen\n        const sprite = Resources.uiScroll.asSprite();\n        const scrollItemSize = 50;\n        this.x = engine.drawWidth - 25;\n        this.y = engine.drawHeight / 2;\n        this.addDrawing(Resources.uiScroll.asSprite());\n        this.setWidth(scrollItemSize);\n        this.setHeight(scrollItemSize);\n        this.scale = new Vector(scrollItemSize/192, scrollItemSize/192); // 192 is the sprite original width/height\n\n        this.on('pointerdragstart', (pe: ex.Input.PointerEvent) => {\n            this.isDragging = true;\n        });\n\n        this.on('pointerdragend', (pe: ex.Input.PointerEvent) => {\n            this.isDragging = false;\n        });\n\n        this.on('pointerdragmove', (pe: ex.Input.PointerEvent) => {\n            if (this.isDragging) {\n                const worldY = pe.pointer.lastWorldPos.y;\n                if (worldY > this.scrollBarTop && worldY < this.scrollBarBotton) {\n                    this.y = pe.pointer.lastWorldPos.y;\n                }\n            }\n        });\n\n        this.on('pointerdragleave', (pe: ex.Input.PointerEvent) => {\n            if (this.isDragging) {\n                const worldY = pe.pointer.lastWorldPos.y;\n                if (worldY > this.scrollBarTop && worldY < this.scrollBarBotton) {\n                    this.y = pe.pointer.lastWorldPos.y;\n                }\n            }\n        });\n    }\n\n    public setScrollBottom(num: number) {\n        this.scrollBarBotton = num;\n        if(Math.floor(this.scrollBarBotton) <= Math.floor(this.scrollBarTop)) {\n            this.visible = false;\n        }\n    }\n}","import { Actor } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport SoundManager from '../engine/managers/soundManager';\nimport SizingManager, { IButtonSizing } from '../engine/managers/sizingManager';\nimport BaseScene from './BaseScene';\n\nexport class MainMenu extends BaseScene {\n  public onInitialize(engine: ex.Engine) {\n    const centerX = engine.drawWidth / 2;\n\n\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.title, 0.9, 0.8);\n    const title = new Actor(centerX, dims.height/2 + Config.gridPadding, dims.width, dims.height);\n    title.scale = dims.scale;\n    title.addDrawing(Resources.title);\n    this.add(title);\n\n    const {padding, maxScale} :IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.startMenu, padding, maxScale );\n\n    const start = this.createButton(buttonDims, centerX,  title.getBottom() + Config.optionPadding + buttonDims.height/2, Resources.startMenu, () => engine.goToScene(getGameWindow()));\n    const upgrades = this.createButton(buttonDims, centerX,  start.getBottom() + Config.gridPadding + buttonDims.height/2, Resources.upgradeMenu, () => engine.goToScene(Scenes.UPGRADES));\n    const options = this.createButton(buttonDims, centerX, upgrades.getBottom() + Config.gridPadding + buttonDims.height/2, Resources.optionMenu, () => engine.goToScene(Scenes.OPTIONS));\n    const help = this.createButton(buttonDims, centerX, options.getBottom() + Config.gridPadding+ buttonDims.height/2, Resources.helpMenu, () => engine.goToScene(Scenes.HELP));\n    \n    this.add(start);\n    this.add(options);\n    this.add(help);\n    this.add(upgrades)\n\n    this.setBackround(help.getBottom());\n    this.initScroll(help.getBottom());\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicEnd();\n  }\n\n  public onDeactivate() { }\n}","module.exports = __webpack_public_path__ + \"00f14d085530ea0ae58c17a32b3fe27f.wav\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"3329db2fa28ce34b8c3c074e4c25d295.png\";","module.exports = __webpack_public_path__ + \"c9c8f13302fa1b1eeb4d2e5345c5bbba.png\";","module.exports = __webpack_public_path__ + \"60352ab041f9e1e001176386f2dc105a.png\";","module.exports = __webpack_public_path__ + \"031849bdaba0fc1f7b8e931a8cd4b081.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"2f01ab32d051553af7e9edc5f70c3831.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"5bbe8e44117d6281e0990e5a0213c814.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"ff3ec13a365eb079e29c3a06b576bad7.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"d848ad40f4eee6a0b29882906e9b4c24.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"53b20a23b0fa9be3ec391f1dd49a6492.png\";","module.exports = __webpack_public_path__ + \"dd8089d1ad5e36afe0d889a9218a0559.png\";","module.exports = __webpack_public_path__ + \"d23070e309626133deb93bbabf5d25bb.png\";","module.exports = __webpack_public_path__ + \"135852ebc677f398779a9ac03e3c396b.png\";","module.exports = __webpack_public_path__ + \"64c5b08a042975010b476c3ca33efd4d.png\";","module.exports = __webpack_public_path__ + \"fb261f33ec74628ffab99997289e2f44.png\";","module.exports = __webpack_public_path__ + \"5d8c965fd0efaf1fa74941ad5cbb8d3c.png\";","module.exports = __webpack_public_path__ + \"8d6d5a0dc09cfb470714a9dbe963edd4.png\";","module.exports = __webpack_public_path__ + \"5370dd7a56a2e256105c0d5ae9a716f5.png\";","module.exports = __webpack_public_path__ + \"21c2960a6ef19bc7b845d01041d556b9.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"e1f03a0829378e36ba7058cc784f431c.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","var map = {\n\t\"./GameOver.png\": 299,\n\t\"./background.old.png\": 298,\n\t\"./background.png\": 297,\n\t\"./card.png\": 296,\n\t\"./coin.png\": 114,\n\t\"./helpTitle.png\": 295,\n\t\"./icon-192.png\": 294,\n\t\"./icon-512.png\": 293,\n\t\"./menu/cards.png\": 292,\n\t\"./menu/confirm.png\": 291,\n\t\"./menu/credits.png\": 290,\n\t\"./menu/help.png\": 289,\n\t\"./menu/intro.png\": 288,\n\t\"./menu/menu.png\": 287,\n\t\"./menu/next.png\": 286,\n\t\"./menu/options.png\": 285,\n\t\"./menu/playing.png\": 284,\n\t\"./menu/start.png\": 283,\n\t\"./menu/upgrade.png\": 282,\n\t\"./numbers/0.png\": 281,\n\t\"./numbers/1.png\": 280,\n\t\"./numbers/2.png\": 279,\n\t\"./numbers/3.png\": 113,\n\t\"./numbers/4.png\": 278,\n\t\"./numbers/5.png\": 277,\n\t\"./numbers/6.png\": 276,\n\t\"./numbers/7.png\": 275,\n\t\"./numbers/8.png\": 274,\n\t\"./numbers/9.png\": 273,\n\t\"./optionTitle.png\": 272,\n\t\"./potion.png\": 112,\n\t\"./skull.png\": 111,\n\t\"./sword.png\": 110,\n\t\"./title.png\": 109,\n\t\"./ui/blank.png\": 271,\n\t\"./ui/coin.png\": 270,\n\t\"./ui/coinPile.png\": 269,\n\t\"./ui/heart.png\": 108,\n\t\"./ui/left.png\": 268,\n\t\"./ui/right.png\": 267,\n\t\"./ui/scroll.png\": 266,\n\t\"./ui/sword.png\": 107,\n\t\"./ui/x.png\": 106,\n\t\"./upgrades/difficulty.png\": 265,\n\t\"./upgrades/grid.png\": 264,\n\t\"./upgradesTitle.png\": 263,\n\t\"./victory.png\": 262\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\tvar module = __webpack_require__(id);\n\treturn module;\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 300;","import { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game/Game';\nimport { GameLoader } from './engine/game/GameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/managers/sizingManager';\nimport PlayerSettingsManager from './engine/progression/playerSettingsManager';\nimport { StoryGameWindow } from './scenes/gameWindows/storyGameWindow';\nimport { GridGameWindow } from './scenes/gameWindows/gridGameWindow';\nimport { Upgrades } from './scenes/upgrades';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\nconst options = new Options(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.STORY_GAME_WINDOW, new StoryGameWindow(game));\ngame.add(Scenes.GRID_GAME_WINDOW, new GridGameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, options);\ngame.add(Scenes.HELP, new Help(game));\ngame.add(Scenes.UPGRADES, new Upgrades(game));\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n  .forEach(k => loader.addResource(Resources[k]));\n\ngame.start(loader).then(() => {\n  PlayerSettingsManager.initialize()\n    .then(() => {\n      SizingManager.initialize(game);\n      game.goToScene(Scenes.MAIN_MENU);\n    });\n});\n"],"sourceRoot":""}