{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/progressionManager.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/images/title.png","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/numbers.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/helpMenu.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/gameWindow.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","fontNumbers","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","backgroundTile","Resources","Texture","gameOver","0","2","3","4","5","6","7","8","9","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","uiItemSize","menuHeight","t","e","Scenes","GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","ProgressionManager","gridSize","difficulty","disableProgression","this","singleton","baseGridSize","baseDifficulty","getGridSize","getDifficulty","getSkullFactor","getBuffAndSkullByDifficulty","skullFactor","getBuffFactor","buffFactor","progress","nextDifficulty","nextGridSize","setGridSize","newSize","resetProgress","currentGridSize","createReturn","excalibur_1","resources_1","BackgroundManager","engine","tile","numberOfCols","Math","ceil","drawWidth","width","numberOfRows","drawHeight","height","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","__extends","setPrototypeOf","__proto__","Array","constructor","create","SpriteEffects_1","ButtonBase","_super","texture","onClick","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","addDrawing","asSprite","on","onClickWrapper","Actor","SoundManager","soundManager","backgroundMusicStart","backgroundSound","loop","play","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","maxScale","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","CardType","soundManager_1","progressionManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","type","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","Sprite","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","scenes_1","buttonBase_1","backgroundManager_1","Help","onInitialize","bgManager","addTileMap","exitT","exit","goToScene","add","onActivate","onDeactivate","Scene","NumberSelector","min","max","current","fontSize","font","SpriteFont","numberLabel","Label","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","console","log","leftButton","addBy","rightButton","nextCurrent","text","getCurrent","getDrawables","u","numberSelector_1","Options","arguments","numberSelector","addGridSize","forEach","helpers_1","Victory","victoryActor","GameOver","gameOverActor","playerIdleAnimation","getAnimationForAll","stop","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","suppressPlayButton","start","loader","Engine","MainMenu","game","sizeProperly","options","help","placeActors","actor","padding","resource","getHeight","card_1","Count","index","initialCount","setCount","leftSide","top","count","java8script_1","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","Stream","of","map","a","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","filter","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","GameCoordinatior","healthCoordinator","attackCoordinator","updateLabels","checkIfCompleteGame","initialize","coordinator","gridCoordinator","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","skeletonCountForCol","skeletonCountForRow","allMatch","coordinator_1","GameWindow","onBackButton","coins","remove","gameWindow_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","mainMenu","keys","k","addResource"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([241,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nimport { Color } from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst helpMenu = require('./images/helpMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\n\nconst fontNumbers = require('./fonts/numbers.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n\n    fontNumbers: new ex.Texture(fontNumbers),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    uiItemSize: 50,\n    menuHeight: 150, // 3 times item size\n};\n\nexport { Resources, Config, uiHeart}\n","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}","type Difficulty = 1 | 2 | 3 | 4 | 5;\ntype GridSize = 3 | 4 | 5 | 6 | 7 | 8 | 9;\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport default class ProgressionManager {\n\n    private static baseGridSize: number = 4;\n    private static baseDifficulty: number = 1;\n    private static singleton: ProgressionManager;\n\n    private gridSize: number;\n    private difficulty: number;\n    private disableProgression: boolean;\n\n    private constructor(gridSize, difficulty, disableProgression) {\n        this.gridSize = gridSize;\n        this.difficulty = difficulty;\n        this.disableProgression = disableProgression;\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager(\n                ProgressionManager.baseGridSize,\n                ProgressionManager.baseDifficulty,\n                false\n            );\n            return this.singleton;\n        }\n    }\n\n    public getGridSize(): number {\n        return this.gridSize;\n    }\n\n    public getDifficulty(): number {\n        return this.difficulty;\n    }\n\n    public getSkullFactor(): number {\n        return ProgressionManager.getBuffAndSkullByDifficulty(this.difficulty).skullFactor;\n    }\n\n    public getBuffFactor(): number {\n        return ProgressionManager.getBuffAndSkullByDifficulty(this.difficulty).buffFactor;\n    }\n\n    public progress(): void {\n        if (!this.disableProgression) {\n            if(this.difficulty === 5) {\n                this.difficulty = this.nextDifficulty(this.difficulty, this.gridSize);\n                this.gridSize = this.nextGridSize(this.gridSize);    \n            } else {\n                const next = this.nextDifficulty(this.difficulty, this.gridSize); \n                this.difficulty = this.nextDifficulty(this.difficulty, this.gridSize); \n            }   \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        this.gridSize = newSize;\n    }\n\n    public resetProgress(): void {\n        if (!this.disableProgression) {\n            this.difficulty = ProgressionManager.baseDifficulty;\n            this.gridSize = ProgressionManager.baseGridSize;\n        }\n    }\n\n    private nextGridSize(gridSize: number): number {\n       return gridSize === 9 \n       ?  9\n       : gridSize+1;\n    }\n\n    //Normal progression is 1,3,5 and then bump the grid size.\n    //if the player sets the initial difficulty to 2 or 4 then we should handle that\n    private nextDifficulty(difficulty: number, currentGridSize: number): number {\n        if(currentGridSize === 9 && difficulty === 5) {\n            // do nothing\n        } else {\n            if (difficulty === 2 || difficulty === 4) {\n                return difficulty + 1;\n            } else if (difficulty === 5) {\n                return 1;\n            } else {\n                return difficulty + 2;\n            }\n        }\n    }\n\n    private static getBuffAndSkullByDifficulty(difficulty: number): Factors {\n        //skull factor: easy 3 (30%), medium 2.5 (40%), hard 2 (50%)\n        //buff factor: easy 0, med 1, hard 2\n        const createReturn = (skullFactor, buffFactor) => {\n            return { skullFactor, buffFactor };\n        }\n        switch (difficulty) {\n            case 1:\n                return createReturn(3.0, 0.0);\n            case 2:\n                return createReturn(2.5, 0.0);\n            case 3:\n                return createReturn(2.5, 1.0);\n            case 4:\n                return createReturn(2.0, 1.0);\n            case 5:\n                return createReturn(2.0, 2.0);\n        }\n    }\n\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(engine: Engine) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(engine.drawWidth / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(engine.drawHeight / tile.height); \n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows*numberOfCols; row++) {\n\n                tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    public getTileMap(): TileMap {\n        return this.tileMap;\n    }\n}","import { Actor, Sprite, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>) {\n        super();\n        this.addDrawing(texture);\n        this.sprite = texture.asSprite();\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerup\", this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    private onClickWrapper(onClick: Supplier<void>): Supplier<void> {\n        return () => {\n            this.sprite.clearEffects();\n            onClick();\n        }\n    }\n\n    private onDown: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.sprite.clearEffects();\n    }\n\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.backgroundSound) {\n            this.backgroundSound = Resources.backgroundMusic;\n            this.backgroundSound.loop = true;\n            this.backgroundSound.play(0.1);\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        this.currentSound = sound;\n        if (after) {\n            sound.play().then(after);\n        } else {\n            sound.play();\n        }\n    }\n\n}","import { Texture, Vector } from \"excalibur\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n    \n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (Config.menuHeight/2) //adjust for menu size\n            - ((ProgressionManager.get().getGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - Config.menuHeight;\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Help extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n    exit.scale = new Vector(Config.uiItemSize / exitT.width, Config.uiItemSize / exitT.height);\n    exit.setHeight(Config.uiItemSize);\n    exit.setWidth(Config.uiItemSize);\n    exit.x = engine.drawWidth - Config.uiItemSize / 2 - Config.gridPadding;\n    exit.y = Config.uiItemSize / 2 + Config.gridPadding;\n    this.add(exit);\n  }\n  \n  public onActivate() {\n  }\n  \n  public onDeactivate() {\n  }\n} \n","import { Actor, Label, Vector, SpriteFont, TextAlign, BaseAlign } from \"excalibur\";\nimport { Resources, uiHeart } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n\n    private leftButton: Actor;\n    private rightButton: Actor;\n    private numberLabel: Label;\n\n    public constructor(min: number, max: number, current: number, x: number, y: number, fontSize: number) {\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n\n        //central Number Label\n        const font = new SpriteFont(Resources.fontNumbers, '0123456789 ', true, 11, 1, 27, 32);\n        this.numberLabel = new Label(`${current}`, x, y, null, font);\n        //this.numberLabel.anchor = new Vector(1, 1);\n        this.numberLabel.fontSize = this.fontSize;\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n        console.log(this.numberLabel);\n\n        //left button\n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButton.x = x - this.fontSize\n        this.leftButton.y = y;\n        this.leftButton.scale = new Vector(this.fontSize/Resources.uiLeft.width, this.fontSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(this.fontSize);\n        this.leftButton.setWidth(this.fontSize);\n        \n\n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButton.x = x + this.fontSize;\n        this.rightButton.y = y;\n        this.rightButton.scale = new Vector(this.fontSize/Resources.uiRight.width, this.fontSize/Resources.uiRight.height);\n        this.rightButton.setHeight(this.fontSize);\n        this.rightButton.setWidth(this.fontSize);\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel\n        ];\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Label, Color, Actor } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport BackgroundManager from '../engine/backgroundManager';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progressionManager';\nimport { MainMenu } from './mainMenu';\n\nexport class Options extends ex.Scene {\n\n  private engine;\n  private numberSelector: NumberSelector;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      this.onExit\n    );\n\n    this.addGridSize();\n\n    exit.scale = new Vector(Config.uiItemSize / exitT.width, Config.uiItemSize / exitT.height);\n    exit.setHeight(Config.uiItemSize);\n    exit.setWidth(Config.uiItemSize);\n    exit.x = engine.drawWidth - Config.uiItemSize / 2 - Config.gridPadding;\n    exit.y = Config.uiItemSize / 2 + Config.gridPadding;\n    this.add(exit);\n    \n  }\n\n  private onExit = () => {\n    ProgressionManager.get().setGridSize(this.numberSelector.getCurrent());\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n  private addGridSize(): void {\n    this.numberSelector = new NumberSelector(2, 9, ProgressionManager.get().getGridSize(), this.engine.drawWidth/2, this.engine.drawHeight/2, Config.uiItemSize);\n    this.numberSelector.getDrawables()\n    .forEach(i => this.add(i));\n  }\n  \n  public onActivate() {\n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progressionManager';\nimport { calcDimensionsSingleObject, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1.5)\n    victoryActor.setHeight(dims.height);\n    victoryActor.setWidth(dims.width);\n    victoryActor.scale = dims.scale;\n    victoryActor.on('pointerup', () => {\n      ProgressionManager.get().progress();\n      this.engine.goToScene(Scenes.GAME_WINDOW);\n    });\n    this.add(victoryActor);\n    this.add(new BackgroundManager(engine).getTileMap())\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine, Actor } from 'excalibur';\nimport ProgressionManager from '../engine/progressionManager';\nimport { calcDimensionsSingleObject } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    const dims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(dims.height);\n    gameOverActor.setWidth(dims.width);\n    gameOverActor.scale = dims.scale;\n    gameOverActor.on('pointerup', () => {\n      ProgressionManager.get().resetProgress();\n      this.engine.goToScene(Scenes.MAIN_MENU);\n    });\n    this.add(new BackgroundManager(engine).getTileMap())\n\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      suppressPlayButton: true //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Vector, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(Scenes.GAME_WINDOW),\n    );\n    this.sizeProperly(this.start, 0.4, 0.5, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => this.game.goToScene(Scenes.OPTIONS),\n    );\n    this.sizeProperly(this.options, 0.4, 0.5, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => this.game.goToScene(Scenes.HELP),\n    );\n    this.sizeProperly(this.help, 0.4, 0.5, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.title.addDrawing(Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progressionManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + Config.menuHeight / 2\n            - ((ProgressionManager.get().getGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"62acd8dee047ebce1a93d144e5e13474.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"6f20cd91097c8be0d36eaad2bf6244ec.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport { Config } from \"../../resources\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(Config.uiItemSize/texture.width, Config.uiItemSize/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport { Config } from \"../resources\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * Config.uiItemSize), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * Config.uiItemSize), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream, Function, Optional } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Label } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport { MainMenu } from \"../scenes/mainMenu\";\nimport ProgressionManager from \"../engine/progressionManager\";\n\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinatior implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinatior {\n        \n        const coordinator: GameCoordinatior = new GameCoordinatior(\n            engine,\n            NumberCoordinator.create(Config.uiItemSize/2, Config.uiItemSize/2, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(Config.uiItemSize/2, Config.uiItemSize * 1.5, Config.maxAttack, () => { }, Resources.uiSword)           \n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, ProgressionManager.get().getGridSize(), engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n    \n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n       const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n        }\n    } \n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinatior } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport SoundManager from '../engine/soundManager';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { Actor, Engine, Color, Texture, Vector } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { Scenes } from './scenes';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator;\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    /*\n    const bar = new Actor();\n    bar.y = Config.menuHeight;\n    bar.x = this.engine.drawWidth/2;\n    bar.setHeight(1);\n    bar.setWidth(this.engine.drawWidth)\n    bar.color = Color.Red;\n    bar\n    this.add(bar);//todo remove\n    */\n\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n\n    exit.scale = new Vector(Config.uiItemSize / exitT.width, Config.uiItemSize / exitT.height);\n    exit.setHeight(Config.uiItemSize);\n    exit.setWidth(Config.uiItemSize);\n    exit.x = engine.drawWidth - Config.uiItemSize / 2 - Config.gridPadding;\n    exit.y = Config.uiItemSize / 2 + Config.gridPadding;\n    this.add(exit);\n\n    //todo move this to be actually score keeper\n    const coins: Actor = new Actor();\n    coins.addDrawing(Resources.uiCoins);\n    coins.scale = new Vector(Config.uiItemSize / Resources.uiCoins.width, Config.uiItemSize / Resources.uiCoins.height);\n    coins.x = Config.uiItemSize / 2;\n    coins.y = Config.uiItemSize * 2.5;\n    this.add(coins);\n\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    const coordinator: GameCoordinatior = GameCoordinatior.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n\n    //cordova specific\n    //document.addEventListener(\"backbutton\", this.onBackButton);\n  }\n\n  private onBackButton = () => this.engine.goToScene(Scenes.MAIN_MENU);\n\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n\n    //document.removeEventListener(\"backbutton\", this.onBackButton);\n  }\n} \n","import { GameWindow } from './scenes/gameWindow';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, new Options(game));\ngame.add(Scenes.HELP, new Help(game));\n\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}