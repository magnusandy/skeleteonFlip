{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/engine/managers/sizingManager.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/managers/soundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/engine/progression/playerSettingsManager.ts","webpack:///./src/engine/managers/fontManager.ts","webpack:///./src/actors/bars/exitButton.ts","webpack:///./src/engine/managers/backgroundManager.ts","webpack:///./src/scenes/BaseScene.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/engine/progression/gridState.ts","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/scenes/gameWindows/gameWindowBase.ts","webpack:///./src/modal/modal.tsx","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/title.png","webpack:///./src/images/sword.png","webpack:///./src/images/skull.png","webpack:///./src/images/potion.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/coin.png","webpack:///./src/actors/upgrades/upgradeWidget.ts","webpack:///./src/scenes/upgrades.ts","webpack:///./src/scenes/gameWindows/gridGameWindow.ts","webpack:///./src/actors/bars/coinCount.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/scenes/gameWindows/storyGameWindow.ts","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/game/GameLoader.ts","webpack:///./src/engine/game/Game.ts","webpack:///./src/actors/bars/scrollBar.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/sounds/button.wav","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/fonts/myMono.png","webpack:///./src/images/victory.png","webpack:///./src/images/upgradesTitle.png","webpack:///./src/images/upgrades/grid.png","webpack:///./src/images/upgrades/difficulty.png","webpack:///./src/images/ui/scroll.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/coin.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/optionTitle.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/menu/upgrade.png","webpack:///./src/images/menu/start.png","webpack:///./src/images/menu/playing.png","webpack:///./src/images/menu/options.png","webpack:///./src/images/menu/next.png","webpack:///./src/images/menu/menu.png","webpack:///./src/images/menu/intro.png","webpack:///./src/images/menu/help.png","webpack:///./src/images/menu/credits.png","webpack:///./src/images/menu/confirm.png","webpack:///./src/images/menu/cards.png","webpack:///./src/images/icon-512.png","webpack:///./src/images/icon-192.png","webpack:///./src/images/helpTitle.png","webpack:///./src/images/card.png","webpack:///./src/images/background.png","webpack:///./src/images/background.old.png","webpack:///./src/images/GameOver.png","webpack:///./src/images sync ^\\.\\/.*$","webpack:///./src/actors/upgrades/upgrade.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","upgrade_1","reqImg","imgpath","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","cardsMenu","introMenu","creditsMenu","playingMenu","confirmMenu","nextMenu","menuMenu","upgradeMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","uiScroll","optionTitle","helpTitle","upgradeTitle","gridTile","difficultyTile","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","buttonSound","backgroundTile","Resources","Texture","gameOver","cardMenu","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","Upgrades","gridSize","create","description","prices","level","price","difficulty","t","e","SizingManager","engine","this","initialize","singleton","console","log","isMobile","drawWidth","getUIItemSize","getUIButtonSizing","padding","maxScale","getMenuHeight","difficulty_1","playerSettingsManager_1","ProgressionManager","getGameGridSize","ps","isProgressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","getMaxGridSize","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","setProgressionDisabled","isProgressDisabled","resetProgress","getLevelString","Scenes","progressionManager_1","STORY_GAME_WINDOW","GRID_GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","UPGRADES","getGameWindow","SpriteEffects_1","soundManager_1","resources_1","helpers_1","ButtonBase","_super","texture","onClick","disabled","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","width","height","addDrawing","on","EventTypes","PointerUp","onClickWrapper","__extends","getSprite","safePointerUp","playSoundInterrupt","setDisabled","Actor","SoundManager","soundManager","disableSound","backgroundSound","stop","backgroundMusicStart","isSoundOff","volume","loop","play","backgroundMusicEnd","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","event","ev","type","java8script_1","localForage","gridState_1","PlayerSettingsManager","toggleSound","progressionDisabled","chosenDiff","chosenGridSize","maxLevel","maxDiff","storyGrid","practiceGrid","totalCoins","soundOff","chosenDifficulty","maxGrid","maxDifficulty","config","version","size","storeName","getItem","STORE_KEY","v","DEFAULT","saveData","deserializeV1","saveGridState","gridState","Optional","ofNullable","saveToStorage","getGridState","newCurrent","newStage","difficutly","setIsSoundOff","isProgDisabled","getTotalCoins","setTotalCoins","newTotal","setMaxGridSize","newVal","getMaxDiff","setMaxDiff","newDiff","serializeV1","getDifficultyLevel","map","g","toSaveState","orElse","save","GridState","fromSaveState","setItem","clearStorage","VERY_EASY","EASY","empty","FontManager","generalMono","SpriteFont","getMono","setPrototypeOf","__proto__","Array","constructor","buttonBase_1","ExitButton","setHeight","setWidth","x","y","BackgroundManager","tile","numberOfCols","Math","ceil","numberOfRows","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","getDefaultTileMap","drawHeight","getCustomTileMap","backgroundManager_1","scrollBar_1","BaseScene","scrollBar","add","setBackround","bottomOfBottomElement","addTileMap","initScroll","setScrollBottom","camera","strategy","lockToActorAxis","Axis","Y","createButton","dims","button","Scene","CardType","ex","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","calcCardDimensions","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","silentSetFlipped","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","callbackProvider","skeletonCardCallback","attackCardCallback","coinCardCallback","potionCardCallback","grid","hearts","swords","coins","getGridSize","getHearts","getSwords","getCoins","Stream","ofValues","cardState","toArray","CardState","getType","difficultyLevel","buff","text","buffFactor","skeletonFactor","difficultyName","of","NORMAL","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","coordinator_1","scenes_1","exitButton_1","GameWindowBase","onInitialize","goToScene","coordinator","GameCoordinator","onActivate","getAllActors","forEach","onDeactivate","remove","React","ReactModal","react_dom_1","xButton","skullImage","swordImage","potionImage","coinImage","heartUIImg","swordUIImage","threeImage","styles","margin","fontSize","flex","textAlign","h1","holder","imgHolder","cardImg","ModalRenderer","isOpen","setOpenAndRerender","innerStuff","render","open","closeFunc","props","createElement","E","__assign","document","getElementById","upgradeModal","upgradeDetails","style","onClickAndClose","onclick","introModal","howToPlayModal","src","alt","cardModal","textModal","content","borderRadius","borderWidth","borderColor","appElement","float","position","right","top","onPointerUp","borderStyle","minHeight","display","Component","modal_1","fontManager_1","UpgradeWidget","tileDims","tileTexture","label","details","purchaseOnClick","tileButton","modalOnClick","Label","getRight","baseAlign","BaseAlign","Middle","TextAlign","Left","getDrawables","getBottom","updateDetails","newDeets","BaseScene_1","upgradeWidget_1","UpgradeScene","coinsLabel","playercoinsLabel","sizing","getDetails","currentgrid","currentDiff","asSprite","coinsLabelString","Center","psm","gameWindowBase_1","GridGameWindow","currentOptionGridSize","resetGame","CoinCount","currentCount","countIcon","countLabel","coinCount","coinIcon","coinActor","createCoinIcon","createCountLabel","getCoinCount","addToCoinCount","toAdd","drawables","actor","color","fromHex","card_1","Count","index","initialCount","setCount","leftSide","clone","count","GridCoordinator","skeletonCount","potionCount","swordCount","blankGrid","createGridFromState","state","loadSavedGrid","orElseGet","createNewGrid","coord","initializeSkeletons","initializeBuffs","currentGridState","cardStates","getGridAsList","flatMap","a","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","needMoreSkeletons","randomCoord","isCardACoin","insertCard","needMoreBuffs","generateBuffCard","initializeFromState","createdCard","random","floor","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getCurrent","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","coinCount_1","updateLabels","rowCounts","skeletonCountForRow","columnCounts","skeletonCountForCol","attackCoordinator","healthCoordinator","saveGridProgress","checkIfCompleteGame","shouldCreateFresh","mm","saveState","gs","gridCoordinator","createRowCountCards","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","allFlipped","allMatch","progman","LevelDisplay","startingLevel","createLabelText","PREFIX","updateLevel","newLevel","level_1","StoryGameWindow","levelDisplay","Help","arguments","modalRenderer","titleDims","centerx","intro","playing","cards","credits","RadioButton","defaultValue","onToggle","currentSprite","toggleButton","checked","setCheckedDrawing","ifPresent","func","checkedSprite","uncheckedSprite","setOnToggle","isChecked","setChecked","radioButton_1","LabeledRadio","defaultVal","textSize","buttonSize","labelWidth","getTextWidth","ctx","radio","addOnToggle","NumberSelector","min","updateDisabled","isDisabled","leftButtonSprite","rightButtonSprite","disColor","topLabel","numberLabel","Colorize","leftButton","rightButton","Black","labelText","addBy","nextCurrent","setCurrent","numberSelector_1","labeledRadio_1","Options","onConfirm","progressionToggle","itemSize","addTitle","addSoundToggle","addDifficultySize","addProgressionToggle","callbackForEnabling","addGridSize","createbuttonDims","createButtonY","Victory","onNext","buttonDims","imageDims","offset","victoryActor","nextButton","GameOver","onMenu","gameOverActor","playerIdleAnimation","getAnimationForAll","menuButton","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","pointerScope","Input","PointerScope","Canvas","suppressPlayButton","start","loader","Engine","ScrollBar","isDragging","scrollBarBotton","scrollBarTop","pe","worldY","pointer","lastWorldPos","num","visible","MainMenu","centerX","upgrades","options","help","./GameOver.png","./background.old.png","./background.png","./card.png","./coin.png","./helpTitle.png","./icon-192.png","./icon-512.png","./menu/cards.png","./menu/confirm.png","./menu/credits.png","./menu/help.png","./menu/intro.png","./menu/menu.png","./menu/next.png","./menu/options.png","./menu/playing.png","./menu/start.png","./menu/upgrade.png","./numbers/0.png","./numbers/1.png","./numbers/2.png","./numbers/3.png","./numbers/4.png","./numbers/5.png","./numbers/6.png","./numbers/7.png","./numbers/8.png","./numbers/9.png","./optionTitle.png","./potion.png","./skull.png","./sword.png","./title.png","./ui/blank.png","./ui/coin.png","./ui/coinPile.png","./ui/heart.png","./ui/left.png","./ui/right.png","./ui/scroll.png","./ui/sword.png","./ui/x.png","./upgrades/difficulty.png","./upgrades/grid.png","./upgradesTitle.png","./victory.png","webpackContext","req","id","webpackContextResolve","code","keys","resolve","Upgrade","currentLevelToPriceMap","upDesc","Comparator","collect","Collectors","toMap","mainMenu_1","Game_1","GameLoader_1","gameOver_1","victory_1","options_1","help_1","storyGameWindow_1","gridGameWindow_1","upgrades_1","game","mainMenu","k","addResource"],"mappings":"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AJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAA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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([302,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Texture, Sound } from \"excalibur\";\nimport  Upgrade from \"./actors/upgrades/upgrade\";\n\nconst reqImg = (imgpath: string) => require(`./images/${imgpath}`);\n\nconst sword = reqImg('sword.png');\nconst skull = reqImg('skull.png');\nconst potion = reqImg('potion.png');\nconst coin = reqImg('coin.png');\nconst card = reqImg('card.png');\nconst startMenu = reqImg('menu/start.png');\nconst optionMenu = reqImg('menu/options.png');\nconst helpMenu = reqImg('menu/help.png');\nconst cardsMenu = reqImg('menu/cards.png');\nconst introMenu = reqImg('menu/intro.png');\nconst creditsMenu = reqImg('menu/credits.png');\nconst playingMenu = reqImg('menu/playing.png');\nconst confirmMenu = reqImg('menu/confirm.png');\nconst nextMenu = reqImg('menu/next.png');\nconst menuMenu = reqImg('menu/menu.png');\nconst upgradeMenu = reqImg('menu/upgrade.png');\n\nconst title = reqImg('title.png');\nconst gameOverImg = reqImg('GameOver.png');\nconst zero = reqImg('numbers/0.png');\nconst one = reqImg('numbers/1.png');\nconst two = reqImg('numbers/2.png');\nconst three = reqImg('numbers/3.png');\nconst four = reqImg('numbers/4.png');\nconst five = reqImg('numbers/5.png');\nconst six = reqImg('numbers/6.png');\nconst seven = reqImg('numbers/7.png');\nconst eight = reqImg('numbers/8.png');\nconst nine = reqImg('numbers/9.png');\n\nconst uiSword = reqImg('ui/sword.png');\nconst uiHeart = reqImg('ui/heart.png');\nconst uiCoins = reqImg('ui/coinPile.png');\nconst uiLeft = reqImg('ui/left.png');\nconst uiRight = reqImg('ui/right.png');\nconst uiX = reqImg('ui/x.png');\nconst uiBlank = reqImg('ui/blank.png');\nconst uiScroll = reqImg('ui/scroll.png');\n\nconst optionTitle = reqImg('optionTitle.png');\nconst helpTitle = reqImg('helpTitle.png');\nconst upgradeTitle = reqImg('upgradesTitle.png');\n\nconst gridTile = reqImg('upgrades/grid.png');\nconst difficultyTile = reqImg('upgrades/difficulty.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = reqImg('victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\nconst buttonSound = require('./sounds/button.wav');\n\nconst backgroundTile = reqImg('background.png');\n\nconst Resources = {\n    victory: new Texture(victory),\n    gameOver: new Texture(gameOverImg),\n    title: new Texture(title),\n    sword: new Texture(sword),\n    skull: new Texture(skull),\n    potion: new Texture(potion),\n    coin: new Texture(coin),\n    card: new Texture(card),\n\n    startMenu: new Texture(startMenu),\n    optionMenu: new Texture(optionMenu),\n    helpMenu: new Texture(helpMenu),\n    cardMenu: new Texture(cardsMenu),\n    introMenu: new Texture(introMenu),\n    creditsMenu: new Texture(creditsMenu),\n    playingMenu: new Texture(playingMenu),\n    confirmMenu: new Texture(confirmMenu),\n    nextMenu: new Texture(nextMenu),\n    menuMenu: new Texture(menuMenu),\n    upgradeMenu: new Texture(upgradeMenu),\n\n    optionTitle: new Texture(optionTitle),\n    helpTitle: new Texture(helpTitle),\n    backgroundTile: new Texture(backgroundTile),\n    upgradeTitle: new Texture(upgradeTitle),\n\n    0: new Texture(zero),\n    1: new Texture(one),\n    2: new Texture(two),\n    3: new Texture(three),\n    4: new Texture(four),\n    5: new Texture(five),\n    6: new Texture(six),\n    7: new Texture(seven),\n    8: new Texture(eight),\n    9: new Texture(nine),\n\n    uiSword: new Texture(uiSword),\n    uiHeart: new Texture(uiHeart),\n    uiLeft: new Texture(uiLeft),\n    uiRight: new Texture(uiRight),\n    uiX: new Texture(uiX),\n    uiBlank: new Texture(uiBlank),\n    uiCoins: new Texture(uiCoins),\n    uiScroll: new Texture(uiScroll),\n\n    gridTile: new Texture(gridTile),\n    difficultyTile: new Texture(difficultyTile),\n\n    myMono: new Texture(fontMono),\n\n    cardSound: new Sound(cardSound),\n    boneSound: new Sound(boneSound),\n    coinSound: new Sound(coinSound),\n    laughSound: new Sound(laughSound),\n    potionSound: new Sound(potionSound),\n    swordSound: new Sound(swordSound),\n    victorySound: new Sound(victorySound),\n    buttonSound: new Sound(buttonSound),\n    backgroundMusic: new Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport const Upgrades = {\n    gridSize: Upgrade.create({\n        title: \"Grid Size\",\n        description: \"Unlock bigger grids to increase the challenge. This will allow story mode to go to a higher max level, as well as allow the larger sizes to be chosen for practice.\",\n        prices: [\n            {level: 1, price: 10},\n            {level: 2, price: 20},\n            {level: 3, price: 30},\n            {level: 4, price: 40},\n            {level: 5, price: 50},\n            {level: 6, price: 60},\n            {level: 7, price: 70},\n            {level: 8, price: 80},\n            {level: 9, price: 90}\n        ]\n    }),\n    difficulty: Upgrade.create({\n        title: \"Difficulty\",\n        description: \"Things getting routine? Upgrade the difficulty to increase the challenge. Higher difficulties mean less room for error, more skeletons, but more rewards!\",\n        prices: [\n            {level: 1, price: 10},\n            {level: 2, price: 20},\n            {level: 3, price: 30},\n            {level: 4, price: 40},\n            {level: 5, price: 50},\n        ]\n    }),\n}\n\nexport { Resources, Config, uiHeart }\n","import { Engine } from \"excalibur\";\n\nexport interface IButtonSizing {\n    padding: number, \n    maxScale: number\n}\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"ERROR: Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 1200; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getUIButtonSizing(): IButtonSizing {\n        return this.isMobile() \n        ? {padding: 0.4, maxScale: 0.3}\n        : {padding: 0.4, maxScale: 0.5}\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 4;\n    }\n\n}","import { Difficulty } from \"./difficulty\";\nimport PlayerSettingsManager from \"./playerSettingsManager\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private constructor() {\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager();\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = PlayerSettingsManager.get();\n        if(ps.isProgressionDisabled()) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return PlayerSettingsManager.get().getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return PlayerSettingsManager.get().getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public isProgressionDisabled() {\n        return PlayerSettingsManager.get().isProgressionDisabled();\n    }\n\n    public progress(): void {\n        if(!PlayerSettingsManager.get().isProgressionDisabled()) {\n            const currentLevel = PlayerSettingsManager.get().getCurrentLevel();\n            const currentStage = PlayerSettingsManager.get().getCurrentStage();\n    \n            if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n                //on the last stage of the level, need to find out if we can move on or just move up stages\n                if(currentLevel === PlayerSettingsManager.get().getMaxGridSize()-2) {\n                    // on the max upgraded level just increase stage\n                    PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n                } else {\n                    PlayerSettingsManager.get().setCurrentStage(1);\n                    PlayerSettingsManager.get().setCurrentLevel(currentLevel + 1);\n                }\n            } else {\n                //move on to the next stage, no extra logic\n                PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n            }  \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        PlayerSettingsManager.get().setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        PlayerSettingsManager.get().setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public setProgressionDisabled(isProgressDisabled: boolean) {\n        return PlayerSettingsManager.get().setProgressionDisabled(isProgressDisabled);\n    }\n\n    public resetProgress(): void {\n        const ps = PlayerSettingsManager.get();\n        if (!ps.isProgressionDisabled()) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        if (PlayerSettingsManager.get().getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${PlayerSettingsManager.get().getCurrentLevel()}.${PlayerSettingsManager.get().getCurrentStage()}`;\n        }\n    }\n}","import ProgressionManager from \"../engine/progression/progressionManager\";\n\nexport enum Scenes {\n    STORY_GAME_WINDOW = \"storyGameWindow\",\n    GRID_GAME_WINDOW = \"gridGameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n    UPGRADES = \"upgrades\"\n}\n\nexport function getGameWindow(): Scenes {\n    return ProgressionManager.get().isProgressionDisabled()\n        ? Scenes.GRID_GAME_WINDOW \n        : Scenes.STORY_GAME_WINDOW;\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport SoundManager from \"../../engine/managers/soundManager\";\nimport { Resources } from \"../../resources\";\nimport { safePointerUp } from \"../../engine/helpers\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n    private disabled: boolean;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>, disabled?: boolean) {\n        super();\n        this.disabled = disabled ? disabled : false;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    public getSprite():Sprite {\n        return this.sprite;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return safePointerUp(() => {\n            if (!this.disabled) {\n                this.sprite.clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n                onClick();\n            }\n        });\n    }\n\n    private onDown: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.2))\n        }\n\n    }\n\n    private onEnter: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.1))\n        }\n\n    }\n\n    private onExit: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n        }\n    }\n\n    public setDisabled(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport PlayerSettingsManager from \"../progression/playerSettingsManager\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public backgroundMusicStart(): void {\n        if (!PlayerSettingsManager.get().isSoundOff()) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.volume = 0.1;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play();\n            }\n        }\n    }\n\n    public backgroundMusicEnd(): void {\n        if(PlayerSettingsManager.get().isSoundOff()) {\n            if (this.backgroundSound) {\n                this.backgroundSound.stop();\n                this.backgroundSound = null;\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!PlayerSettingsManager.get().isSoundOff()) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import { Texture, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n\n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth * scaleToUse,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nfunction safePointerUp(onClick: Supplier<void>): (event?: any) => void {\n    return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                onClick();\n            }\n    }\n}\n\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture,\n    safePointerUp\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport * as localForage from \"localforage\";\nimport { CardType } from \"../../actors/card/card\";\nimport { GridState } from \"./gridState\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\n\ninterface SaveDataV1 {\n    version: number;\n    soundOff: boolean;\n    progressionDisabled: boolean;\n    chosenDifficulty: number; //difficulty level number\n    chosenGridSize: number;\n    maxLevel: number;\n    maxDifficulty: number; //difficulty level number\n    currentLevel: number;\n    currentStage: number;\n    storyGrid?: SaveDataGrid;\n    practiceGrid?: SaveDataGrid;\n    totalCoins: number;\n}\n\nexport interface SaveDataGrid {\n    hearts: number;\n    swords: number;\n    coins: number;\n    gridSize: number;\n    grid: SaveCellData[][];\n};\n\nexport interface SaveCellData {\n    type: CardType;\n    flipped: boolean;\n}\n\n\nexport default class PlayerSettingsManager {\n    private static STORE_KEY = 'player_settings_v1';\n    public static singleton: PlayerSettingsManager;\n    private static DEFAULT: PlayerSettingsManager = new PlayerSettingsManager(false, false, Difficulty.VERY_EASY, 3, 5, Difficulty.EASY, 1, 1, Optional.empty(), Optional.empty(), 0);\n\n\n    //Settings\n    private soundOff: boolean;\n    private progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    private maxGrid: number; \n    private maxDifficulty: Difficulty;\n\n    //Progression\n    private totalCoins: number; //total coins collected, outside of current games\n    private currentLevel: number;\n    private currentStage: number;\n    private storyGrid: Optional<GridState>;\n    private practiceGrid: Optional<GridState>;\n\n\n    private constructor(toggleSound: boolean,\n        progressionDisabled: boolean,\n        chosenDiff: Difficulty,\n        chosenGridSize: number,\n        maxLevel: number,\n        maxDiff: Difficulty,\n        currentLevel: number,\n        currentStage: number,\n        storyGrid: Optional<GridState>,\n        practiceGrid: Optional<GridState>,\n        totalCoins: number,\n    ) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxGrid = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n        this.storyGrid = storyGrid;\n        this.practiceGrid = practiceGrid;\n        this.totalCoins = totalCoins;\n    }\n\n    public static get(): PlayerSettingsManager {\n        return this.singleton;\n    }\n\n    public static initialize(): Promise<any> {\n        localForage.config({\n            name: 'skeletonFlip',\n            version: 1.0,\n            size: 4980736,\n            storeName: 'playerSettings',\n            description: 'Store save data'\n        });//try with no settings\n        return localForage.getItem(PlayerSettingsManager.STORE_KEY, (e, v) => {\n            console.log(`retrieved from storage:`, [v]);\n            if (e) {\n                console.log(`problem retrieving from store: ${e}`);\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else if (!v) {\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else {\n                const saveData: any = v;\n                if (saveData.version === 1) {\n                    this.singleton = PlayerSettingsManager.deserializeV1(saveData);\n                }\n            }\n        });\n    }\n    /** \n    * clear grid state\n    */\n    public saveGridState(): void;\n    /** \n     * clear grid state\n     */    \n    public saveGridState(gridState: GridState);\n    public saveGridState(gridState?: GridState): void {\n        if (this.isProgressionDisabled()) {\n            this.practiceGrid = Optional.ofNullable(gridState);\n        } else {\n            this.storyGrid = Optional.ofNullable(gridState);\n        }\n        this.saveToStorage();\n    }\n\n    public getGridState(): Optional<GridState> {\n        if (this.isProgressionDisabled()) {\n            return this.practiceGrid;\n        } else {\n            return this.storyGrid;\n        }\n    }\n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n        this.saveToStorage();\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n        this.saveToStorage();\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n        this.saveToStorage();\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n        this.saveToStorage();\n    }\n\n    public isSoundOff(): boolean {\n        return this.soundOff;\n    }\n\n    public setIsSoundOff(isSoundOff: boolean): void {\n        this.soundOff = isSoundOff;\n        this.saveToStorage();\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n\n    public setProgressionDisabled(isProgDisabled: boolean) {\n        this.progressionDisabled = isProgDisabled;\n        this.saveToStorage();\n    }\n\n    public isProgressionDisabled(): boolean {\n        return this.progressionDisabled;\n    }\n\n    public getTotalCoins(): number {\n        return this.totalCoins;\n    }\n\n    public setTotalCoins(newTotal: number): void {\n        this.totalCoins = newTotal;\n        this.saveToStorage();\n    }\n\n    public getMaxGridSize(): number {\n        return this.maxGrid;\n    }\n\n    public setMaxGridSize(newVal: number): void {\n        this.maxGrid = newVal;\n        this.saveToStorage();\n    }\n\n    public getMaxDiff(): Difficulty {\n        return this.maxDifficulty;\n    }\n\n    public setMaxDiff(newDiff: Difficulty): void {\n        this.maxDifficulty = newDiff;\n        this.saveToStorage();\n    }\n\n    private serializeV1(): SaveDataV1 {\n        return {\n            version: 1,\n            soundOff: this.soundOff,\n            progressionDisabled: this.progressionDisabled,\n            chosenDifficulty: this.chosenDifficulty.getDifficultyLevel(),\n            chosenGridSize: this.chosenGridSize,\n            maxLevel: this.maxGrid,\n            maxDifficulty: this.maxDifficulty.getDifficultyLevel(),\n            currentLevel: this.currentLevel,\n            currentStage: this.currentStage,\n            storyGrid: this.storyGrid.map(g => g.toSaveState()).orElse(null),\n            practiceGrid: this.practiceGrid.map(g => g.toSaveState()).orElse(null),\n            totalCoins: this.totalCoins,\n        }\n\n    }\n\n    private static deserializeV1(save: SaveDataV1): PlayerSettingsManager {\n        return new PlayerSettingsManager(\n            save.soundOff,\n            save.progressionDisabled,\n            Difficulty.getByDifficultyLevel(save.chosenDifficulty),\n            save.chosenGridSize,\n            save.maxLevel,\n            Difficulty.getByDifficultyLevel(save.maxDifficulty),\n            save.currentLevel,\n            save.currentStage,\n            Optional.ofNullable(save.storyGrid).map(s => GridState.fromSaveState(s)),\n            Optional.ofNullable(save.practiceGrid).map(s => GridState.fromSaveState(s)),\n            save.totalCoins\n        );\n    }\n\n    private saveToStorage() {\n        localForage.setItem(\n            PlayerSettingsManager.STORE_KEY,\n            this.serializeV1(),\n        );\n    }\n\n    public clearStorage() { //todo this is temporary, should build in permenatn button or something\n        localForage.setItem(PlayerSettingsManager.STORE_KEY, null);\n    }\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import ButtonBase from \"./buttonBase\";\nimport { Vector, Engine } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport { Supplier } from \"java8script\";\n\nexport class ExitButton extends ButtonBase {\n\n    public constructor(engine: Engine, onExit: Supplier<void>) {\n        const texture = Resources.uiX;\n        super(texture, onExit);\n        this.scale = new Vector(Config.exitButtonSize / texture.width, Config.exitButtonSize / texture.height);\n        this.setHeight(Config.exitButtonSize);\n        this.setWidth(Config.exitButtonSize);\n        this.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n        this.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    }\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(width: number, height: number) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(width / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(height / tile.height);\n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows * numberOfCols; row++) {\n\n            tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    private getTileMap(): TileMap {\n        return this.tileMap;\n    }\n\n    public static getDefaultTileMap(engine: Engine): TileMap {\n        return new BackgroundManager(engine.drawWidth, engine.drawHeight).getTileMap();\n    }\n\n    public static getCustomTileMap(width, height): TileMap {\n        return new BackgroundManager(width, height).getTileMap();\n    }\n}","import { Scene, Engine, Axis, Texture } from \"excalibur\";\nimport BackgroundManager from \"../engine/managers/backgroundManager\";\nimport { Config } from \"../resources\";\nimport ScrollBar from \"../actors/bars/scrollBar\";\nimport { IDimensions } from \"../engine/helpers\";\nimport ButtonBase from \"../actors/bars/buttonBase\";\n\nexport default class BaseScene extends Scene {\n\n    public scrollBar: ScrollBar;\n    public engine: Engine;\n\n    constructor(engine: Engine) {\n        super(engine);\n        this.engine = engine;\n        this.scrollBar = new ScrollBar(engine);\n        this.add(this.scrollBar);//for some reason adding in the initialize makes the drag stop working\n    }\n\n    public setBackround(bottomOfBottomElement: number) {\n        if (bottomOfBottomElement > this.engine.drawHeight) {\n            this.addTileMap(BackgroundManager.getCustomTileMap(this.engine.drawWidth, bottomOfBottomElement + Config.optionPadding));//need to draw to fit the whole canvas rather than just the screen \n        } else {\n            this.addTileMap(BackgroundManager.getDefaultTileMap(this.engine));\n        }\n    }\n\n    public initScroll(bottomOfBottomElement: number) {\n        this.scrollBar.setScrollBottom(this.engine.drawHeight / 2 + (bottomOfBottomElement - this.engine.drawHeight) + Config.optionPadding)\n        this.camera.strategy.lockToActorAxis(this.scrollBar, Axis.Y)\n    }\n\n    public createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n        const button = new ButtonBase(texture, onClick);\n        button.x = x\n        button.y = y\n        button.scale = dims.scale;\n        button.setHeight(dims.height);\n        button.setWidth(dims.width);\n        return button;\n    }\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/managers/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/managers/sizingManager';\nimport { CardCallbackProvider } from './cardCallbackProvider';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight() / 2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.silentSetFlipped();\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n\n    public silentSetFlipped() {\n        this.flipped = true;\n        this.setDrawing(\"flip\");\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n\n    public static create(screenCenter: ex.Vector, row: number, col: number, callbackProvider: CardCallbackProvider, type: CardType, flipped: boolean): Card {\n        let card: Card;\n        if (type === CardType.SKELETON) {\n            card = Card.skeleton(screenCenter, row, col, callbackProvider.skeletonCardCallback);\n        } else if (type === CardType.ATTACK) {\n            card = Card.attack(screenCenter, row, col, callbackProvider.attackCardCallback);\n        } else if (type === CardType.COIN) {\n            card = Card.coin(screenCenter, row, col, callbackProvider.coinCardCallback);\n        } else if (type === CardType.POTION) {\n            card = Card.potion(screenCenter, row, col, callbackProvider.potionCardCallback);\n        }\n\n        if (flipped) {\n            card.silentSetFlipped();\n        }\n        return card;\n    }\n}\n\n","import { CardType } from \"../../actors/card/card\";\nimport { SaveDataGrid, SaveCellData } from \"./playerSettingsManager\";\nimport { Stream } from \"java8script\";\n\nexport class GridState {\n    private hearts: number;\n    private swords: number;\n    private coins: number;\n    private gridSize: number;\n    private grid: CardState[][];\n\n    constructor(gridSize: number, grid: CardState[][], hearts: number, swords: number, coins: number) {\n        this.gridSize = gridSize;\n        this.grid = grid;\n        this.hearts = hearts;\n        this.swords = swords;\n        this.coins = coins;\n    }\n\n    public getGridSize(): number {\n        return this.gridSize;\n    }\n\n    public getGridState(): CardState[][] {\n        return this.grid;\n    }\n\n    public getHearts(): number {\n        return this.hearts;\n    }\n\n    public getSwords(): number {\n        return this.swords;\n    }\n\n    public getCoins(): number {\n        return this.coins;\n    }\n\n    public toSaveState(): SaveDataGrid {\n        const saveGridState: SaveCellData[][] = Stream.ofValues(...this.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(cardState => cardState.toSaveState())\n                .toArray())\n            .toArray();\n        return {\n            hearts: this.getHearts(),\n            swords: this.getSwords(),\n            coins: this.getCoins(),\n            gridSize: this.getGridSize(),\n            grid: saveGridState,\n        };\n    }\n\n    public static fromSaveState(save: SaveDataGrid): GridState {\n        const saveGridState: CardState[][] = Stream.ofValues(...save.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(cardState => CardState.fromSaveState(cardState))\n                .toArray())\n            .toArray();\n        return new GridState(save.gridSize, saveGridState, save.hearts, save.swords, save.coins);\n    }\n}\n\nexport class CardState {\n    private type: CardType;\n    private flipped: boolean;\n\n    constructor(type: CardType, flipped: boolean) {\n        this.type = type;\n        this.flipped = flipped;\n    }\n\n    public getType(): CardType {\n        return this.type;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public toSaveState(): SaveCellData {\n        return {\n            type: this.type,\n            flipped: this.flipped,\n        };\n    }\n\n    public static fromSaveState(save: SaveCellData): CardState {\n        return new CardState(\n            save.type,\n            save.flipped\n        );\n    }\n}","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","import { GameCoordinator } from '../../coordinator/coordinator';\nimport SoundManager from '../../engine/managers/soundManager';\nimport BackgroundManager from '../../engine/managers/backgroundManager';\nimport { Engine, Scene } from 'excalibur';\nimport { Scenes } from '../scenes';\nimport { ExitButton } from '../../actors/bars/exitButton';\n\nexport abstract class GameWindowBase extends Scene {\n\n  protected coordinator: GameCoordinator;\n  protected engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.coordinator = GameCoordinator.initialize(this.engine);\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    this.coordinator.getAllActors()\n      .forEach(c => this.add(c));\n  }\n\n  public onDeactivate() {\n    this.coordinator.getAllActors()\n      .forEach(c => this.remove(c));\n  }\n} \n","\nimport * as React from 'react';\nimport ReactModal = require('react-modal');\nimport { render } from 'react-dom';\nimport { Config } from '../resources';\nimport { TextAlignProperty } from 'csstype';\nimport { Supplier } from 'java8script';\nimport { UpgradeDetails } from '../actors/upgrades/upgradeWidget';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nconst xButton = require('../images/ui/x.png');\nconst skullImage = require('../images/skull.png');\nconst swordImage = require('../images/sword.png');\nconst potionImage = require('../images/potion.png');\nconst coinImage = require('../images/coin.png');\nconst heartUIImg = require('../images/ui/heart.png');\nconst swordUIImage = require('../images/ui/sword.png');\nconst threeImage = require('../images/numbers/3.png');\n\ninterface Styles {\n    p: {\n        padding: string,\n        margin: string,\n        fontSize: number,\n        flex: number,\n        textAlign: TextAlignProperty,\n    },\n    h1: {\n        textAlign: TextAlignProperty,\n    },\n    holder: {\n        width: string,\n    }\n    imgHolder: {\n        width: string,\n        textAlign: TextAlignProperty,\n    }\n    cardImg: {\n        width: number,\n    }\n}\n\nconst styles: Styles = {\n    p: { padding: \"16px\", margin: \"0px\", fontSize: 20, flex: 1, textAlign: \"center\" },\n    h1: { textAlign: \"center\" },\n    holder: {\n        width: \"100%\"\n    },\n    imgHolder: {\n        width: \"100%\",\n        textAlign: \"center\"\n    },\n    cardImg: {\n        width: 100\n    }\n}\n\nexport class ModalRenderer {\n\n    private isOpen: boolean;\n    private static singleton;\n\n    public static get(): ModalRenderer {\n        if (!this.singleton) {\n            this.singleton = new ModalRenderer(false);\n        }\n        return this.singleton;\n    }\n\n    private constructor(isOpen: boolean) {\n        this.isOpen = isOpen;\n    }\n\n    public upgradeModal(upgradeDetails: UpgradeDetails, onClick: () => void) {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>{upgradeDetails.title}</h1>\n            <h2 style={styles.h1}>Price to Upgrade: {upgradeDetails.price}</h2>\n            <h2 style={styles.h1}>Current Level: {upgradeDetails.currentLevel}</h2>\n            <p style={styles.p}>{upgradeDetails.description}</p>\n            <div style={styles.h1}>\n                {PlayerSettingsManager.get().getTotalCoins() > upgradeDetails.price\n                    ? <button onClick={this.onClickAndClose(onClick)}>BUY</button>\n                    : <p style={styles.p}>Not Enough Coins</p>}\n            </div>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    private onClickAndClose(onclick: Supplier<void>): Supplier<void> {\n        return () => {\n            onclick();\n            this.setOpenAndRerender(false);\n        }\n    }\n\n    public introModal() {\n        const innerStuff = (<div >\n            <h1 style={styles.h1}>Introduction</h1>\n            <p style={styles.p}>Welcome to Skeleton Flip!</p>\n            <p style={styles.p}>Flip cards, find coins, drink potions and kill skeletons. The goal of the game is to flip all the cards on the board without running out of hearts.</p>\n            <p style={styles.p}>In Story Mode, you progress through increasingly larger and larger grids, you can unlock larger grid sizes and harder difficulties by collecting coins and unlocking upgrades.</p>\n            <p style={styles.p}>If Story Mode is disabled, you may choose to practice any grid size you like.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public howToPlayModal() {\n        const innerStuff = (<div>\n            <h1 style={styles.h1}>How To Play</h1>\n            <p style={styles.p}>The top right of the game screen shows your health (<img width={20} src={heartUIImg} alt=\"heart\" />) and current attack (<img width={20} src={swordUIImage} alt=\"sword\" />). If you run out of health you lose!</p>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={threeImage} alt=\"three\" />\n            </div>\n            <p style={styles.p}>The numbers on the outer edges of the grid indicate how many skeletons are hiding in that row or column.</p>\n            <p style={styles.p}>Tap cards inside the grid to flip them over. Remember you need to flip every card in the grid to advance, so choose your path wisely!</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public cardModal() {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>Cards</h1>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={skullImage} alt=\"skull\" />\n            </div>\n            <p style={styles.p}>Oh no! Flipping over a skeleton card will hurt you, taking away one health unless you have a sword to defend yourself.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={swordImage} alt=\"sword\" />\n            </div>\n            <p style={styles.p}>Sweep Low! Flipping over a sword card will add to your attack count, no need to fear the next skeleton you flip over, the sword will take care of it!</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={potionImage} alt=\"potion\" />\n            </div>\n            <p style={styles.p}>Tastes like Strawberry! Flipping over a potion card will heal any wounds that you have taken from those nasty skeletons.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={coinImage} alt=\"coin\" />\n            </div>\n            <p style={styles.p}>Take that to the bank! Flipping over a coin card will add to your riches, if you complete a level you will keep the coins you found and can use them for upgrades.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public textModal(title: string, text: string) {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>{title}</h1>\n            <p style={styles.p}>\n                {text}\n            </p>\n            <button onClick={() => PlayerSettingsManager.get().clearStorage()/*//todo Remove*/}>Clear Storage [Dev Tool]</button>\n            <button onClick={() => PlayerSettingsManager.get().setTotalCoins(PlayerSettingsManager.get().getTotalCoins()+10)/*//todo Remove*/}>Add 10 coins [Dev Tool]</button>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    private setOpenAndRerender = (isOpen: boolean, innerStuff?: any) => {\n        this.isOpen = isOpen;\n        this.render({\n            innerStuff: innerStuff,\n            open: this.isOpen,\n            closeFunc: () => this.setOpenAndRerender(false)\n        });\n    }\n\n    private render = (props: Props) => {\n        render(<E {...props} />,\n            document.getElementById('modal')\n        );\n    }\n}\n\ninterface Props {\n    open: boolean;\n    closeFunc: () => void;\n    innerStuff?: any;\n}\n\ninterface State {\n}\n\nexport default class E extends React.Component<Props, State> {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <ReactModal\n                style={{\n                    content: {\n                        borderRadius: \"0px\",\n                        backgroundColor: '#a77600',\n                        borderWidth: 8,\n                        borderColor: \"#402f08\",\n                        padding: \"16px\",\n                    }\n                }}\n                appElement={document.getElementById('modal')}\n                isOpen={this.props.open}>\n                <div style={{ float: \"right\", height: Config.exitButtonSize, position: \"fixed\", right: \"24px\", top: \"24px\" }}>\n                    <a style={{}}>\n                        <img height={Config.exitButtonSize} width={Config.exitButtonSize} src={xButton} alt=\"exit\" onPointerUp={this.props.closeFunc} />\n                    </a>\n                </div>\n                <div style={{ borderRadius: \"16px\", borderStyle: \"solid\", borderWidth: \"4px\", minHeight: \"95%\", backgroundColor: \"#896000\", borderColor: \"#402f08\", display: \"flex\" }}>\n                    {this.props.innerStuff}\n                </div>\n            </ReactModal>\n        );\n    }\n}","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","import { Actor, Label, Texture, BaseAlign, TextAlign } from \"excalibur\";\nimport ButtonBase from \"../bars/buttonBase\";\nimport { IDimensions } from \"../../engine/helpers\";\nimport { ModalRenderer } from \"../../modal/modal\";\nimport { Config } from \"../../resources\";\nimport FontManager from \"../../engine/managers/fontManager\";\nimport SizingManager from \"../../engine/managers/sizingManager\";\n\nexport interface UpgradeDetails {\n    title: string;\n    price: number;\n    currentLevel: number;\n    maxLevel: number;\n    description: string;\n}\n\nexport default class UpgradeWidget {\n    private tileButton: Actor;\n    private label: Label;\n    private purchaseOnClick: () => void;\n    private upgradeDetails: UpgradeDetails;\n\n    public constructor(x, y, tileDims: IDimensions, tileTexture: Texture, label: string, details: UpgradeDetails, onClick: () => void) {\n        this.upgradeDetails = details;\n        this.purchaseOnClick = onClick;\n        this.tileButton = new ButtonBase(tileTexture, () => this.modalOnClick() );\n        this.tileButton.x = x;\n        this.tileButton.y = y;\n        this.tileButton.scale = tileDims.scale;\n        this.tileButton.setHeight(tileDims.height);\n        this.tileButton.setWidth(tileDims.width);\n\n        this.label = new Label(label, this.tileButton.getRight() + Config.gridPadding, y, null, FontManager.get().getMono());\n        this.label.fontSize = SizingManager.get().getUIItemSize();\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Left;\n    }\n\n    public modalOnClick() {\n        ModalRenderer.get().upgradeModal(this.upgradeDetails, this.purchaseOnClick)\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.label,\n            this.tileButton\n        ];\n    }\n\n    public  getBottom(): number {\n        return this.tileButton.getBottom();\n    }\n\n    public updateDetails(newDeets: UpgradeDetails): void {\n        this.upgradeDetails = newDeets;\n    }\n}","import { Scenes } from './scenes';\nimport { Engine, Label, BaseAlign, TextAlign, Actor } from 'excalibur';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport BaseScene from './BaseScene';\nimport FontManager from '../engine/managers/fontManager';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport SizingManager from '../engine/managers/sizingManager';\nimport {calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport { Resources, Config, Upgrades } from '../resources';\nimport UpgradeWidget from '../actors/upgrades/upgradeWidget';\nimport { Difficulty } from '../engine/progression/difficulty';\n\nexport class UpgradeScene extends BaseScene {\n\n  private coinsLabel: Label;\n  private maxGrid: UpgradeWidget;\n  private maxDiff: UpgradeWidget;\n\n  public onInitialize(engine: Engine) {\n    const title = this.title();\n    this.coinsLabel = this.playercoinsLabel(engine.drawWidth / 2, title.getBottom() + Config.optionPadding);\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.gridTile, sizing.padding, sizing.maxScale);\n    \n    this.maxGrid = new UpgradeWidget(\n      engine.drawWidth / 3,\n      this.coinsLabel.getBottom() + 100,\n      dims,\n      Resources.gridTile,\n      \"Grid Size\",\n      Upgrades.gridSize.getDetails(PlayerSettingsManager.get().getMaxGridSize()),\n      () => {\n        const ps = PlayerSettingsManager.get();\n        const coins = ps.getTotalCoins();\n        const currentgrid = ps.getMaxGridSize();\n        ps.setTotalCoins(coins - Upgrades.gridSize.getDetails(currentgrid).price);\n        ps.setMaxGridSize(currentgrid+1);\n        this.onActivate(); //refresh\n      },\n    );\n\n    this.maxDiff = new UpgradeWidget(\n      engine.drawWidth / 3,\n      this.maxGrid.getBottom() + Config.optionPadding*2,\n      dims,\n      Resources.difficultyTile,\n      \"Difficulty\",\n      Upgrades.difficulty.getDetails(PlayerSettingsManager.get().getMaxDiff().getDifficultyLevel()),//todo\n      () => {\n        const ps = PlayerSettingsManager.get();\n        const coins = ps.getTotalCoins();\n        const currentDiff = ps.getMaxDiff().getDifficultyLevel();\n        ps.setTotalCoins(coins - Upgrades.difficulty.getDetails(currentDiff).price);\n        ps.setMaxDiff(Difficulty.getByDifficultyLevel(currentDiff+1));\n        this.onActivate(); //refresh\n      },\n    );\n\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.add(title)\n    this.add(this.coinsLabel);\n    this.maxGrid.getDrawables()\n    .forEach(d => this.add(d));\n    this.maxDiff.getDrawables()\n    .forEach(d => this.add(d));\n\n    this.initScroll(0);\n    this.setBackround(engine.drawHeight);\n  }\n\n  private title(): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.upgradeTitle, 0.6, 1);\n    const sprite = Resources.upgradeTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth / 2;\n    title.y = dims.height / 2 + Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale;\n    return title;\n  }\n\n  private playercoinsLabel(x: number, y: number): Label {\n    const coins = PlayerSettingsManager.get().getTotalCoins();\n    const coinsLabel = new Label(this.coinsLabelString(coins), x, y, null, FontManager.get().getMono());\n    coinsLabel.fontSize = SizingManager.get().getUIItemSize();\n    coinsLabel.baseAlign = BaseAlign.Middle;\n    coinsLabel.textAlign = TextAlign.Center;\n    return coinsLabel;\n  }\n\n  private coinsLabelString(coins: number): string {\n    return `Current Coins: ${coins}`;\n  }\n\n  public onActivate() {\n    const psm = PlayerSettingsManager.get();\n    this.coinsLabel.text = this.coinsLabelString(PlayerSettingsManager.get().getTotalCoins());\n    this.maxGrid.updateDetails(Upgrades.gridSize.getDetails(psm.getMaxGridSize()));\n    this.maxDiff.updateDetails(Upgrades.difficulty.getDetails(psm.getMaxDiff().getDifficultyLevel()))\n\n  }\n\n  public onDeactivate() {\n  }\n} \n","import { GameWindowBase } from './gameWindowBase';\nimport ProgressionManager from '../../engine/progression/progressionManager';\n\nexport class GridGameWindow extends GameWindowBase {\n\n  private currentOptionGridSize: number;\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    this.currentOptionGridSize = ProgressionManager.get().getOptionGridSize()\n  }\n\n  //Override\n  public onActivate(): void {\n    const newSize = ProgressionManager.get().getOptionGridSize()\n    if(this.currentOptionGridSize != newSize) {\n      this.currentOptionGridSize = newSize;\n      this.coordinator.resetGame(true);\n    }\n    super.onActivate();\n  }\n} \n","import { Actor, Label, Sprite, Vector, BaseAlign, TextAlign, Color } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport SizingManager from \"../../engine/managers/sizingManager\";\nimport FontManager from \"../../engine/managers/fontManager\";\n\nexport default class CoinCount {\n\n    private coinCount: number;\n    private coinIcon: Actor;\n    private countLabel: Label;\n\n    private constructor(currentCount: number, countIcon: Actor, countLabel: Label) {\n        this.coinCount = currentCount;\n        this.coinIcon = countIcon;\n        this.countLabel = countLabel;\n    }\n\n    public static create(x: number, y: number, currentCount: number): CoinCount {\n        const coinActor = CoinCount.createCoinIcon(x, y);\n        return new CoinCount(\n            currentCount,\n            coinActor,\n            CoinCount.createCountLabel(currentCount, coinActor.getRight() + Config.gridPadding, y),\n        );\n    }\n\n    public getCoinCount(): number {\n        return this.coinCount;\n    }\n\n    public addToCoinCount(toAdd: number): void {\n        this.coinCount = this.coinCount + toAdd;\n        this.countLabel.text = `${this.coinCount}`;\n    }\n\n    public drawables(): Actor[] {\n        return [\n            this.coinIcon,\n            this.countLabel,\n        ];\n    }\n\n    private static createCoinIcon(x: number, y: number): Actor {\n        const texture = Resources.uiCoins;\n        const sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        const scale = new Vector(SizingManager.get().getUIItemSize() / texture.width, SizingManager.get().getUIItemSize() / texture.height);\n        const actor = new Actor(x, y, texture.width, texture.height);\n        actor.addDrawing(sprite);\n        actor.scale = scale;\n        return actor;\n    }\n\n    private static createCountLabel(currentCount: number, x: number, y: number): Label {\n        const label = new Label(\n            `${currentCount}`,\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        label.fontSize = SizingManager.get().getUIItemSize() * 0.7;\n        label.baseAlign = BaseAlign.Middle;\n        label.textAlign = TextAlign.Left;\n        label.color = Color.fromHex(\"#958a2d\");\n        return label;\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/managers/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize() + 1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index + 1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize() + 1) * Config.gridPadding) / 2;\n\n        if (type === \"col\") {\n            return top;\n        } else {\n            return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n        }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite().clone();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Optional, Supplier } from \"java8script\";\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport { GridState, CardState } from \"../engine/progression/gridState\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, screenCenter);\n    }\n\n    public static createGridFromState(callbackProvider: CardCallbackProvider, gridSize: number, state: Optional<GridState>, engine: ex.Engine): GridCoordinator {\n        return state\n            .map(s => GridCoordinator.loadSavedGrid(callbackProvider, engine, s))\n            .orElseGet(() => GridCoordinator.createNewGrid(callbackProvider, gridSize, engine))\n    }\n\n    public static createNewGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth / 2, engine.drawHeight / 2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons(screenCenter, callbackProvider.skeletonCardCallback);\n        coord.initializeBuffs(screenCenter, callbackProvider);\n        return coord;\n    }\n\n    public currentGridState(): { gridSize: number, cardState: CardState[][] } {\n        const cardStates: CardState[][] = Stream.ofValues(...this.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(card => new CardState(card.type(), card.isFlipped()))\n                .toArray())\n            .toArray();\n        return {\n            gridSize: this.gridSize,\n            cardState: cardStates\n        };\n    }\n\n    public getGridAsList(): Card[] {\n        return Stream.of(this.grid)\n            .flatMap(a => Stream.ofValues(...a))\n            .toArray();\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n            .flatMap(a => Stream.ofValues(...a))\n            .filter(card => card.getRow() == rowIndex)\n            .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n            .flatMap(a => Stream.ofValues(...a))\n            .filter(card => card.getCol() == colIndex)\n            .toArray();\n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(screenCenter: Vector, skeletonCardCallback: Supplier<void>): void {\n        while (this.needMoreSkeletons()) {\n            const { row, col } = this.randomCoord();\n            if (this.isCardACoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(screenCenter, row, col, skeletonCardCallback));\n            }\n        }\n    }\n\n    private initializeBuffs(screenCenter: Vector, callbackProvider: CardCallbackProvider): void {\n        while (this.needMoreBuffs()) {\n            const { row, col } = this.randomCoord();\n            if (this.isCardACoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col, screenCenter, callbackProvider))\n            }\n        }\n    }\n\n    private initializeFromState(state: GridState, screenCenter: Vector, callbackProvider: CardCallbackProvider): void {\n        this.gridSize = state.getGridSize();\n        state.getGridState().forEach((row: CardState[], rowIndex: number) => {\n            row.forEach((card: CardState, colIndex: number) => {\n                const createdCard = Card.create(screenCenter, rowIndex, colIndex, callbackProvider, card.getType(), card.isFlipped());\n                this.insertCard(rowIndex, colIndex, createdCard);\n            });\n        });\n    }\n\n    private generateBuffCard(row: number, col: number, screenCenter: Vector, callbackProvider: CardCallbackProvider): Card {\n        return Math.random() < 0.5\n            ? Card.attack(screenCenter, row, col, callbackProvider.attackCardCallback)\n            : Card.potion(screenCenter, row, col, callbackProvider.potionCardCallback)\n    }\n\n    private insertCard(row: number, col: number, card: Card): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCardACoin(row: number, col: number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    }\n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): { row: number, col: number } {\n        return {\n            row: Math.floor(Math.random() * this.gridSize),\n            col: Math.floor(Math.random() * this.gridSize)\n        };\n    }\n\n    private static loadSavedGrid(callbackProvider: CardCallbackProvider, engine: ex.Engine, gridState: GridState): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth / 2, engine.drawHeight / 2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridState.getGridSize(), screenCenter);\n        coord.initializeFromState(gridState, screenCenter, callbackProvider);\n        return coord;\n    }\n}","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport SizingManager from \"../../engine/managers/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport SizingManager from \"../engine/managers/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max: number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n            .map(idx => {\n                if (idx > (defaultedCurrent - 1)) {\n                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                } else {\n                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                }\n            })\n            .toArray();\n\n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if ((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n        this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if (this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n}","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream, Optional } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport { Vector, Actor } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/managers/sizingManager\";\nimport PlayerSettingsManager from \"../engine/progression/playerSettingsManager\";\nimport { GridState } from \"../engine/progression/gridState\";\nimport CoinCount from \"../actors/bars/coinCount\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private coinCount: CoinCount;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine) {\n        this.engine = engine;\n        this.resetGame(false);\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const coordinator: GameCoordinator = new GameCoordinator(engine);\n        return coordinator;\n    }\n\n    public resetGame(shouldCreateFresh: boolean): void {\n        const mm: SizingManager = SizingManager.get();\n        const saveState: Optional<GridState> = PlayerSettingsManager.get().getGridState();\n        this.healthCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { }, Resources.uiHeart, saveState.map(s => s.getHearts()).orElse(Config.maxHealth));\n        this.attackCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword, saveState.map(s => s.getSwords()).orElse(0));\n        this.coinCount = CoinCount.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 2.5, saveState.map(gs => gs.getCoins()).orElse(0));\n\n        this.gridCoordinator = shouldCreateFresh\n            ? GridCoordinator.createNewGrid(this, ProgressionManager.get().getGameGridSize(), this.engine)\n            : GridCoordinator.createGridFromState(this, ProgressionManager.get().getGameGridSize(), saveState, this.engine);\n        this.rowCounts = this.createRowCountCards();\n        this.columnCounts = this.createColCountCards();\n    }\n\n    private getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    private getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    private getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    public getAllActors(): Actor[] {\n        return Stream.ofValues<Actor[]>(\n            this.gridCoordinator.getGridAsList(),\n            this.getColCountCards(),\n            this.getRowCountCards(),\n            this.getStatTrackers(),\n            ProgressionManager.get().isProgressionDisabled() ? [] : this.coinCount.drawables(),\n        ).flatMap(a => Stream.ofValues(...a))\n            .toArray();\n    }\n\n    private updateLabels = () => {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (this.healthCoordinator.getCurrent() === 0) {\n            this.gameOver();\n        } else if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.victory();\n        }\n    }\n\n    private gameOver(): void {\n        this.engine.goToScene(Scenes.GAME_OVER);\n        ProgressionManager.get().resetProgress();\n        PlayerSettingsManager.get().saveGridState();\n        this.resetGame(true);\n    }\n\n    private victory(): void {\n        const psm = PlayerSettingsManager.get();\n        const progman = ProgressionManager.get();\n        this.engine.goToScene(Scenes.VICTORY);\n        progman.progress();\n        psm.saveGridState();\n        if (!progman.isProgressionDisabled()) {\n            //don't want to add coin to total in practice mode\n            psm.setTotalCoins(psm.getTotalCoins() + this.coinCount.getCoinCount());\n        }\n        this.resetGame(true);\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.coinCount.addToCoinCount(1);\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    private saveGridProgress(): void {\n        const grid = this.gridCoordinator.currentGridState();\n        PlayerSettingsManager.get().saveGridState(new GridState(\n            grid.gridSize,\n            grid.cardState,\n            this.healthCoordinator.getCurrent(),\n            this.attackCoordinator.getCurrent(),\n            this.coinCount.getCoinCount(),\n        ));\n    }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/managers/fontManager\";\nimport ProgressionManager from \"../../engine/progression/progressionManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return ProgressionManager.get().isProgressionDisabled() ? \"\" :`${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport LevelDisplay from '../../actors/bars/level';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/managers/sizingManager';\nimport { GameWindowBase } from './gameWindowBase';\n\nexport class StoryGameWindow extends GameWindowBase {\n\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth / 2, mm.getMenuHeight() - mm.getUIItemSize() / 2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n\n  }\n\n  public onActivate() {\n    super.onActivate();\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Actor, Engine, Axis } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture, IDimensions } from '../engine/helpers';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport { ModalRenderer } from '../modal/modal';\nimport SizingManager from '../engine/managers/sizingManager';\nimport BaseScene from './BaseScene';\n\nexport class Help extends BaseScene {\n\n  private modalRenderer: ModalRenderer = ModalRenderer.get();\n\n  public onInitialize(engine: ex.Engine) {\n\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n\n    const titleDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.helpTitle, 0.6, 1);\n    const title = new Actor(\n      engine.drawWidth / 2,\n      titleDims.height / 2 + Config.gridPadding,\n      titleDims.width,\n      titleDims.height\n    );\n    title.addDrawing(Resources.helpTitle);\n    title.scale = titleDims.scale;\n    this.add(title);\n\n    const centerx = engine.drawWidth / 2;\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.introMenu, sizing.padding, sizing.maxScale);\n\n    const intro = this.createButton(dims, centerx, title.getBottom() + dims.height / 2 + Config.optionPadding, Resources.introMenu, () => this.modalRenderer.introModal());\n    const playing = this.createButton(dims, centerx, intro.getBottom() + Config.gridPadding + dims.height / 2, Resources.playingMenu, () => this.modalRenderer.howToPlayModal());\n    const cards = this.createButton(dims, centerx, playing.getBottom() + Config.gridPadding + dims.height / 2, Resources.cardMenu, () => this.modalRenderer.cardModal());\n    const credits = this.createButton(dims, centerx, cards.getBottom() + Config.gridPadding + dims.height / 2, Resources.creditsMenu, () => this.modalRenderer.textModal(\"Credits\", \"Made by Andrew\"));\n\n    this.add(intro);\n    this.add(playing);\n    this.add(cards);\n    this.add(credits);\n\n\n    this.initScroll(credits.getBottom());\n    this.setBackround(credits.getBottom());\n  }\n\n  public createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n    const button = new ButtonBase(texture, onClick);\n    button.x = x\n    button.y = y\n    button.scale = dims.scale;\n    button.setHeight(dims.height);\n    button.setWidth(dims.width);\n    return button;\n  }\n\n  public onActivate() {\n  }\n\n  public onDeactivate() {\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier, Function, Optional, Consumer } from \"java8script\";\nimport SoundManager from \"../../engine/managers/soundManager\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n    private onToggle: Optional<Consumer<boolean>>\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean, onToggle?: Consumer<boolean>) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n        this.onToggle = Optional.ofNullable(onToggle);\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public setOnToggle(onToggle: Consumer<boolean>): void {\n        this.onToggle = Optional.of(onToggle);\n    }\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    public setChecked(isChecked: boolean): void {\n        this.checked = isChecked;\n        this.setCheckedDrawing();\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound)\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n    private setCheckedDrawing() {\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        this.setCheckedDrawing();\n        this.onToggle.ifPresent(func => func(this.checked));\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport FontManager from \"../../engine/managers/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine, onToggle?: (checked:boolean) => void) {\n        const textSize = size - (size * 0.25)\n        const buttonSize = size + (size * 0.25);\n        \n\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = textSize;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(buttonSize, x+labelWidth*(3/4), y, defaultVal, onToggle);\n        \n    }\n\n    public addOnToggle(onToggle: (checked:boolean) => void): void {\n        this.radio.setOnToggle(onToggle);\n    }\n    \n    public setChecked(isChecked: boolean): void {\n        this.radio.setChecked(isChecked);\n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getBottom() {\n        return Math.max(this.radio.getBottom(), this.label.getBottom());\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign, Color, Sprite } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/managers/fontManager\";\nimport { Colorize } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Stream } from \"java8script\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButtonSprite:Sprite;\n    private leftButton: ButtonBase;\n    private rightButtonSprite: Sprite;\n    private rightButton: ButtonBase;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number, disabled: boolean) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n\n        const textSize = this.fontSize - (this.fontSize * 0.25)\n        const buttonSize = this.fontSize + (this.fontSize * 0.25);\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = textSize\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        \n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+buttonSize, null, FontManager.get().getMono());\n        this.numberLabel.fontSize = textSize\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        \n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButtonSprite = this.leftButton.getSprite();\n        this.leftButton.x = x - buttonSize*1.5\n        this.leftButton.y = y + buttonSize;\n        this.leftButton.scale = new Vector(buttonSize/Resources.uiLeft.width, buttonSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(buttonSize);\n        this.leftButton.setWidth(buttonSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButtonSprite = this.rightButton.getSprite();\n        this.rightButton.x = x + buttonSize*1.5;\n        this.rightButton.y = y + buttonSize;\n        this.rightButton.scale = new Vector(buttonSize/Resources.uiRight.width, buttonSize/Resources.uiRight.height);\n        this.rightButton.setHeight(buttonSize);\n        this.rightButton.setWidth(buttonSize);\n\n        this.updateDisabled(disabled);\n    }\n\n    public updateDisabled = (isDisabled: boolean) => {\n        this.leftButtonSprite.clearEffects();\n        this.rightButtonSprite.clearEffects();\n        if(isDisabled) {\n            const disColor = Color.Gray;\n            this.topLabel.color = disColor\n            this.numberLabel.color = disColor;\n            this.leftButtonSprite.addEffect(new Colorize(disColor));\n            this.rightButtonSprite.addEffect(new Colorize(disColor));\n            this.leftButton.setDisabled(true);\n            this.rightButton.setDisabled(true);\n        } else {\n            this.topLabel.color = Color.Black;\n            this.numberLabel.color = Color.Black;\n            this.leftButton.setDisabled(false);\n            this.rightButton.setDisabled(false);\n        }\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number, max: number): void {\n        this.max = max;\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getBottom() {\n        return Stream.ofValues<Actor>(this.leftButton, this.rightButton, this.numberLabel)\n        .map(a => a.getBottom())\n        .max()\n        .orElse(0);\n    }\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Actor, Engine } from 'excalibur';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SizingManager from '../engine/managers/sizingManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport { Consumer } from 'java8script';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport BaseScene from './BaseScene';\n\nexport class Options extends BaseScene {\n\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n  private progressionToggle: LabeledRadio;\n  private title: Actor;\n\n  public onInitialize(engine: Engine) {\n    const itemSize = SizingManager.get().getUIItemSize();\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n\n    this.addTitle();\n    this.addSoundToggle(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addProgressionToggle(itemSize)\n    const callbackForEnabling = this.addGridSize(itemSize);\n    this.progressionToggle.addOnToggle(callbackForEnabling);\n\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const createbuttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.confirmMenu, sizing.padding, sizing.maxScale);\n\n    const createButtonY =\n      this.gridSize.getBottom() < engine.drawHeight - createbuttonDims.height\n        ? engine.drawHeight - createbuttonDims.height / 2 - Config.optionPadding //grid size and confirm dont overelap so all good, draw at the bottom of screen \n        : this.gridSize.getBottom() + Config.optionPadding + createbuttonDims.height / 2;\n    const createButton = this.createButton(\n      createbuttonDims,\n      engine.drawWidth / 2,\n      createButtonY,\n      Resources.confirmMenu,\n      () => this.onConfirm()\n    );\n    this.add(createButton);\n\n    this.initScroll(createButton.getBottom());\n    this.setBackround(createButton.getBottom())\n  }\n\n  private onConfirm = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    ProgressionManager.get().setProgressionDisabled(!this.progressionToggle.isChecked());\n    PlayerSettingsManager.get().setIsSoundOff(!this.sound.isChecked())\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.optionTitle, 0.6, 1);\n    const sprite = Resources.optionTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth / 2;\n    title.y = dims.height / 2 + Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale;\n    this.title = title;\n    this.add(title);\n  }\n\n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\",\n      itemSize, this.engine.drawWidth / 2,\n      this.title.getBottom() + Config.optionPadding * 2,\n      !PlayerSettingsManager.get().isSoundOff(),\n      this.engine\n    );\n\n    this.sound.getDrawables()\n      .forEach(e => this.add(e));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, PlayerSettingsManager.get().getMaxDiff().getDifficultyLevel(), ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2,\n      this.sound.getBottom() + itemSize * 0.5 + Config.optionPadding,\n      itemSize, false);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addProgressionToggle(itemSize) {\n    this.progressionToggle = new LabeledRadio(\"Story Mode\", itemSize, this.engine.drawWidth / 2,\n      this.difficulty.getBottom() + itemSize * 1 + Config.optionPadding,\n      !ProgressionManager.get().isProgressionDisabled(), this.engine);\n\n    this.progressionToggle.getDrawables()\n      .forEach(e => this.add(e));\n  }\n\n  //returns callback for toggling the objects\n  private addGridSize(itemSize): Consumer<boolean> {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, PlayerSettingsManager.get().getMaxGridSize(), ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2,\n      this.progressionToggle.getBottom() + itemSize * 0.5 + Config.optionPadding, itemSize,\n      !ProgressionManager.get().isProgressionDisabled());\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n\n    return this.gridSize.updateDisabled;\n  }\n\n  public onActivate() {\n    this.sound.setChecked(!PlayerSettingsManager.get().isSoundOff());\n    this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize(), PlayerSettingsManager.get().getMaxGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel(), PlayerSettingsManager.get().getMaxDiff().getDifficultyLevel());\n    this.progressionToggle.setChecked(!ProgressionManager.get().isProgressionDisabled())\n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport SoundManager from '../engine/managers/soundManager';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport {calcDimensionsSingleObjectTexture, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/managers/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport SizingManager, { IButtonSizing } from '../engine/managers/sizingManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n    const sizing: IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.nextMenu, sizing.padding, sizing.maxScale);\n    const imageDims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1)\n    const offset = buttonDims.height/2 + Config.optionPadding;\n\n    const victoryActor = new ex.Actor(\n      this.engine.drawWidth / 2,\n      this.engine.drawHeight / 2 - offset,\n      imageDims.width,\n      imageDims.height\n    );\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.scale = imageDims.scale;\n    this.add(victoryActor);\n\n    const nextButton = new ButtonBase(\n      Resources.nextMenu, \n      this.onNext,\n    );\n    nextButton.setHeight(buttonDims.height);\n    nextButton.setWidth(buttonDims.width);\n    nextButton.scale = buttonDims.scale;\n    nextButton.x = engine.drawWidth/2;\n    nextButton.y = engine.drawHeight - offset;\n    this.add(nextButton);\n  }\n\n  private onNext = () => {\n    this.engine.goToScene(getGameWindow());\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/managers/soundManager';\nimport { Engine } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, safePointerUp, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/managers/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport SizingManager, { IButtonSizing } from '../engine/managers/sizingManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n\n    const imageDims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    const sizing: IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.menuMenu, sizing.padding, sizing.maxScale);\n    const offset = buttonDims.height/2 + Config.optionPadding;\n\n\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2 - offset;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = imageDims.scale;\n\n    const menuButton = new ButtonBase(\n      Resources.menuMenu, \n      this.onMenu,\n    );\n    menuButton.setHeight(buttonDims.height);\n    menuButton.setWidth(buttonDims.width);\n    menuButton.scale = buttonDims.scale;\n    menuButton.x = engine.drawWidth/2;\n    menuButton.y = engine.drawHeight - offset;\n    this.add(menuButton)\n  }\n\n  private onMenu = () => {\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  };\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import { Config } from '../../resources';\nimport { Loader } from 'excalibur';\nconst logoImg = require('../../images/title.png');\n\nexport class GameLoader extends Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import { Config } from '../../resources';\nimport { Color, Engine, Input, DisplayMode } from 'excalibur';\n\nexport default class Game extends Engine {\n\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: DisplayMode.FullScreen,\n      pointerScope: Input.PointerScope.Canvas, //make it so clicks don't go \"through\" the help modals\n      suppressPlayButton: true, //todo think about customizing the button\n      backgroundColor: Color.fromHex(Config.backgroundColor),\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Color, Engine, Vector } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class ScrollBar extends Actor {\n\n    private scrollBarTop: number;\n    private scrollBarBotton: number;\n    private isDragging = false;\n\n    constructor(engine: Engine) {\n        super();\n        this.scrollBarBotton = engine.drawHeight / 2;\n        this.scrollBarTop = engine.drawHeight / 2; // dont want to be able to go past the top of the screen\n        const sprite = Resources.uiScroll.asSprite();\n        const scrollItemSize = 50;\n        this.x = engine.drawWidth - 25;\n        this.y = engine.drawHeight / 2;\n        this.addDrawing(Resources.uiScroll.asSprite());\n        this.setWidth(scrollItemSize);\n        this.setHeight(scrollItemSize);\n        this.scale = new Vector(scrollItemSize/192, scrollItemSize/192); // 192 is the sprite original width/height\n\n        this.on('pointerdragstart', (pe: ex.Input.PointerEvent) => {\n            this.isDragging = true;\n        });\n\n        this.on('pointerdragend', (pe: ex.Input.PointerEvent) => {\n            this.isDragging = false;\n        });\n\n        this.on('pointerdragmove', (pe: ex.Input.PointerEvent) => {\n            if (this.isDragging) {\n                const worldY = pe.pointer.lastWorldPos.y;\n                if (worldY > this.scrollBarTop && worldY < this.scrollBarBotton) {\n                    this.y = pe.pointer.lastWorldPos.y;\n                }\n            }\n        });\n\n        this.on('pointerdragleave', (pe: ex.Input.PointerEvent) => {\n            if (this.isDragging) {\n                const worldY = pe.pointer.lastWorldPos.y;\n                if (worldY > this.scrollBarTop && worldY < this.scrollBarBotton) {\n                    this.y = pe.pointer.lastWorldPos.y;\n                }\n            }\n        });\n    }\n\n    public setScrollBottom(num: number) {\n        this.scrollBarBotton = num;\n        if(Math.floor(this.scrollBarBotton) <= Math.floor(this.scrollBarTop)) {\n            this.visible = false;\n        }\n    }\n}","import { Actor } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport SoundManager from '../engine/managers/soundManager';\nimport SizingManager, { IButtonSizing } from '../engine/managers/sizingManager';\nimport BaseScene from './BaseScene';\n\nexport class MainMenu extends BaseScene {\n  public onInitialize(engine: ex.Engine) {\n    const centerX = engine.drawWidth / 2;\n\n\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.title, 0.9, 0.8);\n    const title = new Actor(centerX, dims.height/2 + Config.gridPadding, dims.width, dims.height);\n    title.scale = dims.scale;\n    title.addDrawing(Resources.title);\n    this.add(title);\n\n    const {padding, maxScale} :IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.startMenu, padding, maxScale );\n\n    const start = this.createButton(buttonDims, centerX,  title.getBottom() + Config.optionPadding + buttonDims.height/2, Resources.startMenu, () => engine.goToScene(getGameWindow()));\n    const upgrades = this.createButton(buttonDims, centerX,  start.getBottom() + Config.gridPadding + buttonDims.height/2, Resources.upgradeMenu, () => engine.goToScene(Scenes.UPGRADES));\n    const options = this.createButton(buttonDims, centerX, upgrades.getBottom() + Config.gridPadding + buttonDims.height/2, Resources.optionMenu, () => engine.goToScene(Scenes.OPTIONS));\n    const help = this.createButton(buttonDims, centerX, options.getBottom() + Config.gridPadding+ buttonDims.height/2, Resources.helpMenu, () => engine.goToScene(Scenes.HELP));\n    \n    this.add(start);\n    this.add(options);\n    this.add(help);\n    this.add(upgrades)\n\n    this.setBackround(help.getBottom());\n    this.initScroll(help.getBottom());\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicEnd();\n  }\n\n  public onDeactivate() { }\n}","module.exports = __webpack_public_path__ + \"00f14d085530ea0ae58c17a32b3fe27f.wav\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"3329db2fa28ce34b8c3c074e4c25d295.png\";","module.exports = __webpack_public_path__ + \"c9c8f13302fa1b1eeb4d2e5345c5bbba.png\";","module.exports = __webpack_public_path__ + \"60352ab041f9e1e001176386f2dc105a.png\";","module.exports = __webpack_public_path__ + \"031849bdaba0fc1f7b8e931a8cd4b081.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"2f01ab32d051553af7e9edc5f70c3831.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"5bbe8e44117d6281e0990e5a0213c814.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"ff3ec13a365eb079e29c3a06b576bad7.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"d848ad40f4eee6a0b29882906e9b4c24.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"53b20a23b0fa9be3ec391f1dd49a6492.png\";","module.exports = __webpack_public_path__ + \"dd8089d1ad5e36afe0d889a9218a0559.png\";","module.exports = __webpack_public_path__ + \"d23070e309626133deb93bbabf5d25bb.png\";","module.exports = __webpack_public_path__ + \"135852ebc677f398779a9ac03e3c396b.png\";","module.exports = __webpack_public_path__ + \"64c5b08a042975010b476c3ca33efd4d.png\";","module.exports = __webpack_public_path__ + \"fb261f33ec74628ffab99997289e2f44.png\";","module.exports = __webpack_public_path__ + \"5d8c965fd0efaf1fa74941ad5cbb8d3c.png\";","module.exports = __webpack_public_path__ + \"8d6d5a0dc09cfb470714a9dbe963edd4.png\";","module.exports = __webpack_public_path__ + \"5370dd7a56a2e256105c0d5ae9a716f5.png\";","module.exports = __webpack_public_path__ + \"21c2960a6ef19bc7b845d01041d556b9.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"e1f03a0829378e36ba7058cc784f431c.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","var map = {\n\t\"./GameOver.png\": 201,\n\t\"./background.old.png\": 200,\n\t\"./background.png\": 199,\n\t\"./card.png\": 198,\n\t\"./coin.png\": 76,\n\t\"./helpTitle.png\": 197,\n\t\"./icon-192.png\": 196,\n\t\"./icon-512.png\": 195,\n\t\"./menu/cards.png\": 194,\n\t\"./menu/confirm.png\": 193,\n\t\"./menu/credits.png\": 192,\n\t\"./menu/help.png\": 191,\n\t\"./menu/intro.png\": 190,\n\t\"./menu/menu.png\": 189,\n\t\"./menu/next.png\": 188,\n\t\"./menu/options.png\": 187,\n\t\"./menu/playing.png\": 186,\n\t\"./menu/start.png\": 185,\n\t\"./menu/upgrade.png\": 184,\n\t\"./numbers/0.png\": 183,\n\t\"./numbers/1.png\": 182,\n\t\"./numbers/2.png\": 181,\n\t\"./numbers/3.png\": 75,\n\t\"./numbers/4.png\": 180,\n\t\"./numbers/5.png\": 179,\n\t\"./numbers/6.png\": 178,\n\t\"./numbers/7.png\": 177,\n\t\"./numbers/8.png\": 176,\n\t\"./numbers/9.png\": 175,\n\t\"./optionTitle.png\": 174,\n\t\"./potion.png\": 74,\n\t\"./skull.png\": 73,\n\t\"./sword.png\": 72,\n\t\"./title.png\": 71,\n\t\"./ui/blank.png\": 173,\n\t\"./ui/coin.png\": 172,\n\t\"./ui/coinPile.png\": 171,\n\t\"./ui/heart.png\": 70,\n\t\"./ui/left.png\": 170,\n\t\"./ui/right.png\": 169,\n\t\"./ui/scroll.png\": 168,\n\t\"./ui/sword.png\": 69,\n\t\"./ui/x.png\": 68,\n\t\"./upgrades/difficulty.png\": 167,\n\t\"./upgrades/grid.png\": 166,\n\t\"./upgradesTitle.png\": 165,\n\t\"./victory.png\": 164\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\tvar module = __webpack_require__(id);\n\treturn module;\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 202;","import { Map, Stream, Comparator, Collectors } from 'java8script';\nimport {UpgradeDetails} from './upgradeWidget'\n\nexport interface UpgradeDescription {\n    title: string,\n    description: string,\n    prices: { level: number, price: number }[]\n}\n\nexport default class Upgrade {\n    private title: string;\n    private description: string;\n    private maxLevel: number;\n    private currentLevelToPriceMap: Map<number, number>;\n\n    private constructor(title: string, description: string, maxLevel: number, currentLevelToPriceMap: Map<number, number>) {\n        this.title = title;\n        this.description = description;\n        this.currentLevelToPriceMap = currentLevelToPriceMap;\n    }\n\n    public static create(upDesc: UpgradeDescription) {\n        return new Upgrade(\n            upDesc.title,\n            upDesc.description,\n            Stream.of(upDesc.prices)\n                .map(p => p.level)\n                .max(Comparator.default())\n                .orElse(0),\n            Stream.of(upDesc.prices)\n            .collect(Collectors.toMap(\n                d => d.level,\n                d => d.price\n            ))\n        );\n    }\n\n    public getDetails(currentLevel: number): UpgradeDetails {\n        return {\n            title: this.title,\n            description: this.description,\n            maxLevel: this.maxLevel,\n            currentLevel: currentLevel,\n            price: this.currentLevelToPriceMap.get(currentLevel)\n        }\n    }\n}","import { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game/Game';\nimport { GameLoader } from './engine/game/GameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/managers/sizingManager';\nimport PlayerSettingsManager from './engine/progression/playerSettingsManager';\nimport { StoryGameWindow } from './scenes/gameWindows/storyGameWindow';\nimport { GridGameWindow } from './scenes/gameWindows/gridGameWindow';\nimport { UpgradeScene } from './scenes/upgrades';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\nconst options = new Options(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.STORY_GAME_WINDOW, new StoryGameWindow(game));\ngame.add(Scenes.GRID_GAME_WINDOW, new GridGameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, options);\ngame.add(Scenes.HELP, new Help(game));\ngame.add(Scenes.UPGRADES, new UpgradeScene(game));\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n  .forEach(k => loader.addResource(Resources[k]));\n\ngame.start(loader).then(() => {\n  PlayerSettingsManager.initialize()\n    .then(() => {\n      SizingManager.initialize(game);\n      game.goToScene(Scenes.MAIN_MENU);\n    });\n});\n"],"sourceRoot":""}