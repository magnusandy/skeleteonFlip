{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/engine/managers/sizingManager.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/managers/soundManager.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/engine/progression/playerSettingsManager.ts","webpack:///./src/engine/managers/fontManager.ts","webpack:///./src/actors/bars/exitButton.ts","webpack:///./src/engine/managers/backgroundManager.ts","webpack:///./src/scenes/BaseScene.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/engine/progression/gridState.ts","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/scenes/gameWindows/gameWindowBase.ts","webpack:///./src/modal/modal.tsx","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/title.png","webpack:///./src/images/sword.png","webpack:///./src/images/skull.png","webpack:///./src/images/potion.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/menu/buy.png","webpack:///./src/images/coin.png","webpack:///./src/actors/upgrades/upgradeWidget.ts","webpack:///./src/scenes/upgrades.ts","webpack:///./src/scenes/gameWindows/gridGameWindow.ts","webpack:///./src/actors/bars/coinCount.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/scenes/gameWindows/storyGameWindow.ts","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/game/GameLoader.ts","webpack:///./src/engine/game/Game.ts","webpack:///./src/actors/bars/scrollBar.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/sounds/button.wav","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/fonts/myMono.png","webpack:///./src/images/victory.png","webpack:///./src/images/upgradesTitle.png","webpack:///./src/images/upgrades/grid.png","webpack:///./src/images/upgrades/difficulty.png","webpack:///./src/images/ui/scroll.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/coin.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/optionTitle.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/menu/upgrade.png","webpack:///./src/images/menu/start.png","webpack:///./src/images/menu/playing.png","webpack:///./src/images/menu/options.png","webpack:///./src/images/menu/next.png","webpack:///./src/images/menu/menu.png","webpack:///./src/images/menu/intro.png","webpack:///./src/images/menu/help.png","webpack:///./src/images/menu/credits.png","webpack:///./src/images/menu/confirm.png","webpack:///./src/images/menu/cards.png","webpack:///./src/images/icon-512.png","webpack:///./src/images/icon-192.png","webpack:///./src/images/helpTitle.png","webpack:///./src/images/card.png","webpack:///./src/images/background.png","webpack:///./src/images/background.old.png","webpack:///./src/images/GameOver.png","webpack:///./src/images sync ^\\.\\/.*$","webpack:///./src/actors/upgrades/upgrade.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","upgrade_1","reqImg","imgpath","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","cardsMenu","introMenu","creditsMenu","playingMenu","confirmMenu","nextMenu","menuMenu","upgradeMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","uiScroll","optionTitle","helpTitle","upgradeTitle","gridTile","difficultyTile","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","buttonSound","backgroundTile","Resources","Texture","gameOver","cardMenu","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","Upgrades","gridSize","create","description","prices","level","price","difficulty","t","e","SizingManager","engine","this","initialize","singleton","console","log","isMobile","drawWidth","getUIItemSize","menuFontSize","getUIButtonSizing","padding","maxScale","getMenuHeight","difficulty_1","playerSettingsManager_1","ProgressionManager","getGameGridSize","ps","isProgressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","getMaxGridSize","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","setProgressionDisabled","isProgressDisabled","resetProgress","getLevelString","Scenes","progressionManager_1","STORY_GAME_WINDOW","GRID_GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","UPGRADES","getGameWindow","resources_1","SoundManager","soundManager","disableSound","backgroundSound","stop","backgroundMusicStart","isSoundOff","volume","loop","play","backgroundMusicEnd","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","__extends","setPrototypeOf","__proto__","Array","constructor","SpriteEffects_1","soundManager_1","helpers_1","ButtonBase","_super","texture","onClick","disabled","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","width","height","addDrawing","on","EventTypes","PointerUp","onClickWrapper","getSprite","safePointerUp","setDisabled","Actor","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","paddingToUse","maxHeight","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","event","ev","type","java8script_1","localForage","gridState_1","PlayerSettingsManager","toggleSound","progressionDisabled","chosenDiff","chosenGridSize","maxLevel","maxDiff","storyGrid","practiceGrid","totalCoins","soundOff","chosenDifficulty","maxGrid","maxDifficulty","config","version","size","storeName","getItem","STORE_KEY","v","DEFAULT","saveData","deserializeV1","saveGridState","gridState","Optional","ofNullable","saveToStorage","getGridState","newCurrent","newStage","difficutly","setIsSoundOff","isProgDisabled","getTotalCoins","setTotalCoins","newTotal","setMaxGridSize","newVal","getMaxDiff","setMaxDiff","newDiff","serializeV1","getDifficultyLevel","map","g","toSaveState","orElse","save","GridState","fromSaveState","setItem","clearStorage","VERY_EASY","EASY","empty","FontManager","generalMono","SpriteFont","getMono","buttonBase_1","ExitButton","setHeight","setWidth","x","y","BackgroundManager","tile","numberOfCols","Math","ceil","numberOfRows","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","getDefaultTileMap","drawHeight","getCustomTileMap","backgroundManager_1","scrollBar_1","BaseScene","scrollBar","add","setBackround","bottomOfBottomElement","addTileMap","initScroll","setScrollBottom","camera","strategy","lockToActorAxis","Axis","Y","createButton","dims","button","Scene","CardType","ex","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","calcCardDimensions","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","maxWidth","calcMaxCardWidth","silentSetFlipped","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","callbackProvider","skeletonCardCallback","attackCardCallback","coinCardCallback","potionCardCallback","grid","hearts","swords","coins","getGridSize","getHearts","getSwords","getCoins","Stream","ofValues","cardState","toArray","CardState","getType","difficultyLevel","buff","text","buffFactor","skeletonFactor","difficultyName","of","NORMAL","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","coordinator_1","scenes_1","exitButton_1","GameWindowBase","onInitialize","goToScene","coordinator","GameCoordinator","onActivate","getAllActors","forEach","onDeactivate","remove","React","ReactModal","react_dom_1","xButton","skullImage","swordImage","potionImage","coinImage","heartUIImg","swordUIImage","threeImage","buyImage","styles","margin","fontSize","flex","textAlign","h1","holder","imgHolder","cardImg","ModalRenderer","isOpen","setOpenAndRerender","innerStuff","render","open","closeFunc","props","createElement","Modal","__assign","document","getElementById","upgradeModal","upgradeDetails","canAfford","isHover","style","background","display","lineHeight","src","opacity","onMouseEnter","onMouseLeave","onClickAndClose","onclick","introModal","howToPlayModal","alt","cardModal","textModal","content","borderRadius","borderWidth","borderColor","appElement","float","position","right","top","onPointerUp","borderStyle","minHeight","Component","modal_1","fontManager_1","UpgradeWidget","tileDims","tileTexture","label","details","purchaseOnClick","tileButton","modalOnClick","Label","getRight","baseAlign","BaseAlign","Middle","TextAlign","Left","getDrawables","getBottom","updateDetails","newDeets","BaseScene_1","upgradeWidget_1","UpgradeScene","coinsLabel","playercoinsLabel","sizing","getButtonX","getDetails","currentgrid","currentDiff","buttonWidth","asSprite","coinsLabelString","Center","psm","gameWindowBase_1","GridGameWindow","currentOptionGridSize","resetGame","CoinCount","currentCount","countIcon","countLabel","coinCount","coinIcon","coinActor","createCoinIcon","createCountLabel","getCoinCount","addToCoinCount","toAdd","drawables","actor","color","fromHex","card_1","Count","index","initialCount","setCount","leftSide","clone","count","GridCoordinator","skeletonCount","potionCount","swordCount","blankGrid","createGridFromState","state","loadSavedGrid","orElseGet","createNewGrid","coord","initializeSkeletons","initializeBuffs","currentGridState","cardStates","getGridAsList","flatMap","a","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","needMoreSkeletons","randomCoord","isCardACoin","insertCard","needMoreBuffs","generateBuffCard","initializeFromState","createdCard","random","floor","StatTracker","enabled","setEnabled","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getCurrent","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","coinCount_1","updateLabels","rowCounts","skeletonCountForRow","columnCounts","skeletonCountForCol","attackCoordinator","healthCoordinator","saveGridProgress","checkIfCompleteGame","shouldCreateFresh","mm","saveState","gs","gridCoordinator","createRowCountCards","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","allFlipped","allMatch","progman","LevelDisplay","startingLevel","createLabelText","PREFIX","updateLevel","newLevel","level_1","StoryGameWindow","levelDisplay","Help","arguments","modalRenderer","titleDims","centerx","intro","playing","cards","credits","RadioButton","defaultValue","onToggle","currentSprite","toggleButton","checked","setCheckedDrawing","ifPresent","func","checkedSprite","uncheckedSprite","setOnToggle","isChecked","setChecked","radioButton_1","LabeledRadio","defaultVal","textSize","buttonSize","labelWidth","getTextWidth","ctx","radio","addOnToggle","NumberSelector","min","updateDisabled","isDisabled","leftButtonSprite","rightButtonSprite","disColor","topLabel","numberLabel","Colorize","leftButton","rightButton","Black","labelText","addBy","nextCurrent","setCurrent","numberSelector_1","labeledRadio_1","Options","onConfirm","progressionToggle","itemSize","addTitle","addSoundToggle","addDifficultySize","addProgressionToggle","callbackForEnabling","addGridSize","createbuttonDims","createButtonY","Victory","onNext","buttonDims","imageDims","offset","victoryActor","nextButton","GameOver","onMenu","gameOverActor","playerIdleAnimation","getAnimationForAll","menuButton","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","pointerScope","Input","PointerScope","Canvas","suppressPlayButton","start","loader","Engine","ScrollBar","isDragging","scrollBarBotton","scrollBarTop","pe","worldY","pointer","lastWorldPos","num","visible","MainMenu","centerX","upgrades","options","help","./GameOver.png","./background.old.png","./background.png","./card.png","./coin.png","./helpTitle.png","./icon-192.png","./icon-512.png","./menu/buy.png","./menu/cards.png","./menu/confirm.png","./menu/credits.png","./menu/help.png","./menu/intro.png","./menu/menu.png","./menu/next.png","./menu/options.png","./menu/playing.png","./menu/start.png","./menu/upgrade.png","./numbers/0.png","./numbers/1.png","./numbers/2.png","./numbers/3.png","./numbers/4.png","./numbers/5.png","./numbers/6.png","./numbers/7.png","./numbers/8.png","./numbers/9.png","./optionTitle.png","./potion.png","./skull.png","./sword.png","./title.png","./ui/blank.png","./ui/coin.png","./ui/coinPile.png","./ui/heart.png","./ui/left.png","./ui/right.png","./ui/scroll.png","./ui/sword.png","./ui/x.png","./upgrades/difficulty.png","./upgrades/grid.png","./upgradesTitle.png","./victory.png","webpackContext","req","id","webpackContextResolve","code","keys","resolve","Upgrade","currentLevelToPriceMap","upDesc","Comparator","collect","Collectors","toMap","mainMenu_1","Game_1","GameLoader_1","gameOver_1","victory_1","options_1","help_1","storyGameWindow_1","gridGameWindow_1","upgrades_1","game","mainMenu","k","addResource"],"mappings":"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AD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+F,EAAAC,EAAArG,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAA+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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([303,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Texture, Sound } from \"excalibur\";\nimport  Upgrade from \"./actors/upgrades/upgrade\";\n\nconst reqImg = (imgpath: string) => require(`./images/${imgpath}`);\n\nconst sword = reqImg('sword.png');\nconst skull = reqImg('skull.png');\nconst potion = reqImg('potion.png');\nconst coin = reqImg('coin.png');\nconst card = reqImg('card.png');\nconst startMenu = reqImg('menu/start.png');\nconst optionMenu = reqImg('menu/options.png');\nconst helpMenu = reqImg('menu/help.png');\nconst cardsMenu = reqImg('menu/cards.png');\nconst introMenu = reqImg('menu/intro.png');\nconst creditsMenu = reqImg('menu/credits.png');\nconst playingMenu = reqImg('menu/playing.png');\nconst confirmMenu = reqImg('menu/confirm.png');\nconst nextMenu = reqImg('menu/next.png');\nconst menuMenu = reqImg('menu/menu.png');\nconst upgradeMenu = reqImg('menu/upgrade.png');\n\nconst title = reqImg('title.png');\nconst gameOverImg = reqImg('GameOver.png');\nconst zero = reqImg('numbers/0.png');\nconst one = reqImg('numbers/1.png');\nconst two = reqImg('numbers/2.png');\nconst three = reqImg('numbers/3.png');\nconst four = reqImg('numbers/4.png');\nconst five = reqImg('numbers/5.png');\nconst six = reqImg('numbers/6.png');\nconst seven = reqImg('numbers/7.png');\nconst eight = reqImg('numbers/8.png');\nconst nine = reqImg('numbers/9.png');\n\nconst uiSword = reqImg('ui/sword.png');\nconst uiHeart = reqImg('ui/heart.png');\nconst uiCoins = reqImg('ui/coinPile.png');\nconst uiLeft = reqImg('ui/left.png');\nconst uiRight = reqImg('ui/right.png');\nconst uiX = reqImg('ui/x.png');\nconst uiBlank = reqImg('ui/blank.png');\nconst uiScroll = reqImg('ui/scroll.png');\n\nconst optionTitle = reqImg('optionTitle.png');\nconst helpTitle = reqImg('helpTitle.png');\nconst upgradeTitle = reqImg('upgradesTitle.png');\n\nconst gridTile = reqImg('upgrades/grid.png');\nconst difficultyTile = reqImg('upgrades/difficulty.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = reqImg('victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\nconst buttonSound = require('./sounds/button.wav');\n\nconst backgroundTile = reqImg('background.png');\n\nconst Resources = {\n    victory: new Texture(victory),\n    gameOver: new Texture(gameOverImg),\n    title: new Texture(title),\n    sword: new Texture(sword),\n    skull: new Texture(skull),\n    potion: new Texture(potion),\n    coin: new Texture(coin),\n    card: new Texture(card),\n\n    startMenu: new Texture(startMenu),\n    optionMenu: new Texture(optionMenu),\n    helpMenu: new Texture(helpMenu),\n    cardMenu: new Texture(cardsMenu),\n    introMenu: new Texture(introMenu),\n    creditsMenu: new Texture(creditsMenu),\n    playingMenu: new Texture(playingMenu),\n    confirmMenu: new Texture(confirmMenu),\n    nextMenu: new Texture(nextMenu),\n    menuMenu: new Texture(menuMenu),\n    upgradeMenu: new Texture(upgradeMenu),\n\n    optionTitle: new Texture(optionTitle),\n    helpTitle: new Texture(helpTitle),\n    backgroundTile: new Texture(backgroundTile),\n    upgradeTitle: new Texture(upgradeTitle),\n\n    0: new Texture(zero),\n    1: new Texture(one),\n    2: new Texture(two),\n    3: new Texture(three),\n    4: new Texture(four),\n    5: new Texture(five),\n    6: new Texture(six),\n    7: new Texture(seven),\n    8: new Texture(eight),\n    9: new Texture(nine),\n\n    uiSword: new Texture(uiSword),\n    uiHeart: new Texture(uiHeart),\n    uiLeft: new Texture(uiLeft),\n    uiRight: new Texture(uiRight),\n    uiX: new Texture(uiX),\n    uiBlank: new Texture(uiBlank),\n    uiCoins: new Texture(uiCoins),\n    uiScroll: new Texture(uiScroll),\n\n    gridTile: new Texture(gridTile),\n    difficultyTile: new Texture(difficultyTile),\n\n    myMono: new Texture(fontMono),\n\n    cardSound: new Sound(cardSound),\n    boneSound: new Sound(boneSound),\n    coinSound: new Sound(coinSound),\n    laughSound: new Sound(laughSound),\n    potionSound: new Sound(potionSound),\n    swordSound: new Sound(swordSound),\n    victorySound: new Sound(victorySound),\n    buttonSound: new Sound(buttonSound),\n    backgroundMusic: new Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport const Upgrades = {\n    gridSize: Upgrade.create({\n        title: \"Grid Size\",\n        description: \"Unlock bigger grids to increase the challenge. This will allow story mode to go to a higher max level, as well as allow the larger sizes to be chosen for practice.\",\n        prices: [\n            {level: 1, price: 10},\n            {level: 2, price: 20},\n            {level: 3, price: 30},\n            {level: 4, price: 40},\n            {level: 5, price: 50},\n            {level: 6, price: 60},\n            {level: 7, price: 70},\n            {level: 8, price: 80},\n            {level: 9, price: 90}\n        ]\n    }),\n    difficulty: Upgrade.create({\n        title: \"Difficulty\",\n        description: \"Things getting routine? Upgrade the difficulty to increase the challenge. Higher difficulties mean less room for error, more skeletons, but more rewards! Change the difficulty in the settings.\",\n        prices: [\n            {level: 1, price: 10},\n            {level: 2, price: 20},\n            {level: 3, price: 30},\n            {level: 4, price: 40},\n            {level: 5, price: 50},\n        ]\n    }),\n}\n\nexport { Resources, Config, uiHeart }\n","import { Engine } from \"excalibur\";\n\nexport interface IButtonSizing {\n    padding: number, \n    maxScale: number\n}\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"ERROR: Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 1200; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public menuFontSize() {\n        return this.isMobile() ? 22 : 37;\n    }\n\n    public getUIButtonSizing(): IButtonSizing {\n        return this.isMobile() \n        ? {padding: 0.4, maxScale: 0.3}\n        : {padding: 0.4, maxScale: 0.5}\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 4;\n    }\n\n}","import { Difficulty } from \"./difficulty\";\nimport PlayerSettingsManager from \"./playerSettingsManager\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private constructor() {\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager();\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = PlayerSettingsManager.get();\n        if(ps.isProgressionDisabled()) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return PlayerSettingsManager.get().getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return PlayerSettingsManager.get().getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public isProgressionDisabled() {\n        return PlayerSettingsManager.get().isProgressionDisabled();\n    }\n\n    public progress(): void {\n        if(!PlayerSettingsManager.get().isProgressionDisabled()) {\n            const currentLevel = PlayerSettingsManager.get().getCurrentLevel();\n            const currentStage = PlayerSettingsManager.get().getCurrentStage();\n    \n            if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n                //on the last stage of the level, need to find out if we can move on or just move up stages\n                if(currentLevel === PlayerSettingsManager.get().getMaxGridSize()-2) {\n                    // on the max upgraded level just increase stage\n                    PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n                } else {\n                    PlayerSettingsManager.get().setCurrentStage(1);\n                    PlayerSettingsManager.get().setCurrentLevel(currentLevel + 1);\n                }\n            } else {\n                //move on to the next stage, no extra logic\n                PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n            }  \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        PlayerSettingsManager.get().setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        PlayerSettingsManager.get().setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public setProgressionDisabled(isProgressDisabled: boolean) {\n        return PlayerSettingsManager.get().setProgressionDisabled(isProgressDisabled);\n    }\n\n    public resetProgress(): void {\n        const ps = PlayerSettingsManager.get();\n        if (!ps.isProgressionDisabled()) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        if (PlayerSettingsManager.get().getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${PlayerSettingsManager.get().getCurrentLevel()}.${PlayerSettingsManager.get().getCurrentStage()}`;\n        }\n    }\n}","import ProgressionManager from \"../engine/progression/progressionManager\";\n\nexport enum Scenes {\n    STORY_GAME_WINDOW = \"storyGameWindow\",\n    GRID_GAME_WINDOW = \"gridGameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n    UPGRADES = \"upgrades\"\n}\n\nexport function getGameWindow(): Scenes {\n    return ProgressionManager.get().isProgressionDisabled()\n        ? Scenes.GRID_GAME_WINDOW \n        : Scenes.STORY_GAME_WINDOW;\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport PlayerSettingsManager from \"../progression/playerSettingsManager\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public backgroundMusicStart(): void {\n        if (!PlayerSettingsManager.get().isSoundOff()) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.volume = 0.1;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play();\n            }\n        }\n    }\n\n    public backgroundMusicEnd(): void {\n        if(PlayerSettingsManager.get().isSoundOff()) {\n            if (this.backgroundSound) {\n                this.backgroundSound.stop();\n                this.backgroundSound = null;\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!PlayerSettingsManager.get().isSoundOff()) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport SoundManager from \"../../engine/managers/soundManager\";\nimport { Resources } from \"../../resources\";\nimport { safePointerUp } from \"../../engine/helpers\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n    private disabled: boolean;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>, disabled?: boolean) {\n        super();\n        this.disabled = disabled ? disabled : false;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    public getSprite():Sprite {\n        return this.sprite;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return safePointerUp(() => {\n            if (!this.disabled) {\n                this.sprite.clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n                onClick();\n            }\n        });\n    }\n\n    private onDown: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.2))\n        }\n\n    }\n\n    private onEnter: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.1))\n        }\n\n    }\n\n    private onExit: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n        }\n    }\n\n    public setDisabled(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n}","import { Texture, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n\n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        console.log(\"height\")\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: textWidth * scaleToUse,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nfunction safePointerUp(onClick: Supplier<void>): (event?: any) => void {\n    return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                onClick();\n            }\n    }\n}\n\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture,\n    safePointerUp\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport * as localForage from \"localforage\";\nimport { CardType } from \"../../actors/card/card\";\nimport { GridState } from \"./gridState\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\n\ninterface SaveDataV1 {\n    version: number;\n    soundOff: boolean;\n    progressionDisabled: boolean;\n    chosenDifficulty: number; //difficulty level number\n    chosenGridSize: number;\n    maxLevel: number;\n    maxDifficulty: number; //difficulty level number\n    currentLevel: number;\n    currentStage: number;\n    storyGrid?: SaveDataGrid;\n    practiceGrid?: SaveDataGrid;\n    totalCoins: number;\n}\n\nexport interface SaveDataGrid {\n    hearts: number;\n    swords: number;\n    coins: number;\n    gridSize: number;\n    grid: SaveCellData[][];\n};\n\nexport interface SaveCellData {\n    type: CardType;\n    flipped: boolean;\n}\n\n\nexport default class PlayerSettingsManager {\n    private static STORE_KEY = 'player_settings_v1';\n    public static singleton: PlayerSettingsManager;\n    private static DEFAULT: PlayerSettingsManager = new PlayerSettingsManager(false, false, Difficulty.VERY_EASY, 3, 5, Difficulty.EASY, 1, 1, Optional.empty(), Optional.empty(), 0);\n\n\n    //Settings\n    private soundOff: boolean;\n    private progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    private maxGrid: number; \n    private maxDifficulty: Difficulty;\n\n    //Progression\n    private totalCoins: number; //total coins collected, outside of current games\n    private currentLevel: number;\n    private currentStage: number;\n    private storyGrid: Optional<GridState>;\n    private practiceGrid: Optional<GridState>;\n\n\n    private constructor(toggleSound: boolean,\n        progressionDisabled: boolean,\n        chosenDiff: Difficulty,\n        chosenGridSize: number,\n        maxLevel: number,\n        maxDiff: Difficulty,\n        currentLevel: number,\n        currentStage: number,\n        storyGrid: Optional<GridState>,\n        practiceGrid: Optional<GridState>,\n        totalCoins: number,\n    ) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxGrid = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n        this.storyGrid = storyGrid;\n        this.practiceGrid = practiceGrid;\n        this.totalCoins = totalCoins;\n    }\n\n    public static get(): PlayerSettingsManager {\n        return this.singleton;\n    }\n\n    public static initialize(): Promise<any> {\n        localForage.config({\n            name: 'skeletonFlip',\n            version: 1.0,\n            size: 4980736,\n            storeName: 'playerSettings',\n            description: 'Store save data'\n        });//try with no settings\n        return localForage.getItem(PlayerSettingsManager.STORE_KEY, (e, v) => {\n            console.log(`retrieved from storage:`, [v]);\n            if (e) {\n                console.log(`problem retrieving from store: ${e}`);\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else if (!v) {\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else {\n                const saveData: any = v;\n                if (saveData.version === 1) {\n                    this.singleton = PlayerSettingsManager.deserializeV1(saveData);\n                }\n            }\n        });\n    }\n    /** \n    * clear grid state\n    */\n    public saveGridState(): void;\n    /** \n     * clear grid state\n     */    \n    public saveGridState(gridState: GridState);\n    public saveGridState(gridState?: GridState): void {\n        if (this.isProgressionDisabled()) {\n            this.practiceGrid = Optional.ofNullable(gridState);\n        } else {\n            this.storyGrid = Optional.ofNullable(gridState);\n        }\n        this.saveToStorage();\n    }\n\n    public getGridState(): Optional<GridState> {\n        if (this.isProgressionDisabled()) {\n            return this.practiceGrid;\n        } else {\n            return this.storyGrid;\n        }\n    }\n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n        this.saveToStorage();\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n        this.saveToStorage();\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n        this.saveToStorage();\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n        this.saveToStorage();\n    }\n\n    public isSoundOff(): boolean {\n        return this.soundOff;\n    }\n\n    public setIsSoundOff(isSoundOff: boolean): void {\n        this.soundOff = isSoundOff;\n        this.saveToStorage();\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n\n    public setProgressionDisabled(isProgDisabled: boolean) {\n        this.progressionDisabled = isProgDisabled;\n        this.saveToStorage();\n    }\n\n    public isProgressionDisabled(): boolean {\n        return this.progressionDisabled;\n    }\n\n    public getTotalCoins(): number {\n        return this.totalCoins;\n    }\n\n    public setTotalCoins(newTotal: number): void {\n        this.totalCoins = newTotal;\n        this.saveToStorage();\n    }\n\n    public getMaxGridSize(): number {\n        return this.maxGrid;\n    }\n\n    public setMaxGridSize(newVal: number): void {\n        this.maxGrid = newVal;\n        this.saveToStorage();\n    }\n\n    public getMaxDiff(): Difficulty {\n        return this.maxDifficulty;\n    }\n\n    public setMaxDiff(newDiff: Difficulty): void {\n        this.maxDifficulty = newDiff;\n        this.saveToStorage();\n    }\n\n    private serializeV1(): SaveDataV1 {\n        return {\n            version: 1,\n            soundOff: this.soundOff,\n            progressionDisabled: this.progressionDisabled,\n            chosenDifficulty: this.chosenDifficulty.getDifficultyLevel(),\n            chosenGridSize: this.chosenGridSize,\n            maxLevel: this.maxGrid,\n            maxDifficulty: this.maxDifficulty.getDifficultyLevel(),\n            currentLevel: this.currentLevel,\n            currentStage: this.currentStage,\n            storyGrid: this.storyGrid.map(g => g.toSaveState()).orElse(null),\n            practiceGrid: this.practiceGrid.map(g => g.toSaveState()).orElse(null),\n            totalCoins: this.totalCoins,\n        }\n\n    }\n\n    private static deserializeV1(save: SaveDataV1): PlayerSettingsManager {\n        return new PlayerSettingsManager(\n            save.soundOff,\n            save.progressionDisabled,\n            Difficulty.getByDifficultyLevel(save.chosenDifficulty),\n            save.chosenGridSize,\n            save.maxLevel,\n            Difficulty.getByDifficultyLevel(save.maxDifficulty),\n            save.currentLevel,\n            save.currentStage,\n            Optional.ofNullable(save.storyGrid).map(s => GridState.fromSaveState(s)),\n            Optional.ofNullable(save.practiceGrid).map(s => GridState.fromSaveState(s)),\n            save.totalCoins\n        );\n    }\n\n    private saveToStorage() {\n        localForage.setItem(\n            PlayerSettingsManager.STORE_KEY,\n            this.serializeV1(),\n        );\n    }\n\n    public clearStorage() { //todo this is temporary, should build in permenatn button or something\n        localForage.setItem(PlayerSettingsManager.STORE_KEY, null);\n    }\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import ButtonBase from \"./buttonBase\";\nimport { Vector, Engine } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport { Supplier } from \"java8script\";\n\nexport class ExitButton extends ButtonBase {\n\n    public constructor(engine: Engine, onExit: Supplier<void>) {\n        const texture = Resources.uiX;\n        super(texture, onExit);\n        this.scale = new Vector(Config.exitButtonSize / texture.width, Config.exitButtonSize / texture.height);\n        this.setHeight(Config.exitButtonSize);\n        this.setWidth(Config.exitButtonSize);\n        this.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n        this.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    }\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(width: number, height: number) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(width / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(height / tile.height);\n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows * numberOfCols; row++) {\n\n            tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    private getTileMap(): TileMap {\n        return this.tileMap;\n    }\n\n    public static getDefaultTileMap(engine: Engine): TileMap {\n        return new BackgroundManager(engine.drawWidth, engine.drawHeight).getTileMap();\n    }\n\n    public static getCustomTileMap(width, height): TileMap {\n        return new BackgroundManager(width, height).getTileMap();\n    }\n}","import { Scene, Engine, Axis, Texture } from \"excalibur\";\nimport BackgroundManager from \"../engine/managers/backgroundManager\";\nimport { Config } from \"../resources\";\nimport ScrollBar from \"../actors/bars/scrollBar\";\nimport { IDimensions } from \"../engine/helpers\";\nimport ButtonBase from \"../actors/bars/buttonBase\";\n\nexport default class BaseScene extends Scene {\n\n    public scrollBar: ScrollBar;\n    public engine: Engine;\n\n    constructor(engine: Engine) {\n        super(engine);\n        this.engine = engine;\n        this.scrollBar = new ScrollBar(engine);\n        this.add(this.scrollBar);//for some reason adding in the initialize makes the drag stop working\n    }\n\n    public setBackround(bottomOfBottomElement: number) {\n        if (bottomOfBottomElement > this.engine.drawHeight) {\n            this.addTileMap(BackgroundManager.getCustomTileMap(this.engine.drawWidth, bottomOfBottomElement + Config.optionPadding));//need to draw to fit the whole canvas rather than just the screen \n        } else {\n            this.addTileMap(BackgroundManager.getDefaultTileMap(this.engine));\n        }\n    }\n\n    public initScroll(bottomOfBottomElement: number) {\n        this.scrollBar.setScrollBottom(this.engine.drawHeight / 2 + (bottomOfBottomElement - this.engine.drawHeight) + Config.optionPadding)\n        this.camera.strategy.lockToActorAxis(this.scrollBar, Axis.Y)\n    }\n\n    public createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n        const button = new ButtonBase(texture, onClick);\n        button.x = x\n        button.y = y\n        button.scale = dims.scale;\n        button.setHeight(dims.height);\n        button.setWidth(dims.width);\n        return button;\n    }\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/managers/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/managers/sizingManager';\nimport { CardCallbackProvider } from './cardCallbackProvider';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight() / 2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.silentSetFlipped();\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n\n    public silentSetFlipped() {\n        this.flipped = true;\n        this.setDrawing(\"flip\");\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n\n    public static create(screenCenter: ex.Vector, row: number, col: number, callbackProvider: CardCallbackProvider, type: CardType, flipped: boolean): Card {\n        let card: Card;\n        if (type === CardType.SKELETON) {\n            card = Card.skeleton(screenCenter, row, col, callbackProvider.skeletonCardCallback);\n        } else if (type === CardType.ATTACK) {\n            card = Card.attack(screenCenter, row, col, callbackProvider.attackCardCallback);\n        } else if (type === CardType.COIN) {\n            card = Card.coin(screenCenter, row, col, callbackProvider.coinCardCallback);\n        } else if (type === CardType.POTION) {\n            card = Card.potion(screenCenter, row, col, callbackProvider.potionCardCallback);\n        }\n\n        if (flipped) {\n            card.silentSetFlipped();\n        }\n        return card;\n    }\n}\n\n","import { CardType } from \"../../actors/card/card\";\nimport { SaveDataGrid, SaveCellData } from \"./playerSettingsManager\";\nimport { Stream } from \"java8script\";\n\nexport class GridState {\n    private hearts: number;\n    private swords: number;\n    private coins: number;\n    private gridSize: number;\n    private grid: CardState[][];\n\n    constructor(gridSize: number, grid: CardState[][], hearts: number, swords: number, coins: number) {\n        this.gridSize = gridSize;\n        this.grid = grid;\n        this.hearts = hearts;\n        this.swords = swords;\n        this.coins = coins;\n    }\n\n    public getGridSize(): number {\n        return this.gridSize;\n    }\n\n    public getGridState(): CardState[][] {\n        return this.grid;\n    }\n\n    public getHearts(): number {\n        return this.hearts;\n    }\n\n    public getSwords(): number {\n        return this.swords;\n    }\n\n    public getCoins(): number {\n        return this.coins;\n    }\n\n    public toSaveState(): SaveDataGrid {\n        const saveGridState: SaveCellData[][] = Stream.ofValues(...this.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(cardState => cardState.toSaveState())\n                .toArray())\n            .toArray();\n        return {\n            hearts: this.getHearts(),\n            swords: this.getSwords(),\n            coins: this.getCoins(),\n            gridSize: this.getGridSize(),\n            grid: saveGridState,\n        };\n    }\n\n    public static fromSaveState(save: SaveDataGrid): GridState {\n        const saveGridState: CardState[][] = Stream.ofValues(...save.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(cardState => CardState.fromSaveState(cardState))\n                .toArray())\n            .toArray();\n        return new GridState(save.gridSize, saveGridState, save.hearts, save.swords, save.coins);\n    }\n}\n\nexport class CardState {\n    private type: CardType;\n    private flipped: boolean;\n\n    constructor(type: CardType, flipped: boolean) {\n        this.type = type;\n        this.flipped = flipped;\n    }\n\n    public getType(): CardType {\n        return this.type;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public toSaveState(): SaveCellData {\n        return {\n            type: this.type,\n            flipped: this.flipped,\n        };\n    }\n\n    public static fromSaveState(save: SaveCellData): CardState {\n        return new CardState(\n            save.type,\n            save.flipped\n        );\n    }\n}","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","import { GameCoordinator } from '../../coordinator/coordinator';\nimport SoundManager from '../../engine/managers/soundManager';\nimport BackgroundManager from '../../engine/managers/backgroundManager';\nimport { Engine, Scene } from 'excalibur';\nimport { Scenes } from '../scenes';\nimport { ExitButton } from '../../actors/bars/exitButton';\n\nexport abstract class GameWindowBase extends Scene {\n\n  protected coordinator: GameCoordinator;\n  protected engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.coordinator = GameCoordinator.initialize(this.engine);\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    this.coordinator.getAllActors()\n      .forEach(c => this.add(c));\n  }\n\n  public onDeactivate() {\n    this.coordinator.getAllActors()\n      .forEach(c => this.remove(c));\n  }\n} \n","\nimport * as React from 'react';\nimport ReactModal = require('react-modal');\nimport { render } from 'react-dom';\nimport { Config, Resources } from '../resources';\nimport { TextAlignProperty } from 'csstype';\nimport { Supplier } from 'java8script';\nimport { UpgradeDetails } from '../actors/upgrades/upgradeWidget';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport SoundManager from '../engine/managers/soundManager';\nconst xButton = require('../images/ui/x.png');\nconst skullImage = require('../images/skull.png');\nconst swordImage = require('../images/sword.png');\nconst potionImage = require('../images/potion.png');\nconst coinImage = require('../images/coin.png');\nconst heartUIImg = require('../images/ui/heart.png');\nconst swordUIImage = require('../images/ui/sword.png');\nconst threeImage = require('../images/numbers/3.png');\nconst buyImage = require('../images/menu/buy.png');\n\ninterface Styles {\n    p: {\n        padding: string,\n        margin: string,\n        fontSize: number,\n        flex: number,\n        textAlign: TextAlignProperty,\n    },\n    h1: {\n        textAlign: TextAlignProperty,\n    },\n    holder: {\n        width: string,\n    }\n    imgHolder: {\n        width: string,\n        textAlign: TextAlignProperty,\n    }\n    cardImg: {\n        width: number,\n    }\n}\n\nconst styles: Styles = {\n    p: { padding: \"16px\", margin: \"0px\", fontSize: 20, flex: 1, textAlign: \"center\" },\n    h1: { textAlign: \"center\" },\n    holder: {\n        width: \"100%\"\n    },\n    imgHolder: {\n        width: \"100%\",\n        textAlign: \"center\"\n    },\n    cardImg: {\n        width: 100\n    }\n}\n\nexport class ModalRenderer {\n\n    private isOpen: boolean;\n    private static singleton;\n\n    public static get(): ModalRenderer {\n        if (!this.singleton) {\n            this.singleton = new ModalRenderer(false);\n        }\n        return this.singleton;\n    }\n\n    private constructor(isOpen: boolean) {\n        this.isOpen = isOpen;\n    }\n\n    public upgradeModal(upgradeDetails: UpgradeDetails, onClick: () => void) {\n        const maxLevel: boolean = upgradeDetails.currentLevel === upgradeDetails.maxLevel;\n        const canAfford: boolean = PlayerSettingsManager.get().getTotalCoins() >= upgradeDetails.price;\n\n        const innerStuff = (isHover: boolean) => (<div style={styles.holder}>\n            <h1 style={styles.h1}>{upgradeDetails.title}</h1>\n            <h2 style={styles.h1}>Price to Upgrade: {upgradeDetails.price}</h2>\n            <h2 style={styles.h1}>Current Level: {upgradeDetails.currentLevel}</h2>\n            <p style={styles.p}>{upgradeDetails.description}</p>\n            <div style={styles.h1}>\n                {canAfford && !maxLevel\n                    ? <div style={{ background: \"black\", display: \"inline-block\", lineHeight: 0 }}>\n                        <img width={175} src={buyImage} style={isHover ? { opacity: 0.8 } : {}}\n                            onMouseEnter={() => {\n                                this.setOpenAndRerender(true, innerStuff(true));\n                            }}\n                            onMouseLeave={() => {\n                                this.setOpenAndRerender(true, innerStuff(false));\n                            }}\n                            onClick={this.onClickAndClose(onClick)} />\n                    </div>\n                    : (!maxLevel ? <p style={styles.p}>Not Enough Coins</p> : <p style={styles.p}>Fully Upgraded!</p>)}\n            </div>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff(false));\n    }\n\n    private onClickAndClose(onclick: Supplier<void>): Supplier<void> {\n        return () => {\n            SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n            onclick();\n            this.setOpenAndRerender(false);\n        }\n    }\n\n    public introModal() {\n        const innerStuff = (<div >\n            <h1 style={styles.h1}>Introduction</h1>\n            <p style={styles.p}>Welcome to Skeleton Flip!</p>\n            <p style={styles.p}>Flip cards, find coins, drink potions and kill skeletons. The goal of the game is to flip all the cards on the board without running out of hearts.</p>\n            <p style={styles.p}>In Story Mode, you progress through increasingly larger and larger grids, you can unlock larger grid sizes and harder difficulties by collecting coins and unlocking upgrades.</p>\n            <p style={styles.p}>If Story Mode is disabled, you may choose to practice any grid size you like.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public howToPlayModal() {\n        const innerStuff = (<div>\n            <h1 style={styles.h1}>How To Play</h1>\n            <p style={styles.p}>The top right of the game screen shows your health (<img width={20} src={heartUIImg} alt=\"heart\" />) and current attack (<img width={20} src={swordUIImage} alt=\"sword\" />). If you run out of health you lose!</p>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={threeImage} alt=\"three\" />\n            </div>\n            <p style={styles.p}>The numbers on the outer edges of the grid indicate how many skeletons are hiding in that row or column.</p>\n            <p style={styles.p}>Tap cards inside the grid to flip them over. Remember you need to flip every card in the grid to advance, so choose your path wisely!</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public cardModal() {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>Cards</h1>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={skullImage} alt=\"skull\" />\n            </div>\n            <p style={styles.p}>Oh no! Flipping over a skeleton card will hurt you, taking away one health unless you have a sword to defend yourself.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={swordImage} alt=\"sword\" />\n            </div>\n            <p style={styles.p}>Sweep Low! Flipping over a sword card will add to your attack count, no need to fear the next skeleton you flip over, the sword will take care of it!</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={potionImage} alt=\"potion\" />\n            </div>\n            <p style={styles.p}>Tastes like Strawberry! Flipping over a potion card will heal any wounds that you have taken from those nasty skeletons.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={coinImage} alt=\"coin\" />\n            </div>\n            <p style={styles.p}>Take that to the bank! Flipping over a coin card will add to your riches, if you complete a level you will keep the coins you found and can use them for upgrades.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public textModal(title: string, text: string) {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>{title}</h1>\n            <p style={styles.p}>\n                {text}\n            </p>\n            <button onClick={() => PlayerSettingsManager.get().clearStorage()/*//todo Remove*/}>Clear Storage [Dev Tool]</button>\n            <button onClick={() => PlayerSettingsManager.get().setTotalCoins(PlayerSettingsManager.get().getTotalCoins() + 10)/*//todo Remove*/}>Add 10 coins [Dev Tool]</button>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    private setOpenAndRerender = (isOpen: boolean, innerStuff?: any) => {\n        this.isOpen = isOpen;\n        this.render({\n            innerStuff: innerStuff,\n            open: this.isOpen,\n            closeFunc: () => {\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n                this.setOpenAndRerender(false);\n            }\n        });\n    }\n\n    private render = (props: Props) => {\n        render(<Modal {...props} />,\n            document.getElementById('modal')\n        );\n    }\n}\n\ninterface Props {\n    open: boolean;\n    closeFunc: () => void;\n    innerStuff?: any;\n}\n\ninterface State {\n}\n\nexport default class Modal extends React.Component<Props, State> {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <ReactModal\n                style={{\n                    content: {\n                        borderRadius: \"0px\",\n                        backgroundColor: '#a77600',\n                        borderWidth: 8,\n                        borderColor: \"#402f08\",\n                        padding: \"16px\",\n                    }\n                }}\n                appElement={document.getElementById('modal')}\n                isOpen={this.props.open}>\n                <div style={{ float: \"right\", height: Config.exitButtonSize, position: \"fixed\", right: \"24px\", top: \"24px\" }}>\n                    <a style={{}}>\n                        <img height={Config.exitButtonSize} width={Config.exitButtonSize} src={xButton} alt=\"exit\" onPointerUp={this.props.closeFunc} />\n                    </a>\n                </div>\n                <div style={{ borderRadius: \"16px\", borderStyle: \"solid\", borderWidth: \"4px\", minHeight: \"95%\", backgroundColor: \"#896000\", borderColor: \"#402f08\", display: \"flex\" }}>\n                    {this.props.innerStuff}\n                </div>\n            </ReactModal>\n        );\n    }\n}","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"016faedc6c541164a36c2a95fa39ae18.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","import { Actor, Label, Texture, BaseAlign, TextAlign } from \"excalibur\";\nimport ButtonBase from \"../bars/buttonBase\";\nimport { IDimensions } from \"../../engine/helpers\";\nimport { ModalRenderer } from \"../../modal/modal\";\nimport { Config } from \"../../resources\";\nimport FontManager from \"../../engine/managers/fontManager\";\nimport SizingManager from \"../../engine/managers/sizingManager\";\n\nexport interface UpgradeDetails {\n    title: string;\n    price: number;\n    currentLevel: number;\n    maxLevel: number;\n    description: string;\n}\n\nexport default class UpgradeWidget {\n    private tileButton: Actor;\n    private label: Label;\n    private purchaseOnClick: () => void;\n    private upgradeDetails: UpgradeDetails;\n\n    public constructor(x, y, tileDims: IDimensions, tileTexture: Texture, label: string, details: UpgradeDetails, onClick: () => void) {\n        this.upgradeDetails = details;\n        this.purchaseOnClick = onClick;\n        this.tileButton = new ButtonBase(tileTexture, () => this.modalOnClick() );\n        this.tileButton.x = x;\n        this.tileButton.y = y;\n        this.tileButton.scale = tileDims.scale;\n        this.tileButton.setHeight(tileDims.height);\n        this.tileButton.setWidth(tileDims.width);\n\n        this.label = new Label(label, this.tileButton.getRight() + Config.optionPadding, y, null, FontManager.get().getMono());\n        this.label.fontSize = SizingManager.get().menuFontSize();\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Left;\n    }\n\n    public modalOnClick() {\n        ModalRenderer.get().upgradeModal(this.upgradeDetails, this.purchaseOnClick)\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.label,\n            this.tileButton\n        ];\n    }\n\n    public  getBottom(): number {\n        return this.tileButton.getBottom();\n    }\n\n    public updateDetails(newDeets: UpgradeDetails): void {\n        this.upgradeDetails = newDeets;\n    }\n}","import { Scenes } from './scenes';\nimport { Engine, Label, BaseAlign, TextAlign, Actor } from 'excalibur';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport BaseScene from './BaseScene';\nimport FontManager from '../engine/managers/fontManager';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport SizingManager from '../engine/managers/sizingManager';\nimport {calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport { Resources, Config, Upgrades } from '../resources';\nimport UpgradeWidget from '../actors/upgrades/upgradeWidget';\nimport { Difficulty } from '../engine/progression/difficulty';\n\nexport class UpgradeScene extends BaseScene {\n\n  private coinsLabel: Label;\n  private maxGrid: UpgradeWidget;\n  private maxDiff: UpgradeWidget;\n\n  public onInitialize(engine: Engine) {\n    const title = this.title();\n    this.coinsLabel = this.playercoinsLabel(engine.drawWidth / 2, title.getBottom() + Config.optionPadding);\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.gridTile, sizing.padding, sizing.maxScale);\n    console.log(dims);\n    this.maxGrid = new UpgradeWidget(\n      this.getButtonX(engine, dims.width),\n      this.coinsLabel.getBottom() + 100,\n      dims,\n      Resources.gridTile,\n      \"Grid Size\",\n      Upgrades.gridSize.getDetails(PlayerSettingsManager.get().getMaxGridSize()),\n      () => {\n        const ps = PlayerSettingsManager.get();\n        const coins = ps.getTotalCoins();\n        const currentgrid = ps.getMaxGridSize();\n        ps.setTotalCoins(coins - Upgrades.gridSize.getDetails(currentgrid).price);\n        ps.setMaxGridSize(currentgrid+1);\n        this.onActivate(); //refresh\n      },\n    );\n\n    this.maxDiff = new UpgradeWidget(\n      this.getButtonX(engine, dims.width),\n      this.maxGrid.getBottom() + dims.width/2 + Config.optionPadding,\n      dims,\n      Resources.difficultyTile,\n      \"Difficulty\",\n      Upgrades.difficulty.getDetails(PlayerSettingsManager.get().getMaxDiff().getDifficultyLevel()),//todo\n      () => {\n        const ps = PlayerSettingsManager.get();\n        const coins = ps.getTotalCoins();\n        const currentDiff = ps.getMaxDiff().getDifficultyLevel();\n        ps.setTotalCoins(coins - Upgrades.difficulty.getDetails(currentDiff).price);\n        ps.setMaxDiff(Difficulty.getByDifficultyLevel(currentDiff+1));\n        this.onActivate(); //refresh\n      },\n    );\n\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.add(title)\n    this.add(this.coinsLabel);\n    this.maxGrid.getDrawables()\n    .forEach(d => this.add(d));\n    this.maxDiff.getDrawables()\n    .forEach(d => this.add(d));\n\n    this.initScroll(0);\n    this.setBackround(engine.drawHeight);\n  }\n\n  private getButtonX(engine: Engine, buttonWidth: number): number {\n    return SizingManager.get().isMobile()\n     ? 0 + (buttonWidth/2) + Config.gridPadding\n     : engine.drawWidth/3;    \n  }\n\n  private title(): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.upgradeTitle, 0.6, 1);\n    const sprite = Resources.upgradeTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth / 2;\n    title.y = dims.height / 2 + Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale;\n    return title;\n  }\n\n  private playercoinsLabel(x: number, y: number): Label {\n    const coins = PlayerSettingsManager.get().getTotalCoins();\n    const coinsLabel = new Label(this.coinsLabelString(coins), x, y, null, FontManager.get().getMono());\n    coinsLabel.fontSize = SizingManager.get().menuFontSize();\n    coinsLabel.baseAlign = BaseAlign.Middle;\n    coinsLabel.textAlign = TextAlign.Center;\n    return coinsLabel;\n  }\n\n  private coinsLabelString(coins: number): string {\n    return `Coins: ${coins}`;\n  }\n\n  public onActivate() {\n    const psm = PlayerSettingsManager.get();\n    this.coinsLabel.text = this.coinsLabelString(PlayerSettingsManager.get().getTotalCoins());\n    this.maxGrid.updateDetails(Upgrades.gridSize.getDetails(psm.getMaxGridSize()));\n    this.maxDiff.updateDetails(Upgrades.difficulty.getDetails(psm.getMaxDiff().getDifficultyLevel()))\n\n  }\n\n  public onDeactivate() {\n  }\n} \n","import { GameWindowBase } from './gameWindowBase';\nimport ProgressionManager from '../../engine/progression/progressionManager';\n\nexport class GridGameWindow extends GameWindowBase {\n\n  private currentOptionGridSize: number;\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    this.currentOptionGridSize = ProgressionManager.get().getOptionGridSize()\n  }\n\n  //Override\n  public onActivate(): void {\n    const newSize = ProgressionManager.get().getOptionGridSize()\n    if(this.currentOptionGridSize != newSize) {\n      this.currentOptionGridSize = newSize;\n      this.coordinator.resetGame(true);\n    }\n    super.onActivate();\n  }\n} \n","import { Actor, Label, Sprite, Vector, BaseAlign, TextAlign, Color } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport SizingManager from \"../../engine/managers/sizingManager\";\nimport FontManager from \"../../engine/managers/fontManager\";\n\nexport default class CoinCount {\n\n    private coinCount: number;\n    private coinIcon: Actor;\n    private countLabel: Label;\n\n    private constructor(currentCount: number, countIcon: Actor, countLabel: Label) {\n        this.coinCount = currentCount;\n        this.coinIcon = countIcon;\n        this.countLabel = countLabel;\n    }\n\n    public static create(x: number, y: number, currentCount: number): CoinCount {\n        const coinActor = CoinCount.createCoinIcon(x, y);\n        return new CoinCount(\n            currentCount,\n            coinActor,\n            CoinCount.createCountLabel(currentCount, coinActor.getRight() + Config.gridPadding, y),\n        );\n    }\n\n    public getCoinCount(): number {\n        return this.coinCount;\n    }\n\n    public addToCoinCount(toAdd: number): void {\n        this.coinCount = this.coinCount + toAdd;\n        this.countLabel.text = `${this.coinCount}`;\n    }\n\n    public drawables(): Actor[] {\n        return [\n            this.coinIcon,\n            this.countLabel,\n        ];\n    }\n\n    private static createCoinIcon(x: number, y: number): Actor {\n        const texture = Resources.uiCoins;\n        const sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        const scale = new Vector(SizingManager.get().getUIItemSize() / texture.width, SizingManager.get().getUIItemSize() / texture.height);\n        const actor = new Actor(x, y, texture.width, texture.height);\n        actor.addDrawing(sprite);\n        actor.scale = scale;\n        return actor;\n    }\n\n    private static createCountLabel(currentCount: number, x: number, y: number): Label {\n        const label = new Label(\n            `${currentCount}`,\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        label.fontSize = SizingManager.get().getUIItemSize() * 0.7;\n        label.baseAlign = BaseAlign.Middle;\n        label.textAlign = TextAlign.Left;\n        label.color = Color.fromHex(\"#958a2d\");\n        return label;\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/managers/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize() + 1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index + 1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize() + 1) * Config.gridPadding) / 2;\n\n        if (type === \"col\") {\n            return top;\n        } else {\n            return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n        }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite().clone();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Optional, Supplier } from \"java8script\";\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport { GridState, CardState } from \"../engine/progression/gridState\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, screenCenter);\n    }\n\n    public static createGridFromState(callbackProvider: CardCallbackProvider, gridSize: number, state: Optional<GridState>, engine: ex.Engine): GridCoordinator {\n        return state\n            .map(s => GridCoordinator.loadSavedGrid(callbackProvider, engine, s))\n            .orElseGet(() => GridCoordinator.createNewGrid(callbackProvider, gridSize, engine))\n    }\n\n    public static createNewGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth / 2, engine.drawHeight / 2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons(screenCenter, callbackProvider.skeletonCardCallback);\n        coord.initializeBuffs(screenCenter, callbackProvider);\n        return coord;\n    }\n\n    public currentGridState(): { gridSize: number, cardState: CardState[][] } {\n        const cardStates: CardState[][] = Stream.ofValues(...this.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(card => new CardState(card.type(), card.isFlipped()))\n                .toArray())\n            .toArray();\n        return {\n            gridSize: this.gridSize,\n            cardState: cardStates\n        };\n    }\n\n    public getGridAsList(): Card[] {\n        return Stream.of(this.grid)\n            .flatMap(a => Stream.ofValues(...a))\n            .toArray();\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n            .flatMap(a => Stream.ofValues(...a))\n            .filter(card => card.getRow() == rowIndex)\n            .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n            .flatMap(a => Stream.ofValues(...a))\n            .filter(card => card.getCol() == colIndex)\n            .toArray();\n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(screenCenter: Vector, skeletonCardCallback: Supplier<void>): void {\n        while (this.needMoreSkeletons()) {\n            const { row, col } = this.randomCoord();\n            if (this.isCardACoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(screenCenter, row, col, skeletonCardCallback));\n            }\n        }\n    }\n\n    private initializeBuffs(screenCenter: Vector, callbackProvider: CardCallbackProvider): void {\n        while (this.needMoreBuffs()) {\n            const { row, col } = this.randomCoord();\n            if (this.isCardACoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col, screenCenter, callbackProvider))\n            }\n        }\n    }\n\n    private initializeFromState(state: GridState, screenCenter: Vector, callbackProvider: CardCallbackProvider): void {\n        this.gridSize = state.getGridSize();\n        state.getGridState().forEach((row: CardState[], rowIndex: number) => {\n            row.forEach((card: CardState, colIndex: number) => {\n                const createdCard = Card.create(screenCenter, rowIndex, colIndex, callbackProvider, card.getType(), card.isFlipped());\n                this.insertCard(rowIndex, colIndex, createdCard);\n            });\n        });\n    }\n\n    private generateBuffCard(row: number, col: number, screenCenter: Vector, callbackProvider: CardCallbackProvider): Card {\n        return Math.random() < 0.5\n            ? Card.attack(screenCenter, row, col, callbackProvider.attackCardCallback)\n            : Card.potion(screenCenter, row, col, callbackProvider.potionCardCallback)\n    }\n\n    private insertCard(row: number, col: number, card: Card): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCardACoin(row: number, col: number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    }\n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): { row: number, col: number } {\n        return {\n            row: Math.floor(Math.random() * this.gridSize),\n            col: Math.floor(Math.random() * this.gridSize)\n        };\n    }\n\n    private static loadSavedGrid(callbackProvider: CardCallbackProvider, engine: ex.Engine, gridState: GridState): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth / 2, engine.drawHeight / 2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridState.getGridSize(), screenCenter);\n        coord.initializeFromState(gridState, screenCenter, callbackProvider);\n        return coord;\n    }\n}","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport SizingManager from \"../../engine/managers/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport SizingManager from \"../engine/managers/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max: number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n            .map(idx => {\n                if (idx > (defaultedCurrent - 1)) {\n                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                } else {\n                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                }\n            })\n            .toArray();\n\n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if ((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n        this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if (this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n}","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream, Optional } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport { Vector, Actor } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/managers/sizingManager\";\nimport PlayerSettingsManager from \"../engine/progression/playerSettingsManager\";\nimport { GridState } from \"../engine/progression/gridState\";\nimport CoinCount from \"../actors/bars/coinCount\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private coinCount: CoinCount;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine) {\n        this.engine = engine;\n        this.resetGame(false);\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const coordinator: GameCoordinator = new GameCoordinator(engine);\n        return coordinator;\n    }\n\n    public resetGame(shouldCreateFresh: boolean): void {\n        const mm: SizingManager = SizingManager.get();\n        const saveState: Optional<GridState> = PlayerSettingsManager.get().getGridState();\n        this.healthCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { }, Resources.uiHeart, saveState.map(s => s.getHearts()).orElse(Config.maxHealth));\n        this.attackCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword, saveState.map(s => s.getSwords()).orElse(0));\n        this.coinCount = CoinCount.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 2.5, saveState.map(gs => gs.getCoins()).orElse(0));\n\n        this.gridCoordinator = shouldCreateFresh\n            ? GridCoordinator.createNewGrid(this, ProgressionManager.get().getGameGridSize(), this.engine)\n            : GridCoordinator.createGridFromState(this, ProgressionManager.get().getGameGridSize(), saveState, this.engine);\n        this.rowCounts = this.createRowCountCards();\n        this.columnCounts = this.createColCountCards();\n    }\n\n    private getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    private getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    private getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    public getAllActors(): Actor[] {\n        return Stream.ofValues<Actor[]>(\n            this.gridCoordinator.getGridAsList(),\n            this.getColCountCards(),\n            this.getRowCountCards(),\n            this.getStatTrackers(),\n            ProgressionManager.get().isProgressionDisabled() ? [] : this.coinCount.drawables(),\n        ).flatMap(a => Stream.ofValues(...a))\n            .toArray();\n    }\n\n    private updateLabels = () => {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (this.healthCoordinator.getCurrent() === 0) {\n            this.gameOver();\n        } else if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.victory();\n        }\n    }\n\n    private gameOver(): void {\n        this.engine.goToScene(Scenes.GAME_OVER);\n        ProgressionManager.get().resetProgress();\n        PlayerSettingsManager.get().saveGridState();\n        this.resetGame(true);\n    }\n\n    private victory(): void {\n        const psm = PlayerSettingsManager.get();\n        const progman = ProgressionManager.get();\n        this.engine.goToScene(Scenes.VICTORY);\n        progman.progress();\n        psm.saveGridState();\n        if (!progman.isProgressionDisabled()) {\n            //don't want to add coin to total in practice mode\n            psm.setTotalCoins(psm.getTotalCoins() + this.coinCount.getCoinCount());\n        }\n        this.resetGame(true);\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.coinCount.addToCoinCount(1);\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.saveGridProgress();\n        this.checkIfCompleteGame();\n    }\n\n    private saveGridProgress(): void {\n        const grid = this.gridCoordinator.currentGridState();\n        PlayerSettingsManager.get().saveGridState(new GridState(\n            grid.gridSize,\n            grid.cardState,\n            this.healthCoordinator.getCurrent(),\n            this.attackCoordinator.getCurrent(),\n            this.coinCount.getCoinCount(),\n        ));\n    }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/managers/fontManager\";\nimport ProgressionManager from \"../../engine/progression/progressionManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return ProgressionManager.get().isProgressionDisabled() ? \"\" :`${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport LevelDisplay from '../../actors/bars/level';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/managers/sizingManager';\nimport { GameWindowBase } from './gameWindowBase';\n\nexport class StoryGameWindow extends GameWindowBase {\n\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth / 2, mm.getMenuHeight() - mm.getUIItemSize() / 2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n\n  }\n\n  public onActivate() {\n    super.onActivate();\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Actor, Engine, Axis } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture, IDimensions } from '../engine/helpers';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport { ModalRenderer } from '../modal/modal';\nimport SizingManager from '../engine/managers/sizingManager';\nimport BaseScene from './BaseScene';\n\nexport class Help extends BaseScene {\n\n  private modalRenderer: ModalRenderer = ModalRenderer.get();\n\n  public onInitialize(engine: ex.Engine) {\n\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n\n    const titleDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.helpTitle, 0.6, 1);\n    const title = new Actor(\n      engine.drawWidth / 2,\n      titleDims.height / 2 + Config.gridPadding,\n      titleDims.width,\n      titleDims.height\n    );\n    title.addDrawing(Resources.helpTitle);\n    title.scale = titleDims.scale;\n    this.add(title);\n\n    const centerx = engine.drawWidth / 2;\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.introMenu, sizing.padding, sizing.maxScale);\n\n    const intro = this.createButton(dims, centerx, title.getBottom() + dims.height / 2 + Config.optionPadding, Resources.introMenu, () => this.modalRenderer.introModal());\n    const playing = this.createButton(dims, centerx, intro.getBottom() + Config.gridPadding + dims.height / 2, Resources.playingMenu, () => this.modalRenderer.howToPlayModal());\n    const cards = this.createButton(dims, centerx, playing.getBottom() + Config.gridPadding + dims.height / 2, Resources.cardMenu, () => this.modalRenderer.cardModal());\n    const credits = this.createButton(dims, centerx, cards.getBottom() + Config.gridPadding + dims.height / 2, Resources.creditsMenu, () => this.modalRenderer.textModal(\"Credits\", \"Made by Andrew\"));\n\n    this.add(intro);\n    this.add(playing);\n    this.add(cards);\n    this.add(credits);\n\n\n    this.initScroll(credits.getBottom());\n    this.setBackround(credits.getBottom());\n  }\n\n  public createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n    const button = new ButtonBase(texture, onClick);\n    button.x = x\n    button.y = y\n    button.scale = dims.scale;\n    button.setHeight(dims.height);\n    button.setWidth(dims.width);\n    return button;\n  }\n\n  public onActivate() {\n  }\n\n  public onDeactivate() {\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier, Function, Optional, Consumer } from \"java8script\";\nimport SoundManager from \"../../engine/managers/soundManager\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n    private onToggle: Optional<Consumer<boolean>>\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean, onToggle?: Consumer<boolean>) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n        this.onToggle = Optional.ofNullable(onToggle);\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public setOnToggle(onToggle: Consumer<boolean>): void {\n        this.onToggle = Optional.of(onToggle);\n    }\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    public setChecked(isChecked: boolean): void {\n        this.checked = isChecked;\n        this.setCheckedDrawing();\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound)\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n    private setCheckedDrawing() {\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        this.setCheckedDrawing();\n        this.onToggle.ifPresent(func => func(this.checked));\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport FontManager from \"../../engine/managers/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine, onToggle?: (checked:boolean) => void) {\n        const textSize = size - (size * 0.25);\n        const buttonSize = size + (size * 0.25);\n        \n\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = textSize;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(buttonSize, x+labelWidth*(3/4), y, defaultVal, onToggle);\n        \n    }\n\n    public addOnToggle(onToggle: (checked:boolean) => void): void {\n        this.radio.setOnToggle(onToggle);\n    }\n    \n    public setChecked(isChecked: boolean): void {\n        this.radio.setChecked(isChecked);\n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getBottom() {\n        return Math.max(this.radio.getBottom(), this.label.getBottom());\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign, Color, Sprite } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/managers/fontManager\";\nimport { Colorize } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Stream } from \"java8script\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButtonSprite:Sprite;\n    private leftButton: ButtonBase;\n    private rightButtonSprite: Sprite;\n    private rightButton: ButtonBase;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number, disabled: boolean) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n\n        const textSize = this.fontSize - (this.fontSize * 0.25);\n        const buttonSize = this.fontSize + (this.fontSize * 0.25);\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = textSize\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        \n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+buttonSize, null, FontManager.get().getMono());\n        this.numberLabel.fontSize = textSize\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        \n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButtonSprite = this.leftButton.getSprite();\n        this.leftButton.x = x - buttonSize*1.5\n        this.leftButton.y = y + buttonSize;\n        this.leftButton.scale = new Vector(buttonSize/Resources.uiLeft.width, buttonSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(buttonSize);\n        this.leftButton.setWidth(buttonSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButtonSprite = this.rightButton.getSprite();\n        this.rightButton.x = x + buttonSize*1.5;\n        this.rightButton.y = y + buttonSize;\n        this.rightButton.scale = new Vector(buttonSize/Resources.uiRight.width, buttonSize/Resources.uiRight.height);\n        this.rightButton.setHeight(buttonSize);\n        this.rightButton.setWidth(buttonSize);\n\n        this.updateDisabled(disabled);\n    }\n\n    public updateDisabled = (isDisabled: boolean) => {\n        this.leftButtonSprite.clearEffects();\n        this.rightButtonSprite.clearEffects();\n        if(isDisabled) {\n            const disColor = Color.Gray;\n            this.topLabel.color = disColor\n            this.numberLabel.color = disColor;\n            this.leftButtonSprite.addEffect(new Colorize(disColor));\n            this.rightButtonSprite.addEffect(new Colorize(disColor));\n            this.leftButton.setDisabled(true);\n            this.rightButton.setDisabled(true);\n        } else {\n            this.topLabel.color = Color.Black;\n            this.numberLabel.color = Color.Black;\n            this.leftButton.setDisabled(false);\n            this.rightButton.setDisabled(false);\n        }\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number, max: number): void {\n        this.max = max;\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getBottom() {\n        return Stream.ofValues<Actor>(this.leftButton, this.rightButton, this.numberLabel)\n        .map(a => a.getBottom())\n        .max()\n        .orElse(0);\n    }\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Actor, Engine } from 'excalibur';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SizingManager from '../engine/managers/sizingManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport { Consumer } from 'java8script';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport BaseScene from './BaseScene';\n\nexport class Options extends BaseScene {\n\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n  private progressionToggle: LabeledRadio;\n  private title: Actor;\n\n  public onInitialize(engine: Engine) {\n    const itemSize = SizingManager.get().getUIItemSize();\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n\n    this.addTitle();\n    this.addSoundToggle(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addProgressionToggle(itemSize)\n    const callbackForEnabling = this.addGridSize(itemSize);\n    this.progressionToggle.addOnToggle(callbackForEnabling);\n\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const createbuttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.confirmMenu, sizing.padding, sizing.maxScale);\n\n    const createButtonY =\n      this.gridSize.getBottom() < engine.drawHeight - createbuttonDims.height\n        ? engine.drawHeight - createbuttonDims.height / 2 - Config.optionPadding //grid size and confirm dont overelap so all good, draw at the bottom of screen \n        : this.gridSize.getBottom() + Config.optionPadding + createbuttonDims.height / 2;\n    const createButton = this.createButton(\n      createbuttonDims,\n      engine.drawWidth / 2,\n      createButtonY,\n      Resources.confirmMenu,\n      () => this.onConfirm()\n    );\n    this.add(createButton);\n\n    this.initScroll(createButton.getBottom());\n    this.setBackround(createButton.getBottom())\n  }\n\n  private onConfirm = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    ProgressionManager.get().setProgressionDisabled(!this.progressionToggle.isChecked());\n    PlayerSettingsManager.get().setIsSoundOff(!this.sound.isChecked())\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.optionTitle, 0.6, 1);\n    const sprite = Resources.optionTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth / 2;\n    title.y = dims.height / 2 + Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale;\n    this.title = title;\n    this.add(title);\n  }\n\n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\",\n      itemSize, this.engine.drawWidth / 2,\n      this.title.getBottom() + Config.optionPadding * 2,\n      !PlayerSettingsManager.get().isSoundOff(),\n      this.engine\n    );\n\n    this.sound.getDrawables()\n      .forEach(e => this.add(e));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, PlayerSettingsManager.get().getMaxDiff().getDifficultyLevel(), ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2,\n      this.sound.getBottom() + itemSize * 0.5 + Config.optionPadding,\n      itemSize, false);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addProgressionToggle(itemSize) {\n    this.progressionToggle = new LabeledRadio(\"Story Mode\", itemSize, this.engine.drawWidth / 2,\n      this.difficulty.getBottom() + itemSize * 1 + Config.optionPadding,\n      !ProgressionManager.get().isProgressionDisabled(), this.engine);\n\n    this.progressionToggle.getDrawables()\n      .forEach(e => this.add(e));\n  }\n\n  //returns callback for toggling the objects\n  private addGridSize(itemSize): Consumer<boolean> {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, PlayerSettingsManager.get().getMaxGridSize(), ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2,\n      this.progressionToggle.getBottom() + itemSize * 0.5 + Config.optionPadding, itemSize,\n      !ProgressionManager.get().isProgressionDisabled());\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n\n    return this.gridSize.updateDisabled;\n  }\n\n  public onActivate() {\n    this.sound.setChecked(!PlayerSettingsManager.get().isSoundOff());\n    this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize(), PlayerSettingsManager.get().getMaxGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel(), PlayerSettingsManager.get().getMaxDiff().getDifficultyLevel());\n    this.progressionToggle.setChecked(!ProgressionManager.get().isProgressionDisabled())\n  }\n\n  public onDeactivate() {\n  }\n} \n","import { Resources, Config } from '../resources';\nimport { getGameWindow } from './scenes';\nimport SoundManager from '../engine/managers/soundManager';\nimport {calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/managers/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport SizingManager, { IButtonSizing } from '../engine/managers/sizingManager';\nimport { Scene, Actor } from 'excalibur';\n\nexport class Victory extends Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n    const sizing: IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.nextMenu, sizing.padding, sizing.maxScale);\n    const imageDims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1)\n    const offset = buttonDims.height/2 + Config.optionPadding;\n\n    const victoryActor = new Actor(\n      this.engine.drawWidth / 2,\n      this.engine.drawHeight / 2 - offset,\n      imageDims.width,\n      imageDims.height\n    );\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.scale = imageDims.scale;\n    this.add(victoryActor);\n\n    const nextButton = new ButtonBase(\n      Resources.nextMenu, \n      this.onNext,\n    );\n    nextButton.scale = buttonDims.scale;\n    nextButton.setHeight(buttonDims.height);\n    nextButton.setWidth(buttonDims.width);\n    nextButton.x = engine.drawWidth/2;\n    nextButton.y = engine.drawHeight - offset;\n    this.add(nextButton);\n  }\n\n  private onNext = () => {\n    this.engine.goToScene(getGameWindow());\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/managers/soundManager';\nimport { Engine } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, safePointerUp, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/managers/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport SizingManager, { IButtonSizing } from '../engine/managers/sizingManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n\n    const imageDims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    const sizing: IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.menuMenu, sizing.padding, sizing.maxScale);\n    const offset = buttonDims.height/2 + Config.optionPadding;\n\n\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2 - offset;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = imageDims.scale;\n\n    const menuButton = new ButtonBase(\n      Resources.menuMenu, \n      this.onMenu,\n    );\n    menuButton.scale = buttonDims.scale;\n    menuButton.setHeight(buttonDims.height);\n    menuButton.setWidth(buttonDims.width);\n    menuButton.x = engine.drawWidth/2;\n    menuButton.y = engine.drawHeight - offset;\n  \n    this.add(menuButton)\n  }\n\n  private onMenu = () => {\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  };\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import { Config } from '../../resources';\nimport { Loader } from 'excalibur';\nconst logoImg = require('../../images/title.png');\n\nexport class GameLoader extends Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import { Config } from '../../resources';\nimport { Color, Engine, Input, DisplayMode } from 'excalibur';\n\nexport default class Game extends Engine {\n\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: DisplayMode.FullScreen,\n      pointerScope: Input.PointerScope.Canvas, //make it so clicks don't go \"through\" the help modals\n      suppressPlayButton: true, //todo think about customizing the button\n      backgroundColor: Color.fromHex(Config.backgroundColor),\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Color, Engine, Vector } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class ScrollBar extends Actor {\n\n    private scrollBarTop: number;\n    private scrollBarBotton: number;\n    private isDragging = false;\n\n    constructor(engine: Engine) {\n        super();\n        this.scrollBarBotton = engine.drawHeight / 2;\n        this.scrollBarTop = engine.drawHeight / 2; // dont want to be able to go past the top of the screen\n        const sprite = Resources.uiScroll.asSprite();\n        const scrollItemSize = 50;\n        this.x = engine.drawWidth - 25;\n        this.y = engine.drawHeight / 2;\n        this.addDrawing(Resources.uiScroll.asSprite());\n        this.setWidth(scrollItemSize);\n        this.setHeight(scrollItemSize);\n        this.scale = new Vector(scrollItemSize/192, scrollItemSize/192); // 192 is the sprite original width/height\n\n        this.on('pointerdragstart', (pe: ex.Input.PointerEvent) => {\n            this.isDragging = true;\n        });\n\n        this.on('pointerdragend', (pe: ex.Input.PointerEvent) => {\n            this.isDragging = false;\n        });\n\n        this.on('pointerdragmove', (pe: ex.Input.PointerEvent) => {\n            if (this.isDragging) {\n                const worldY = pe.pointer.lastWorldPos.y;\n                if (worldY > this.scrollBarTop && worldY < this.scrollBarBotton) {\n                    this.y = pe.pointer.lastWorldPos.y;\n                }\n            }\n        });\n\n        this.on('pointerdragleave', (pe: ex.Input.PointerEvent) => {\n            if (this.isDragging) {\n                const worldY = pe.pointer.lastWorldPos.y;\n                if (worldY > this.scrollBarTop && worldY < this.scrollBarBotton) {\n                    this.y = pe.pointer.lastWorldPos.y;\n                }\n            }\n        });\n    }\n\n    public setScrollBottom(num: number) {\n        this.scrollBarBotton = num;\n        if(Math.floor(this.scrollBarBotton) <= Math.floor(this.scrollBarTop)) {\n            this.visible = false;\n        }\n    }\n}","import { Actor } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport SoundManager from '../engine/managers/soundManager';\nimport SizingManager, { IButtonSizing } from '../engine/managers/sizingManager';\nimport BaseScene from './BaseScene';\n\nexport class MainMenu extends BaseScene {\n  public onInitialize(engine: ex.Engine) {\n    const centerX = engine.drawWidth / 2;\n\n\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.title, 0.9, 0.8);\n    const title = new Actor(centerX, dims.height/2 + Config.gridPadding, dims.width, dims.height);\n    title.scale = dims.scale;\n    title.addDrawing(Resources.title);\n    this.add(title);\n\n    const {padding, maxScale} :IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.startMenu, padding, maxScale );\n\n    const start = this.createButton(buttonDims, centerX,  title.getBottom() + Config.optionPadding + buttonDims.height/2, Resources.startMenu, () => engine.goToScene(getGameWindow()));\n    const upgrades = this.createButton(buttonDims, centerX,  start.getBottom() + Config.gridPadding + buttonDims.height/2, Resources.upgradeMenu, () => engine.goToScene(Scenes.UPGRADES));\n    const options = this.createButton(buttonDims, centerX, upgrades.getBottom() + Config.gridPadding + buttonDims.height/2, Resources.optionMenu, () => engine.goToScene(Scenes.OPTIONS));\n    const help = this.createButton(buttonDims, centerX, options.getBottom() + Config.gridPadding+ buttonDims.height/2, Resources.helpMenu, () => engine.goToScene(Scenes.HELP));\n    \n    this.add(start);\n    this.add(options);\n    this.add(help);\n    this.add(upgrades)\n\n    this.setBackround(help.getBottom());\n    this.initScroll(help.getBottom());\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicEnd();\n  }\n\n  public onDeactivate() { }\n}","module.exports = __webpack_public_path__ + \"00f14d085530ea0ae58c17a32b3fe27f.wav\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"3329db2fa28ce34b8c3c074e4c25d295.png\";","module.exports = __webpack_public_path__ + \"c9c8f13302fa1b1eeb4d2e5345c5bbba.png\";","module.exports = __webpack_public_path__ + \"60352ab041f9e1e001176386f2dc105a.png\";","module.exports = __webpack_public_path__ + \"031849bdaba0fc1f7b8e931a8cd4b081.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"2f01ab32d051553af7e9edc5f70c3831.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"5bbe8e44117d6281e0990e5a0213c814.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"ff3ec13a365eb079e29c3a06b576bad7.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"d848ad40f4eee6a0b29882906e9b4c24.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"53b20a23b0fa9be3ec391f1dd49a6492.png\";","module.exports = __webpack_public_path__ + \"dd8089d1ad5e36afe0d889a9218a0559.png\";","module.exports = __webpack_public_path__ + \"d23070e309626133deb93bbabf5d25bb.png\";","module.exports = __webpack_public_path__ + \"135852ebc677f398779a9ac03e3c396b.png\";","module.exports = __webpack_public_path__ + \"64c5b08a042975010b476c3ca33efd4d.png\";","module.exports = __webpack_public_path__ + \"fb261f33ec74628ffab99997289e2f44.png\";","module.exports = __webpack_public_path__ + \"5d8c965fd0efaf1fa74941ad5cbb8d3c.png\";","module.exports = __webpack_public_path__ + \"8d6d5a0dc09cfb470714a9dbe963edd4.png\";","module.exports = __webpack_public_path__ + \"5370dd7a56a2e256105c0d5ae9a716f5.png\";","module.exports = __webpack_public_path__ + \"21c2960a6ef19bc7b845d01041d556b9.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"e1f03a0829378e36ba7058cc784f431c.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","var map = {\n\t\"./GameOver.png\": 202,\n\t\"./background.old.png\": 201,\n\t\"./background.png\": 200,\n\t\"./card.png\": 199,\n\t\"./coin.png\": 77,\n\t\"./helpTitle.png\": 198,\n\t\"./icon-192.png\": 197,\n\t\"./icon-512.png\": 196,\n\t\"./menu/buy.png\": 76,\n\t\"./menu/cards.png\": 195,\n\t\"./menu/confirm.png\": 194,\n\t\"./menu/credits.png\": 193,\n\t\"./menu/help.png\": 192,\n\t\"./menu/intro.png\": 191,\n\t\"./menu/menu.png\": 190,\n\t\"./menu/next.png\": 189,\n\t\"./menu/options.png\": 188,\n\t\"./menu/playing.png\": 187,\n\t\"./menu/start.png\": 186,\n\t\"./menu/upgrade.png\": 185,\n\t\"./numbers/0.png\": 184,\n\t\"./numbers/1.png\": 183,\n\t\"./numbers/2.png\": 182,\n\t\"./numbers/3.png\": 75,\n\t\"./numbers/4.png\": 181,\n\t\"./numbers/5.png\": 180,\n\t\"./numbers/6.png\": 179,\n\t\"./numbers/7.png\": 178,\n\t\"./numbers/8.png\": 177,\n\t\"./numbers/9.png\": 176,\n\t\"./optionTitle.png\": 175,\n\t\"./potion.png\": 74,\n\t\"./skull.png\": 73,\n\t\"./sword.png\": 72,\n\t\"./title.png\": 71,\n\t\"./ui/blank.png\": 174,\n\t\"./ui/coin.png\": 173,\n\t\"./ui/coinPile.png\": 172,\n\t\"./ui/heart.png\": 70,\n\t\"./ui/left.png\": 171,\n\t\"./ui/right.png\": 170,\n\t\"./ui/scroll.png\": 169,\n\t\"./ui/sword.png\": 69,\n\t\"./ui/x.png\": 68,\n\t\"./upgrades/difficulty.png\": 168,\n\t\"./upgrades/grid.png\": 167,\n\t\"./upgradesTitle.png\": 166,\n\t\"./victory.png\": 165\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\tvar module = __webpack_require__(id);\n\treturn module;\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 203;","import { Map, Stream, Comparator, Collectors } from 'java8script';\nimport {UpgradeDetails} from './upgradeWidget'\n\nexport interface UpgradeDescription {\n    title: string,\n    description: string,\n    prices: { level: number, price: number }[]\n}\n\nexport default class Upgrade {\n    private title: string;\n    private description: string;\n    private maxLevel: number;\n    private currentLevelToPriceMap: Map<number, number>;\n\n    private constructor(title: string, description: string, maxLevel: number, currentLevelToPriceMap: Map<number, number>) {\n        this.title = title;\n        this.description = description;\n        this.currentLevelToPriceMap = currentLevelToPriceMap;\n        this.maxLevel = maxLevel;\n    }\n\n    public static create(upDesc: UpgradeDescription) {\n        return new Upgrade(\n            upDesc.title,\n            upDesc.description,\n            Stream.of(upDesc.prices)\n                .map(p => p.level)\n                .max(Comparator.default())\n                .orElse(0),\n            Stream.of(upDesc.prices)\n            .collect(Collectors.toMap(\n                d => d.level,\n                d => d.price\n            ))\n        );\n    }\n\n    public getDetails(currentLevel: number): UpgradeDetails {\n        return {\n            title: this.title,\n            description: this.description,\n            maxLevel: this.maxLevel,\n            currentLevel: currentLevel,\n            price: this.currentLevelToPriceMap.get(currentLevel)\n        }\n    }\n}","import { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game/Game';\nimport { GameLoader } from './engine/game/GameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/managers/sizingManager';\nimport PlayerSettingsManager from './engine/progression/playerSettingsManager';\nimport { StoryGameWindow } from './scenes/gameWindows/storyGameWindow';\nimport { GridGameWindow } from './scenes/gameWindows/gridGameWindow';\nimport { UpgradeScene } from './scenes/upgrades';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\nconst options = new Options(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.STORY_GAME_WINDOW, new StoryGameWindow(game));\ngame.add(Scenes.GRID_GAME_WINDOW, new GridGameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, options);\ngame.add(Scenes.HELP, new Help(game));\ngame.add(Scenes.UPGRADES, new UpgradeScene(game));\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n  .forEach(k => loader.addResource(Resources[k]));\n\ngame.start(loader).then(() => {\n  PlayerSettingsManager.initialize()\n    .then(() => {\n      SizingManager.initialize(game);\n      game.goToScene(Scenes.MAIN_MENU);\n    });\n});\n"],"sourceRoot":""}