{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/progressionManager.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/images/title.png","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/helpMenu.png","webpack:///./src/images/optionsMenu.png","webpack:///./src/images/startMenu.png","webpack:///./src/images/card.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/scenes/gameWindow.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","backgroundTile","Resources","Texture","gameOver","0","2","3","4","5","6","7","8","9","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","uiItemSize","menuHeight","t","e","Scenes","GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","ProgressionManager","gridSize","difficulty","disableProgression","this","singleton","baseGridSize","baseDifficulty","getGridSize","getDifficulty","getSkullFactor","getBuffAndSkullByDifficulty","skullFactor","getBuffFactor","buffFactor","progress","nextDifficulty","nextGridSize","resetProgress","currentGridSize","createReturn","excalibur_1","resources_1","BackgroundManager","engine","tile","numberOfCols","Math","ceil","drawWidth","width","numberOfRows","drawHeight","height","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","SoundManager","soundManager","backgroundMusicStart","backgroundSound","loop","play","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","maxScale","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","texture","CardType","SpriteEffects_1","soundManager_1","progressionManager_1","COIN","SKELETON","POTION","ATTACK","Card","_super","screenCenter","col","onClick","faceColor","type","_this","onEnter","baseSprite","clearEffects","addEffect","Darken","onExit","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","sprite","addDrawing","setWidth","setHeight","on","fullOnClick","calcX","calcY","__extends","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","Sprite","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","Actor","ButtonBase","onDown","asSprite","onClickWrapper","setPrototypeOf","__proto__","Array","constructor","create","scenes_1","helpers_1","backgroundManager_1","Victory","onInitialize","victoryActor","goToScene","add","onActivate","onDeactivate","Scene","GameOver","gameOverActor","playerIdleAnimation","getAnimationForAll","stop","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","suppressPlayButton","start","loader","Engine","buttonBase_1","MainMenu","game","bgManager","addTileMap","sizeProperly","options","help","placeActors","actor","padding","resource","getHeight","card_1","Count","index","initialCount","setCount","leftSide","top","count","java8script_1","GridCoordinator","callbackProvider","skeletonCount","potionCount","swordCount","grid","blankGrid","getGridAsList","Stream","of","map","a","ofValues","flatMap","Function","identity","toArray","getCard","rowIndex","colIndex","filter","range","rowNum","blankGridRow","columnIndex","coinCardCallback","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","skeletonCardCallback","initializeBuffs","needMoreBuffs","generateBuffCard","random","attackCardCallback","potionCardCallback","floor","createGrid","coord","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getCurrent","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","GameCoordinatior","healthCoordinator","attackCoordinator","updateLabels","checkIfCompleteGame","initialize","coordinator","gridCoordinator","rowCounts","createRowCountCards","columnCounts","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","skeletonCountForCol","skeletonCountForRow","forEach","allMatch","coordinator_1","GameWindow","arguments","onBackButton","exitT","exit","coins","document","addEventListener","remove","removeEventListener","gameWindow_1","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","mainMenu","keys","k","addResource"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([237,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nimport { Color } from 'excalibur';\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/startMenu.png');\nconst optionMenu = require('./images/optionsMenu.png');\nconst helpMenu = require('./images/helpMenu.png');\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\n\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#bfbfbf\",\n    uiItemSize: 50,\n    menuHeight: 150, // 3 times item size\n};\n\nexport { Resources, Config, uiHeart}\n","export enum Scenes {\n    GAME_WINDOW = \"gameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n}","type Difficulty = 1 | 2 | 3 | 4 | 5;\ntype GridSize = 3 | 4 | 5 | 6 | 7 | 8 | 9;\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport default class ProgressionManager {\n\n    private static baseGridSize: number = 4;\n    private static baseDifficulty: number = 1;\n    private static singleton: ProgressionManager;\n\n    private gridSize: number;\n    private difficulty: number;\n    private disableProgression: boolean;\n\n    private constructor(gridSize, difficulty, disableProgression) {\n        this.gridSize = gridSize;\n        this.difficulty = difficulty;\n        this.disableProgression = disableProgression;\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager(\n                ProgressionManager.baseGridSize,\n                ProgressionManager.baseDifficulty,\n                false\n            );\n            return this.singleton;\n        }\n    }\n\n    public getGridSize(): number {\n        return this.gridSize;\n    }\n\n    public getDifficulty(): number {\n        return this.difficulty;\n    }\n\n    public getSkullFactor(): number {\n        return ProgressionManager.getBuffAndSkullByDifficulty(this.difficulty).skullFactor;\n    }\n\n    public getBuffFactor(): number {\n        return ProgressionManager.getBuffAndSkullByDifficulty(this.difficulty).buffFactor;\n    }\n\n    public progress(): void {\n        if (!this.disableProgression) {\n            if(this.difficulty === 5) {\n                this.difficulty = this.nextDifficulty(this.difficulty, this.gridSize);\n                this.gridSize = this.nextGridSize(this.gridSize);    \n            } else {\n                const next = this.nextDifficulty(this.difficulty, this.gridSize); \n                this.difficulty = this.nextDifficulty(this.difficulty, this.gridSize); \n            }   \n        }\n    }\n\n    public resetProgress(): void {\n        if (!this.disableProgression) {\n            this.difficulty = ProgressionManager.baseDifficulty;\n            this.gridSize = ProgressionManager.baseGridSize;\n        }\n    }\n\n    private nextGridSize(gridSize: number): number {\n       return gridSize === 9 \n       ?  9\n       : gridSize+1;\n    }\n\n    //Normal progression is 1,3,5 and then bump the grid size.\n    //if the player sets the initial difficulty to 2 or 4 then we should handle that\n    private nextDifficulty(difficulty: number, currentGridSize: number): number {\n        if(currentGridSize === 9 && difficulty === 5) {\n            // do nothing\n        } else {\n            if (difficulty === 2 || difficulty === 4) {\n                return difficulty + 1;\n            } else if (difficulty === 5) {\n                return 1;\n            } else {\n                return difficulty + 2;\n            }\n        }\n    }\n\n    private static getBuffAndSkullByDifficulty(difficulty: number): Factors {\n        //skull factor: easy 3 (30%), medium 2.5 (40%), hard 2 (50%)\n        //buff factor: easy 0, med 1, hard 2\n        const createReturn = (skullFactor, buffFactor) => {\n            return { skullFactor, buffFactor };\n        }\n        switch (difficulty) {\n            case 1:\n                return createReturn(3.0, 0.0);\n            case 2:\n                return createReturn(2.5, 0.0);\n            case 3:\n                return createReturn(2.5, 1.0);\n            case 4:\n                return createReturn(2.0, 1.0);\n            case 5:\n                return createReturn(2.0, 2.0);\n        }\n    }\n\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(engine: Engine) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(engine.drawWidth / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(engine.drawHeight / tile.height); \n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows*numberOfCols; row++) {\n\n                tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    public getTileMap(): TileMap {\n        return this.tileMap;\n    }\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public backgroundMusicStart(): void {\n        if (!this.backgroundSound) {\n            this.backgroundSound = Resources.backgroundMusic;\n            this.backgroundSound.loop = true;\n            this.backgroundSound.play(0.1);\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        this.currentSound = sound;\n        if (after) {\n            sound.play().then(after);\n        } else {\n            sound.play();\n        }\n    }\n\n}","import { Texture, Vector } from \"excalibur\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n    \n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (Config.menuHeight/2) //adjust for menu size\n            - ((ProgressionManager.get().getGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - Config.menuHeight;\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.flipped = true;\n            this.setDrawing(\"flip\");\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n}\n\n","import { Actor, Sprite, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>) {\n        super();\n        this.sprite = texture.asSprite();\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerup\", this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    private onClickWrapper(onClick: Supplier<void>): Supplier<void> {\n        return () => {\n            this.sprite.clearEffects();\n            onClick();\n        }\n    }\n\n    private onDown: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.sprite.clearEffects();\n        this.sprite.addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.sprite.clearEffects();\n    }\n\n}","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progressionManager';\nimport { calcDimensionsSingleObject, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const victoryActor = new ex.Actor();\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.x = this.engine.drawWidth / 2;\n    victoryActor.y = this.engine.drawHeight / 2;\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1.5)\n    victoryActor.setHeight(dims.height);\n    victoryActor.setWidth(dims.width);\n    victoryActor.scale = dims.scale;\n    victoryActor.on('pointerup', () => {\n      ProgressionManager.get().progress();\n      this.engine.goToScene(Scenes.GAME_WINDOW);\n    });\n    this.add(victoryActor);\n    this.add(new BackgroundManager(engine).getTileMap())\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine, Actor } from 'excalibur';\nimport ProgressionManager from '../engine/progressionManager';\nimport { calcDimensionsSingleObject } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    const dims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2;\n    gameOverActor.setHeight(dims.height);\n    gameOverActor.setWidth(dims.width);\n    gameOverActor.scale = dims.scale;\n    gameOverActor.on('pointerup', () => {\n      ProgressionManager.get().resetProgress();\n      this.engine.goToScene(Scenes.MAIN_MENU);\n    });\n    this.add(new BackgroundManager(engine).getTileMap())\n\n  }\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      suppressPlayButton: true //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Vector, Scene } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\n\nexport class MainMenu extends Scene {\n\n  private screenWidth: number;\n  private screenHeight: number;\n  private game: ex.Engine;\n\n  private title: Actor;\n  private start: Actor;\n  private help: Actor;\n  private options: Actor;\n\n  public onInitialize(engine: ex.Engine) {\n    this.screenWidth = engine.drawWidth;\n    this.screenHeight = engine.drawHeight;\n    this.game = engine;\n    const bgManager = new BackgroundManager(engine);\n    this.addTileMap(bgManager.getTileMap());\n\n    this.start = new ButtonBase(\n      Resources.startMenu, () => this.game.goToScene(Scenes.GAME_WINDOW),\n    );\n    this.sizeProperly(this.start, 0.4, 0.5, Resources.startMenu);\n    this.add(this.start)\n\n    this.options = new ButtonBase(\n      Resources.optionMenu,\n      () => { },\n    );\n    this.sizeProperly(this.options, 0.4, 0.5, Resources.optionMenu);\n    this.add(this.options);\n\n    this.help = new ButtonBase(\n      Resources.helpMenu,\n      () => { },\n    );\n    this.sizeProperly(this.help, 0.4, 0.5, Resources.helpMenu);\n    this.add(this.help);\n\n    this.title = this.sizeProperly(new Actor(), 0.9, 1, Resources.title);\n    this.add(this.title);\n\n    this.placeActors();\n  }\n\n  public onActivate() {\n  }\n\n  public sizeProperly(actor, padding, scale, resource): Actor {\n    const dims = calcDimensionsSingleObjectTexture(this.screenHeight, this.screenWidth, resource, padding, scale);\n    actor.addDrawing(resource);\n    actor.scale = dims.scale;\n    actor.setHeight(dims.height);\n    actor.setWidth(dims.width);\n    return actor;\n  }\n\n  public placeActors() {\n    this.start.x = this.screenWidth / 2;\n    this.start.y = this.screenHeight / 2 - this.start.getHeight() - Config.gridPadding;\n\n    this.options.x = this.screenWidth / 2;\n    this.options.y = this.screenHeight / 2;\n\n    this.help.x = this.screenWidth / 2;\n    this.help.y = this.screenHeight / 2 + this.help.getHeight() + Config.gridPadding;\n\n    this.title.x = this.screenWidth / 2;\n    this.title.y = this.title.getHeight()/2 + Config.gridPadding;\n  }\n\n  public onDeactivate() { }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progressionManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n\n\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + Config.menuHeight / 2\n            - ((ProgressionManager.get().getGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progressionManager\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getCard(rowIndex: number, colIndex: number): Card {\n        return this.grid[rowIndex][colIndex];\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getRow() == rowIndex)\n        .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n        .map(a => Stream.ofValues(...a))\n        .flatMap(l => l)\n        .filter(card => card.getCol() == colIndex)\n        .toArray(); \n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }  \n        }\n    }\n\n    private initializeBuffs(): void {\n        while(this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if(this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private generateBuffCard(row: number, col:number): Card {\n        return Math.random() < 0.5\n        ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n        : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)  \n    }\n\n    private insertCard(row: number, col: number, card: Card ): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row:number, col:number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    } \n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth/2, engine.drawHeight/2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        return coord;\n\n    }\n}","module.exports = __webpack_public_path__ + \"e1f03a0829378e36ba7058cc784f431c.png\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"6f20cd91097c8be0d36eaad2bf6244ec.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport { Config } from \"../../resources\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(Config.uiItemSize/texture.width, Config.uiItemSize/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Label, Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport { Config } from \"../resources\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * Config.uiItemSize), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * Config.uiItemSize), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream, Function, Optional } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Label } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport { MainMenu } from \"../scenes/mainMenu\";\nimport ProgressionManager from \"../engine/progressionManager\";\n\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinatior implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine, healthCoordinator: NumberCoordinator, attackCoordinator: NumberCoordinator) {\n        this.healthCoordinator = healthCoordinator;\n        this.attackCoordinator = attackCoordinator;\n        this.engine = engine;\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinatior {\n        \n        const coordinator: GameCoordinatior = new GameCoordinatior(\n            engine,\n            NumberCoordinator.create(Config.uiItemSize/2, Config.uiItemSize/2, Config.maxHealth, () => { engine.goToScene(Scenes.GAME_OVER) }, Resources.uiHeart, Config.maxHealth),\n            NumberCoordinator.create(Config.uiItemSize/2, Config.uiItemSize * 1.5, Config.maxAttack, () => { }, Resources.uiSword)           \n        );\n        coordinator.gridCoordinator = GridCoordinator.createGrid(coordinator, ProgressionManager.get().getGridSize(), engine);\n        coordinator.rowCounts = coordinator.createRowCountCards();\n        coordinator.columnCounts = coordinator.createColCountCards();\n\n        return coordinator;\n    }\n\n    public getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    public getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    public getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n    \n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth/2, this.engine.drawHeight/2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    public getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    private updateLabels() {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n       const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n        }\n    } \n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.checkIfCompleteGame();\n    }\n}","import * as ex from 'excalibur';\nimport { GameCoordinatior } from '../coordinator/coordinator';\nimport { Stream } from 'java8script';\nimport SoundManager from '../engine/soundManager';\nimport BackgroundManager from '../engine/backgroundManager';\nimport { Actor, Engine, Color, Texture, Vector } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { Scenes } from './scenes';\n\nexport class GameWindow extends ex.Scene {\n\n  private coordinator;\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(new BackgroundManager(engine).getTileMap())\n\n    /*\n    const bar = new Actor();\n    bar.y = Config.menuHeight;\n    bar.x = this.engine.drawWidth/2;\n    bar.setHeight(1);\n    bar.setWidth(this.engine.drawWidth)\n    bar.color = Color.Red;\n    bar\n    this.add(bar);//todo remove\n    */\n\n\n    const exitT: Texture = Resources.uiX;\n    const exit = new ButtonBase(\n      exitT,\n      () => engine.goToScene(Scenes.MAIN_MENU)\n    );\n\n    exit.addDrawing(exitT);\n    exit.scale = new Vector(Config.uiItemSize / exitT.width, Config.uiItemSize / exitT.height);\n    exit.setHeight(Config.uiItemSize);\n    exit.setWidth(Config.uiItemSize);\n    exit.x = engine.drawWidth - Config.uiItemSize / 2 - Config.gridPadding;\n    exit.y = Config.uiItemSize / 2 + Config.gridPadding;\n    this.add(exit);\n\n    //todo move this to be actually score keeper\n    const coins: Actor = new Actor();\n    coins.addDrawing(Resources.uiCoins);\n    coins.scale = new Vector(Config.uiItemSize / Resources.uiCoins.width, Config.uiItemSize / Resources.uiCoins.height);\n    coins.x = Config.uiItemSize / 2;\n    coins.y = Config.uiItemSize * 2.5;\n    this.add(coins);\n\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    const coordinator: GameCoordinatior = GameCoordinatior.initialize(this.engine);\n    this.coordinator = coordinator;\n\n    coordinator.getGridAsList()\n      .forEach(c => this.add(c));\n\n    coordinator.getColCountCards()\n      .forEach(c => this.add(c));\n\n    coordinator.getRowCountCards()\n      .forEach(c => this.add(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.add(c));\n\n    //cordova specific\n    document.addEventListener(\"backbutton\", this.onBackButton);\n  }\n\n  private onBackButton = () => this.engine.goToScene(Scenes.MAIN_MENU);\n\n  public onDeactivate() {\n    this.coordinator.getGridAsList()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getColCountCards()\n      .forEach(c => this.remove(c));\n\n    this.coordinator.getRowCountCards()\n      .forEach(c => this.remove(c));\n\n    Stream.ofValues(this.coordinator.getStatTrackers())\n      .map(l => Stream.ofValues(...l))\n      .flatMap(l => l)\n      .forEach(c => this.remove(c));\n      \n    document.removeEventListener(\"backbutton\", this.onBackButton);\n  }\n} \n","import * as ex from 'excalibur';\nimport { GameWindow } from './scenes/gameWindow';\nimport { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.GAME_WINDOW, new GameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n      .forEach(k => loader.addResource(Resources[k]));\n    \ngame.start(loader).then(() => {\n  game.goToScene(Scenes.MAIN_MENU);\n});\n"],"sourceRoot":""}