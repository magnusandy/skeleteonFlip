{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/engine/sizingManager.ts","webpack:///./src/engine/progression/progressionManager.ts","webpack:///./src/scenes/scenes.ts","webpack:///./src/engine/soundManager.ts","webpack:///./src/actors/bars/buttonBase.ts","webpack:///./src/engine/helpers.ts","webpack:///./src/engine/progression/playerSettingsManager.ts","webpack:///./src/engine/backgroundManager.ts","webpack:///./src/actors/card/card.ts","webpack:///./src/actors/bars/exitButton.ts","webpack:///./src/engine/fontManager.ts","webpack:///./src/scenes/BaseScene.ts","webpack:///./src/scenes/gameWindows/gameWindowBase.ts","webpack:///./src/engine/progression/gridState.ts","webpack:///./src/engine/progression/difficulty.ts","webpack:///./src/images/ui/x.png","webpack:///./src/images/ui/heart.png","webpack:///./src/images/ui/sword.png","webpack:///./src/images/numbers/3.png","webpack:///./src/images/title.png","webpack:///./src/images/coin.png","webpack:///./src/images/potion.png","webpack:///./src/images/skull.png","webpack:///./src/images/sword.png","webpack:///./src/scenes/gameWindows/gridGameWindow.ts","webpack:///./src/actors/card/count.ts","webpack:///./src/coordinator/gridCoordinator.ts","webpack:///./src/actors/bars/statTracker.ts","webpack:///./src/coordinator/numberCoordinator.ts","webpack:///./src/coordinator/coordinator.ts","webpack:///./src/actors/bars/level.ts","webpack:///./src/scenes/gameWindows/storyGameWindow.ts","webpack:///./src/modal/modal.tsx","webpack:///./src/scenes/help.ts","webpack:///./src/actors/bars/radioButton.ts","webpack:///./src/actors/bars/labeledRadio.ts","webpack:///./src/actors/bars/numberSelector.ts","webpack:///./src/scenes/options.ts","webpack:///./src/scenes/victory.ts","webpack:///./src/scenes/gameOver.ts","webpack:///./src/engine/gameLoader.ts","webpack:///./src/engine/game.ts","webpack:///./src/actors/bars/scrollBar.ts","webpack:///./src/scenes/mainMenu.ts","webpack:///./src/images/background.png","webpack:///./src/sounds/button.wav","webpack:///./src/sounds/victory.mp3","webpack:///./src/sounds/background.wav","webpack:///./src/sounds/coin.wav","webpack:///./src/sounds/laugh.ogg","webpack:///./src/sounds/sword.wav","webpack:///./src/sounds/bone.wav","webpack:///./src/sounds/potion.wav","webpack:///./src/sounds/card.wav","webpack:///./src/images/victory.png","webpack:///./src/fonts/myMono.png","webpack:///./src/images/helpTitle.png","webpack:///./src/images/optionTitle.png","webpack:///./src/images/ui/scroll.png","webpack:///./src/images/ui/blank.png","webpack:///./src/images/ui/right.png","webpack:///./src/images/ui/left.png","webpack:///./src/images/ui/coinPile.png","webpack:///./src/images/numbers/9.png","webpack:///./src/images/numbers/8.png","webpack:///./src/images/numbers/7.png","webpack:///./src/images/numbers/6.png","webpack:///./src/images/numbers/5.png","webpack:///./src/images/numbers/4.png","webpack:///./src/images/numbers/2.png","webpack:///./src/images/numbers/1.png","webpack:///./src/images/numbers/0.png","webpack:///./src/images/gameOver.png","webpack:///./src/images/menu/menu.png","webpack:///./src/images/menu/next.png","webpack:///./src/images/menu/confirm.png","webpack:///./src/images/menu/playing.png","webpack:///./src/images/menu/credits.png","webpack:///./src/images/menu/intro.png","webpack:///./src/images/menu/cards.png","webpack:///./src/images/menu/help.png","webpack:///./src/images/menu/options.png","webpack:///./src/images/menu/start.png","webpack:///./src/images/card.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","sword","skull","potion","coin","card","startMenu","optionMenu","helpMenu","cardsMenu","introMenu","creditsMenu","playingMenu","confirmMenu","nextMenu","menuMenu","title","gameOverImg","zero","one","two","three","four","five","six","seven","eight","nine","uiSword","uiHeart","uiCoins","uiLeft","uiRight","uiX","uiBlank","uiScroll","optionTitle","helpTitle","fontMono","victory","cardSound","potionSound","boneSound","swordSound","laughSound","coinSound","backgroundMusic","victorySound","buttonSound","backgroundTile","Resources","Texture","gameOver","cardMenu","0","2","3","4","5","6","7","8","9","myMono","Sound","Config","maxHealth","maxAttack","gridPadding","backgroundColor","exitButtonSize","uiBigSize","optionPadding","t","e","SizingManager","engine","this","initialize","singleton","console","log","isMobile","drawWidth","getUIItemSize","getUIButtonSizing","padding","maxScale","getMenuHeight","difficulty_1","playerSettingsManager_1","ProgressionManager","getGameGridSize","ps","isProgressionDisabled","getChosenGridSize","getCurrentLevel","getOptionGridSize","getDifficulty","getChosenDifficulty","getSkullFactor","getSkeletonFactor","getBuffFactor","progress","currentLevel","currentStage","getCurrentStage","stagesPerNormalLevel","maxLevel","setCurrentStage","setCurrentLevel","setGridSize","newSize","setChosenGridSize","setDifficulty","difficulty","setChosenDifficulty","Difficulty","getByDifficultyLevel","setProgressionDisabled","isProgressDisabled","resetProgress","getLevelString","Scenes","progressionManager_1","STORY_GAME_WINDOW","GRID_GAME_WINDOW","MAIN_MENU","GAME_OVER","VICTORY","OPTIONS","HELP","getGameWindow","resources_1","SoundManager","soundManager","disableSound","backgroundSound","stop","backgroundMusicStart","isSoundOff","volume","loop","play","backgroundMusicEnd","playSoundInterrupt","sound","after","currentSound","isPlaying","pause","playSoundWithAfter","then","__extends","setPrototypeOf","__proto__","Array","constructor","create","excalibur_1","SpriteEffects_1","soundManager_1","helpers_1","ButtonBase","_super","texture","onClick","disabled","_this","onDown","sprite","clearEffects","addEffect","Darken","onEnter","onExit","Sprite","width","height","addDrawing","on","EventTypes","PointerUp","onClickWrapper","getSprite","safePointerUp","setDisabled","Actor","calcDimensionsSingleObject","screenHeight","screenWidth","textHeight","textWidth","paddingPercent","paddingToUse","maxHeight","maxWidth","scaleByWidth","scaleToUse","scaleByHeight","scale","Vector","calcDimensionsSingleObjectTexture","event","ev","type","java8script_1","localForage","gridState_1","PlayerSettingsManager","toggleSound","progressionDisabled","chosenDiff","chosenGridSize","maxDiff","storyGrid","practiceGrid","soundOff","chosenDifficulty","maxDifficulty","config","version","size","storeName","description","getItem","STORE_KEY","v","DEFAULT","saveData","deserializeV1","saveGridState","gridState","Optional","ofNullable","saveToStorage","getGridState","newCurrent","newStage","gridSize","difficutly","setIsSoundOff","isProgDisabled","serializeV1","getDifficultyLevel","map","g","toSaveState","orElse","save","GridState","fromSaveState","setItem","VERY_EASY","NORMAL","empty","BackgroundManager","tile","numberOfCols","Math","ceil","numberOfRows","tileMap","TileMap","registerSpriteSheet","SpriteSheet","tileSprite","TileSprite","row","getCellByIndex","pushSprite","getTileMap","getDefaultTileMap","drawHeight","getCustomTileMap","CardType","sizingManager_1","COIN","SKELETON","POTION","ATTACK","Card","screenCenter","col","faceColor","baseSprite","playSound","cardType","passedInOnClick","flipped","dims","calcCardDimensions","y","x","setWidth","setHeight","fullOnClick","calcX","calcY","cardWidth","center","cardHeight","_a","usableHeight","calcMaxCardHeight","calcMaxCardWidth","silentSetFlipped","setDrawing","getRow","getCol","isFlipped","skeleton","Color","White","Red","attack","Gray","Yellow","callbackProvider","skeletonCardCallback","attackCardCallback","coinCardCallback","potionCardCallback","buttonBase_1","ExitButton","FontManager","generalMono","SpriteFont","getMono","backgroundManager_1","scrollBar_1","BaseScene","scrollBar","add","setBackround","bottomOfBottomElement","addTileMap","initScroll","setScrollBottom","camera","strategy","lockToActorAxis","Axis","Y","createButton","button","Scene","coordinator_1","scenes_1","exitButton_1","GameWindowBase","onInitialize","goToScene","coordinator","GameCoordinator","onActivate","getAllActors","forEach","onDeactivate","remove","grid","getGridSize","Stream","ofValues","cardState","toArray","CardState","getType","difficultyLevel","buff","text","buffFactor","skeletonFactor","difficultyName","level","of","EASY","HARD","VERY_HARD","filter","diff","findFirst","orElseThrow","Error","gameWindowBase_1","GridGameWindow","currentOptionGridSize","resetGame","card_1","Count","index","initialCount","setCount","leftSide","top","asSprite","clone","count","GridCoordinator","skeletonCount","potionCount","swordCount","blankGrid","saveCurrentGrid","cardStates","state","getGridAsList","a","flatMap","Function","identity","rowIndex","colIndex","range","rowNum","blankGridRow","columnIndex","initializeSkeletons","needMoreSkeletons","randomCoord","isCoin","insertCard","initializeBuffs","needMoreBuffs","generateBuffCard","initializeFromState","createdCard","random","floor","createGrid","loadSavedGrid","orElseGet","createNewGrid","coord","StatTracker","enabled","setEnabled","opacity","DISABLED_OPACITY","isEnabled","statTracker_1","NumberCoordinator","max","current","onZeroCallback","statActors","onZero","defaultedCurrent","idx","subtract","getCurrent","getStatActors","numberCoordinator_1","gridCoordinator_1","count_1","updateLabels","rowCounts","skeletonCountForRow","columnCounts","skeletonCountForCol","attackCoordinator","healthCoordinator","gridCoordinator","checkIfCompleteGame","shouldCreateFresh","mm","createRowCountCards","createColCountCards","getStatTrackers","concat","getRowCountCards","getColCountCards","allFlipped","allMatch","fontManager_1","LevelDisplay","startingLevel","createLabelText","fontSize","baseAlign","BaseAlign","Middle","textAlign","TextAlign","Center","PREFIX","updateLevel","newLevel","Label","level_1","StoryGameWindow","levelDisplay","React","ReactModal","react_dom_1","xButton","skullImage","swordImage","potionImage","coinImage","heartUIImg","swordUIImage","threeImage","styles","margin","flex","h1","holder","imgHolder","cardImg","ModalRenderer","isOpen","setOpenAndRerender","innerStuff","render","open","closeFunc","props","createElement","E","__assign","document","getElementById","introModal","style","howToPlayModal","src","alt","cardModal","textModal","content","borderRadius","borderWidth","borderColor","appElement","float","position","right","onPointerUp","borderStyle","minHeight","display","Component","modal_1","Help","titleDims","modalRenderer","centerx","sizing","intro","getBottom","playing","cards","credits","RadioButton","defaultValue","onToggle","currentSprite","toggleButton","checked","setCheckedDrawing","ifPresent","func","checkedSprite","uncheckedSprite","setOnToggle","isChecked","setChecked","radioButton_1","LabeledRadio","label","defaultVal","textSize","buttonSize","labelWidth","getTextWidth","ctx","radio","addOnToggle","getDrawables","NumberSelector","min","updateDisabled","isDisabled","leftButtonSprite","rightButtonSprite","disColor","topLabel","color","numberLabel","Colorize","leftButton","rightButton","Black","labelText","addBy","nextCurrent","setCurrent","numberSelector_1","labeledRadio_1","Options","arguments","onConfirm","progressionToggle","itemSize","addTitle","addSoundToggle","addDifficultySize","addProgressionToggle","callbackForEnabling","addGridSize","createbuttonDims","createButtonY","Victory","onNext","buttonDims","imageDims","offset","victoryActor","nextButton","GameOver","onMenu","gameOverActor","playerIdleAnimation","getAnimationForAll","menuButton","logoImg","GameLoader","toString","logo","logoHeight","logoWidth","Loader","Game","suppressConsoleBootMessage","displayMode","DisplayMode","FullScreen","pointerScope","Input","PointerScope","Canvas","suppressPlayButton","start","loader","Engine","ScrollBar","isDragging","scrollBarBotton","scrollBarTop","pe","worldY","pointer","lastWorldPos","num","visible","MainMenu","centerX","options","help","mainMenu_1","game_1","gameLoader_1","gameOver_1","victory_1","options_1","help_1","storyGameWindow_1","gridGameWindow_1","game","mainMenu","keys","k","addResource"],"mappings":"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EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GCAAd,EAAAD,QAAAJ,EAAAwB,EAAA,iDAAAgF,EAAAC,EAAAtF,GAAA,aAAAnC,OAAA6B,eAAA4F,EAAA,cAAAvF,OAAA,ICAA,IAAAkJ,EAAApK,EAAA,GACA2X,EAAA3X,EAAA,IACAmrB,EAAAnrB,EAAA,KACAorB,EAAAprB,EAAA,KACAqrB,EAAArrB,EAAA,KACAsrB,EAAAtrB,EAAA,KACAurB,EAAAvrB,EAAA,KACAwrB,EAAAxrB,EAAA,KACAyrB,EAAAzrB,EAAA,KACAmT,EAAAnT,EAAA,GACAyH,EAAAzH,EAAA,IACA0rB,EAAA1rB,EAAA,KACA2rB,EAAA3rB,EAAA,KAEM4rB,EAAO,IAAIR,EAAA/pB,QACXwqB,EAAW,IAAIV,EAAAJ,SAASa,GACxBX,EAAU,IAAIO,EAAAjE,QAAQqE,GAC5BA,EAAKhV,IAAIe,EAAAjO,OAAOI,UAAW+hB,GAC3BD,EAAKhV,IAAIe,EAAAjO,OAAOK,UAAW,IAAIuhB,EAAA3C,SAASiD,IACxCA,EAAKhV,IAAIe,EAAAjO,OAAOE,kBAAmB,IAAI8hB,EAAAjL,gBAAgBmL,IACvDA,EAAKhV,IAAIe,EAAAjO,OAAOG,iBAAkB,IAAI8hB,EAAA3R,eAAe4R,IACrDA,EAAKhV,IAAIe,EAAAjO,OAAOM,QAAS,IAAIuhB,EAAAnD,QAAQwD,IACrCA,EAAKhV,IAAIe,EAAAjO,OAAOO,QAASghB,GACzBW,EAAKhV,IAAIe,EAAAjO,OAAOQ,KAAM,IAAIuhB,EAAA1H,KAAK6H,IAE/B,IAAIzB,EAAS,IAAIkB,EAAAnC,WACjBlqB,OAAO8sB,KAAK1hB,EAAAnF,WACTmT,QAAQ,SAAA2T,GAAK,OAAA5B,EAAO6B,YAAY5hB,EAAAnF,UAAU8mB,MAE7CH,EAAK1B,MAAMC,GAAQ5e,KAAK,WACtB9D,EAAApG,QAAsBwF,aACnB0E,KAAK,WACJ4H,EAAA9R,QAAcwF,WAAW+kB,GACzBA,EAAK7T,UAAUJ,EAAAjO,OAAOI","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([289,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nimport { AudioContextFactory } from 'excalibur';\n\nconst sword = require('./images/sword.png');\nconst skull = require('./images/skull.png');\nconst potion = require('./images/potion.png');\nconst coin = require('./images/coin.png');\nconst card = require('./images/card.png');\nconst startMenu = require('./images/menu/start.png');\nconst optionMenu = require('./images/menu/options.png');\nconst helpMenu = require('./images/menu/help.png');\nconst cardsMenu = require('./images/menu/cards.png');\nconst introMenu = require('./images/menu/intro.png');\nconst creditsMenu = require('./images/menu/credits.png');\nconst playingMenu = require('./images/menu/playing.png');\nconst confirmMenu = require('./images/menu/confirm.png');\nconst nextMenu = require('./images/menu/next.png');\nconst menuMenu = require('./images/menu/menu.png');\n\nconst title = require('./images/title.png');\nconst gameOverImg = require('./images/gameOver.png');\nconst zero = require('./images/numbers/0.png');\nconst one = require('./images/numbers/1.png');\nconst two = require('./images/numbers/2.png');\nconst three = require('./images/numbers/3.png');\nconst four = require('./images/numbers/4.png');\nconst five = require('./images/numbers/5.png');\nconst six = require('./images/numbers/6.png');\nconst seven = require('./images/numbers/7.png');\nconst eight = require('./images/numbers/8.png');\nconst nine = require('./images/numbers/9.png');\n\nconst uiSword = require('./images/ui/sword.png');\nconst uiHeart = require('./images/ui/heart.png');\nconst uiCoins = require('./images/ui/coinPile.png');\nconst uiLeft = require('./images/ui/left.png');\nconst uiRight = require('./images/ui/right.png');\nconst uiX = require('./images/ui/x.png');\nconst uiBlank = require('./images/ui/blank.png');\nconst uiScroll = require('./images/ui/scroll.png');\n\nconst optionTitle = require('./images/optionTitle.png');\nconst helpTitle = require('./images/helpTitle.png');\n\nconst fontMono = require('./fonts/myMono.png');\n\nconst victory = require('./images/victory.png');\nconst cardSound = require('./sounds/card.wav');\nconst potionSound = require('./sounds/potion.wav');\nconst boneSound = require('./sounds/bone.wav');\nconst swordSound = require('./sounds/sword.wav');\nconst laughSound = require('./sounds/laugh.ogg');\nconst coinSound = require('./sounds/coin.wav');\nconst backgroundMusic = require('./sounds/background.wav');\nconst victorySound = require('./sounds/victory.mp3');\nconst buttonSound = require('./sounds/button.wav');\n\nconst backgroundTile = require('./images/background.png');\n\nconst Resources = {\n    victory: new ex.Texture(victory),\n    gameOver: new ex.Texture(gameOverImg),\n    title: new ex.Texture(title),\n    sword: new ex.Texture(sword),\n    skull: new ex.Texture(skull),\n    potion: new ex.Texture(potion),\n    coin: new ex.Texture(coin),\n    card: new ex.Texture(card),\n\n    startMenu: new ex.Texture(startMenu),\n    optionMenu: new ex.Texture(optionMenu), \n    helpMenu: new ex.Texture(helpMenu),\n    cardMenu: new ex.Texture(cardsMenu),\n    introMenu: new ex.Texture(introMenu),\n    creditsMenu: new ex.Texture(creditsMenu),\n    playingMenu: new ex.Texture(playingMenu),\n    confirmMenu: new ex.Texture(confirmMenu),\n    nextMenu: new ex.Texture(nextMenu),\n    menuMenu: new ex.Texture(menuMenu),\n\n    optionTitle: new ex.Texture(optionTitle),\n    helpTitle: new ex.Texture(helpTitle),\n    backgroundTile: new ex.Texture(backgroundTile),\n\n    0: new ex.Texture(zero), \n    1: new ex.Texture(one), \n    2: new ex.Texture(two), \n    3: new ex.Texture(three), \n    4: new ex.Texture(four), \n    5: new ex.Texture(five), \n    6: new ex.Texture(six), \n    7: new ex.Texture(seven), \n    8: new ex.Texture(eight), \n    9: new ex.Texture(nine), \n\n    uiSword: new ex.Texture(uiSword),\n    uiHeart: new ex.Texture(uiHeart),\n    uiLeft: new ex.Texture(uiLeft),\n    uiRight: new ex.Texture(uiRight),\n    uiX: new ex.Texture(uiX),\n    uiBlank: new ex.Texture(uiBlank),\n    uiCoins: new ex.Texture(uiCoins),\n    uiScroll: new ex.Texture(uiScroll),\n\n    myMono: new ex.Texture(fontMono),\n\n    cardSound: new ex.Sound(cardSound),\n    boneSound: new ex.Sound(boneSound),\n    coinSound: new ex.Sound(coinSound),\n    laughSound: new ex.Sound(laughSound),\n    potionSound: new ex.Sound(potionSound),\n    swordSound: new ex.Sound(swordSound),\n    victorySound: new ex.Sound(victorySound),\n    buttonSound: new ex.Sound(buttonSound),\n    backgroundMusic: new ex.Sound(backgroundMusic),\n}\n\nconst Config = {\n    maxHealth: 3,\n    maxAttack: 2,\n    gridPadding: 4,\n    backgroundColor: \"#dddddd\",\n    exitButtonSize: 50,\n    uiBigSize: 50,\n    optionPadding: 30,\n};\n\nexport { Resources, Config, uiHeart}\n","import { Engine } from \"excalibur\";\n\nexport interface IButtonSizing {\n    padding: number, \n    maxScale: number\n}\n/***\n * Deal with font and item scaling for mobile devices\n */\nexport default class SizingManager {\n    private engine: Engine;\n    private static singleton: SizingManager;\n\n    private constructor(engine: Engine) {\n        this.engine = engine;\n    }\n\n    public static initialize(engine: Engine) {\n        if(!this.singleton) {\n            this.singleton = new SizingManager(engine);\n        } else {\n            console.log(\"ERROR: Mobile Manager already initialized\");\n        }\n    }\n\n    public static get(): SizingManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            throw \"Mobile Manager Not defined yet\";\n        }\n    }\n\n    public isMobile(): boolean {\n        return this.engine.drawWidth < 1200; \n    }\n    public getUIItemSize() {\n        return this.isMobile() ? 30 : 50;\n    }\n\n    public getUIButtonSizing(): IButtonSizing {\n        return this.isMobile() \n        ? {padding: 0.4, maxScale: 0.3}\n        : {padding: 0.4, maxScale: 0.5}\n    }\n\n    public getMenuHeight(): number {\n        return this.getUIItemSize() * 3;\n    }\n\n}","import { Difficulty } from \"./difficulty\";\nimport PlayerSettingsManager from \"./playerSettingsManager\";\n\nexport default class ProgressionManager {\n    private static stagesPerNormalLevel = 3;\n\n    private static singleton: ProgressionManager;\n    \n    private constructor() {\n    }\n\n    public static get(): ProgressionManager {\n        if (this.singleton) {\n            return this.singleton;\n        } else {\n            this.singleton = new ProgressionManager();\n            return this.singleton;\n        }\n    }\n\n    public getGameGridSize(): number {\n        const ps = PlayerSettingsManager.get();\n        if(ps.isProgressionDisabled()) {\n            return ps.getChosenGridSize();\n        } else {\n            //add 2 to handle the offset from the base grid size i.e. level 1 is grid size 3\n            return ps.getCurrentLevel() + 2;\n        }\n    }\n\n    public getOptionGridSize(): number {\n        return PlayerSettingsManager.get().getChosenGridSize();\n    }\n\n    public getDifficulty(): Difficulty {\n        return PlayerSettingsManager.get().getChosenDifficulty();\n    }\n\n    public getSkullFactor(): number {\n        return this.getDifficulty().getSkeletonFactor();\n    }\n\n    public getBuffFactor(): number {\n        return this.getDifficulty().getBuffFactor();\n    }\n\n    public isProgressionDisabled() {\n        return PlayerSettingsManager.get().isProgressionDisabled();\n    }\n\n    public progress(): void {\n        if(!PlayerSettingsManager.get().isProgressionDisabled()) {\n            const currentLevel = PlayerSettingsManager.get().getCurrentLevel();\n            const currentStage = PlayerSettingsManager.get().getCurrentStage();\n    \n            if(currentStage >= ProgressionManager.stagesPerNormalLevel) {\n                //on the last stage of the level, need to find out if we can move on or just move up stages\n                if(currentLevel === PlayerSettingsManager.get().maxLevel) {\n                    // on the max upgraded level just increase stage\n                    PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n                } else {\n                    PlayerSettingsManager.get().setCurrentStage(1);\n                    PlayerSettingsManager.get().setCurrentLevel(currentLevel + 1);\n                }\n            } else {\n                //move on to the next stage, no extra logic\n                PlayerSettingsManager.get().setCurrentStage(currentStage + 1);\n            }  \n        }\n    }\n\n    public setGridSize(newSize: number) {\n        PlayerSettingsManager.get().setChosenGridSize(newSize);\n    }\n\n    public setDifficulty(difficulty: number) {\n        PlayerSettingsManager.get().setChosenDifficulty(Difficulty.getByDifficultyLevel(difficulty));\n    }\n\n    public setProgressionDisabled(isProgressDisabled: boolean) {\n        return PlayerSettingsManager.get().setProgressionDisabled(isProgressDisabled);\n    }\n\n    public resetProgress(): void {\n        const ps = PlayerSettingsManager.get();\n        if (!ps.isProgressionDisabled()) {\n            ps.setCurrentLevel(1);\n            ps.setCurrentStage(1);\n        }\n    }\n\n    public getLevelString(): string {\n        if (PlayerSettingsManager.get().getCurrentStage() > ProgressionManager.stagesPerNormalLevel) {\n            return \"MAXED\";\n        } else {\n            return `${PlayerSettingsManager.get().getCurrentLevel()}.${PlayerSettingsManager.get().getCurrentStage()}`;\n        }\n    }\n}","import ProgressionManager from \"../engine/progression/progressionManager\";\n\nexport enum Scenes {\n    STORY_GAME_WINDOW = \"storyGameWindow\",\n    GRID_GAME_WINDOW = \"gridGameWindow\",\n    MAIN_MENU = \"mainMenu\",\n    GAME_OVER = \"gameOver\",\n    VICTORY = \"victory\",\n    OPTIONS = \"options\",\n    HELP = \"help\",\n}\n\nexport function getGameWindow(): Scenes {\n    return ProgressionManager.get().isProgressionDisabled()\n        ? Scenes.GRID_GAME_WINDOW \n        : Scenes.STORY_GAME_WINDOW;\n}","import { Sound } from \"excalibur\";\nimport { Resources } from \"../resources\";\nimport PlayerSettingsManager from \"./progression/playerSettingsManager\";\n\nexport default class SoundManager {\n    private static soundManager: SoundManager;\n    private currentSound: Sound;\n    private backgroundSound: Sound;\n\n    /**\n     * returns a singleton instance of the sound manager\n     */\n    public static get(): SoundManager {\n        if (SoundManager.soundManager) {\n            return SoundManager.soundManager;\n        } else {\n            SoundManager.soundManager = new SoundManager();\n            return SoundManager.soundManager;\n        }\n    }\n\n    public disableSound() {\n        if (this.backgroundSound) {\n            this.backgroundSound.stop();\n            this.backgroundSound = null;\n        }\n    }\n\n    public backgroundMusicStart(): void {\n        if (!PlayerSettingsManager.get().isSoundOff()) {\n            if (!this.backgroundSound) {\n                this.backgroundSound = Resources.backgroundMusic;\n                this.backgroundSound.volume = 0.1;\n                this.backgroundSound.loop = true;\n                this.backgroundSound.play();\n            }\n        }\n    }\n\n    public backgroundMusicEnd(): void {\n        if(PlayerSettingsManager.get().isSoundOff()) {\n            if (this.backgroundSound) {\n                this.backgroundSound.stop();\n                this.backgroundSound = null;\n            }\n        }\n    }\n\n    public playSoundInterrupt(sound: Sound);\n    public playSoundInterrupt(sound: Sound, after: () => void);\n    public playSoundInterrupt(sound: Sound, after?: () => void): void {\n        if (this.currentSound && this.currentSound.isPlaying()) {\n            this.currentSound.pause();\n            this.currentSound = null;\n        }\n        this.playSoundWithAfter(sound, after);\n    }\n\n    private playSoundWithAfter(sound: Sound, after?: () => void) {\n        if (!PlayerSettingsManager.get().isSoundOff()) {\n            this.currentSound = sound;\n            if (after) {\n                sound.play().then(after);\n            } else {\n                sound.play();\n            }\n        }\n    }\n\n}","import { Actor, Sprite, EventTypes } from \"excalibur\";\nimport { Supplier } from \"java8script\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport SoundManager from \"../../engine/soundManager\";\nimport { Resources } from \"../../resources\";\nimport { safePointerUp } from \"../../engine/helpers\";\n\nexport default class ButtonBase extends Actor {\n    private sprite: Sprite;\n    public drawHeight: number;\n    private disabled: boolean;\n\n    public constructor(texture: ex.Texture, onClick: Supplier<void>, disabled?: boolean) {\n        super();\n        this.disabled = disabled ? disabled : false;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        this.addDrawing(this.sprite);\n        this.on(\"pointerdown\", this.onDown);\n        this.on(EventTypes.PointerUp, this.onClickWrapper(onClick));\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n    }\n\n    public getSprite():Sprite {\n        return this.sprite;\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return safePointerUp(() => {\n            if (!this.disabled) {\n                this.sprite.clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound);\n                onClick();\n            }\n        });\n    }\n\n    private onDown: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.2))\n        }\n\n    }\n\n    private onEnter: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n            this.sprite.addEffect(new Darken(0.1))\n        }\n\n    }\n\n    private onExit: () => void = () => {\n        if (!this.disabled) {\n            this.sprite.clearEffects();\n        }\n    }\n\n    public setDisabled(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n}","import { Texture, Vector } from \"excalibur\";\nimport { Supplier } from \"java8script\";\n\ninterface IDimensions {\n    width: number;\n    height: number;\n    scale: Vector;\n}\n\n//paddingPercent should be a decimal between 0-1\nfunction calcDimensionsSingleObjectTexture(screenHeight: number, screenWidth: number, texture: Texture, paddingPercent?: number, maxScale?: number): IDimensions {\n    return calcDimensionsSingleObject(screenHeight, screenWidth, texture.height, texture.width, paddingPercent, maxScale);\n}\n\nfunction calcDimensionsSingleObject(screenHeight: number, screenWidth: number, textHeight: number, textWidth: number, paddingPercent?: number, maxScale?: number): IDimensions {\n\n    const paddingToUse = paddingPercent ? paddingPercent : 1;\n    const maxHeight = screenHeight * paddingToUse;\n    const maxWidth = screenWidth * paddingToUse;\n    const scaleByWidth = maxWidth / textWidth;\n\n    if ((scaleByWidth * textHeight) > screenHeight) {\n        // using width as the scale base pushes height out of the screen\n        const scaleByHeight = maxHeight / textHeight;\n        const scaleToUse = maxScale < scaleByHeight ? maxScale : scaleByHeight;\n        return {\n            width: textWidth * scaleToUse,\n            height: maxHeight,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    } else {\n        const scaleToUse = maxScale < scaleByWidth ? maxScale : scaleByWidth;\n        return {\n            width: maxWidth,\n            height: textHeight * scaleToUse,\n            scale: new Vector(scaleToUse, scaleToUse)\n        }\n    }\n}\n\nfunction safePointerUp(onClick: Supplier<void>): (event?: any) => void {\n    return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                onClick();\n            }\n    }\n}\n\n\nexport {\n    IDimensions,\n    calcDimensionsSingleObject,\n    calcDimensionsSingleObjectTexture,\n    safePointerUp\n}","import { Optional } from \"java8script\";\nimport { Difficulty } from \"./difficulty\";\nimport * as localForage from \"localforage\";\nimport { CardType } from \"../../actors/card/card\";\nimport { GridState } from \"./gridState\";\n\n//this class will encompase the save state of the player\n//all the things they can update or should be tracked\n\ninterface SaveDataV1 {\n    version: number;\n    soundOff: boolean;\n    progressionDisabled: boolean;\n    chosenDifficulty: number; //difficulty level number\n    chosenGridSize: number;\n    maxLevel: number;\n    maxDifficulty: number; //difficulty level number\n    currentLevel: number;\n    currentStage: number;\n    storyGrid?: SaveDataGrid;\n    practiceGrid?: SaveDataGrid;\n}\n\nexport interface SaveDataGrid {\n    gridSize: number;\n    grid: SaveCellData[][]; \n};\n\nexport interface SaveCellData {\n    type: CardType;\n    flipped: boolean;\n}\n\n\nexport default class PlayerSettingsManager {\n    private static STORE_KEY = 'player_settings_v1';\n    public static singleton: PlayerSettingsManager;\n    private static DEFAULT: PlayerSettingsManager = new PlayerSettingsManager(false, false, Difficulty.VERY_EASY, 3, 3, Difficulty.NORMAL, 1, 1, Optional.empty(), Optional.empty());\n    //Settings\n    private soundOff: boolean;\n    private progressionDisabled: boolean;\n    private chosenDifficulty: Difficulty;\n    private chosenGridSize: number;\n\n    //Unlocks\n    public readonly maxLevel: number;\n    public readonly maxDifficulty: Difficulty;\n\n    //Progression\n    private currentLevel: number;\n    private currentStage: number;\n    private storyGrid: Optional<GridState>;\n    private practiceGrid: Optional<GridState>;\n\n\n    private constructor(toggleSound, progressionDisabled, chosenDiff, chosenGridSize, maxLevel, maxDiff, currentLevel, currentStage,\n        storyGrid: Optional<GridState>,\n        practiceGrid: Optional<GridState>\n    ) {\n        this.soundOff = toggleSound;\n        this.progressionDisabled = progressionDisabled;\n        this.chosenDifficulty = chosenDiff;\n        this.chosenGridSize = chosenGridSize;\n        this.maxLevel = maxLevel;\n        this.maxDifficulty = maxDiff;\n        this.currentLevel = currentLevel;\n        this.currentStage = currentStage;\n        this.storyGrid = storyGrid;\n        this.practiceGrid = practiceGrid;\n    }\n\n    public static get(): PlayerSettingsManager {\n        return this.singleton;\n    }\n\n    public static initialize(): Promise<any> {\n        localForage.config({\n            name: 'skeletonFlip',\n            version: 1.0,\n            size: 4980736,\n            storeName: 'playerSettings',\n            description: 'Store save data'\n        });//try with no settings\n        return localForage.getItem(PlayerSettingsManager.STORE_KEY, (e, v) => {\n            console.log(`retrieved from storage:`, [v]);\n            if (e) {\n                console.log(`problem retrieving from store: ${e}`);\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else if (!v) {\n                this.singleton = PlayerSettingsManager.DEFAULT;\n            } else {\n                const saveData: any = v;\n                if (saveData.version === 1) {\n                    this.singleton = PlayerSettingsManager.deserializeV1(saveData);\n                }\n            }\n        });\n    }\n\n    //todo not sure I like this overload scheme\n    public saveGridState(gridState?: GridState): void {\n        if(this.isProgressionDisabled()) {\n            this.practiceGrid = Optional.ofNullable(gridState);\n        } else {\n            this.storyGrid = Optional.ofNullable(gridState);\n        }\n\n        this.saveToStorage();\n    }\n\n    public getGridState(): Optional<GridState> {\n        if(this.isProgressionDisabled()) {\n            return this.practiceGrid;\n        } else {\n            return this.storyGrid;\n        }\n    }\n\n    public setCurrentLevel(newCurrent: number): void {\n        this.currentLevel = newCurrent;\n        this.saveToStorage();\n    }\n\n    public setCurrentStage(newStage: number): void {\n        this.currentStage = newStage;\n        this.saveToStorage();\n    }\n\n    public setChosenGridSize(gridSize: number): void {\n        this.chosenGridSize = gridSize;\n        this.saveToStorage();\n    }\n\n    public setChosenDifficulty(difficutly: Difficulty): void {\n        this.chosenDifficulty = difficutly;\n        this.saveToStorage();\n    }\n\n    public isSoundOff(): boolean {\n        return this.soundOff;\n    }\n\n    public setIsSoundOff(isSoundOff: boolean): void {\n        this.soundOff = isSoundOff;\n        this.saveToStorage();\n    }\n\n    public getCurrentLevel(): number {\n        return this.currentLevel;\n    }\n\n    public getCurrentStage(): number {\n        return this.currentStage;\n    }\n\n    public getChosenDifficulty(): Difficulty {\n        return this.chosenDifficulty;\n    }\n\n    public getChosenGridSize(): number {\n        return this.chosenGridSize;\n    }\n\n    public setProgressionDisabled(isProgDisabled: boolean) {\n        this.progressionDisabled = isProgDisabled;\n        this.saveToStorage();\n    }\n\n    public isProgressionDisabled(): boolean {\n        return this.progressionDisabled;\n    }\n\n    private serializeV1(): SaveDataV1 {\n        return {\n            version: 1,\n            soundOff: this.soundOff,\n            progressionDisabled: this.progressionDisabled,\n            chosenDifficulty: this.chosenDifficulty.getDifficultyLevel(),\n            chosenGridSize: this.chosenGridSize,\n            maxLevel: this.maxLevel,\n            maxDifficulty: this.maxDifficulty.getDifficultyLevel(),\n            currentLevel: this.currentLevel,\n            currentStage: this.currentStage,\n            storyGrid: this.storyGrid.map(g => g.toSaveState()).orElse(null),\n            practiceGrid: this.practiceGrid.map(g => g.toSaveState()).orElse(null)\n        }\n\n    }\n\n    private static deserializeV1(save: any): PlayerSettingsManager {\n        return new PlayerSettingsManager(\n            save.soundOff,\n            save.progressionDisabled,\n            Difficulty.getByDifficultyLevel(save.chosenDifficulty),\n            save.chosenGridSize,\n            save.maxLevel,\n            Difficulty.getByDifficultyLevel(save.maxDifficulty),\n            save.currentLevel,\n            save.currentStage,\n            Optional.ofNullable(save.storyGrid).map(s => GridState.fromSaveState(s)),\n            Optional.ofNullable(save.practiceGrid).map(s => GridState.fromSaveState(s)),\n        );\n    }\n\n    private saveToStorage() {\n        localForage.setItem(\n            PlayerSettingsManager.STORE_KEY,\n            this.serializeV1(),\n        );\n    }\n}","import { TileMap, SpriteSheet, TileSprite, Engine } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class BackgroundManager {\n\n    private tileMap: TileMap;\n\n    constructor(width: number, height: number) {\n        const tile = Resources.backgroundTile;\n        const numberOfCols = Math.ceil(width / tile.width); //todo might need an int\n        const numberOfRows = Math.ceil(height / tile.height);\n        const sheetId = \"background\";\n\n        const tileMap = new TileMap(0, 0, tile.width, tile.height, numberOfRows, numberOfCols);\n        tileMap.registerSpriteSheet(sheetId, new SpriteSheet(tile, 1, 1, tile.width, tile.height));\n        const tileSprite = new TileSprite(sheetId, 0);\n        for (let row = 0; row < numberOfRows * numberOfCols; row++) {\n\n            tileMap.getCellByIndex(row).pushSprite(tileSprite);\n        }\n        this.tileMap = tileMap;\n    }\n\n    private getTileMap(): TileMap {\n        return this.tileMap;\n    }\n\n    public static getDefaultTileMap(engine: Engine): TileMap {\n        return new BackgroundManager(engine.drawWidth, engine.drawHeight).getTileMap();\n    }\n\n    public static getCustomTileMap(width, height): TileMap {\n        return new BackgroundManager(width, height).getTileMap();\n    }\n}","import * as ex from 'excalibur';\nimport { Config, Resources } from '../../resources';\nimport { Supplier } from 'java8script'\nimport { Vector, Sprite } from 'excalibur';\nimport { Darken } from 'excalibur/dist/Drawing/SpriteEffects';\nimport SoundManager from '../../engine/soundManager';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport { IDimensions } from '../../engine/helpers';\nimport SizingManager from '../../engine/sizingManager';\nimport { CardCallbackProvider } from './cardCallbackProvider';\n\nexport enum CardType {\n    COIN = \"coin\",\n    SKELETON = \"skeleton\",\n    POTION = \"potion\",\n    ATTACK = \"attack\",\n}\n\ninterface ICard {\n    type: () => CardType;\n}\n\nexport class Card extends ex.Actor implements ICard {\n\n    private cardType: CardType;\n    private passedInOnClick: Supplier<void>;\n    private row: number;\n    private col: number;\n    private flipped: boolean;\n    private texture: ex.Texture;\n    private baseSprite: Sprite;\n\n    public constructor(screenCenter: ex.Vector, col: number, row: number, onClick: Supplier<void>, faceColor: ex.Color, type: CardType, texture: ex.Texture) {\n        super();\n        this.cardType = type;\n        this.passedInOnClick = onClick;\n        this.row = row;\n        this.col = col;\n        this.flipped = false;\n        this.texture = texture;\n        const dims: IDimensions = Card.calcCardDimensions(screenCenter.y * 2, screenCenter.x * 2)\n        this.baseSprite = Card.sprite(Resources.card, dims.scale);\n        this.addDrawing(\"base\", this.baseSprite);\n        this.addDrawing(\"flip\", Card.sprite(this.texture, dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.on(\"pointerup\", this.fullOnClick);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.x = Card.calcX(col, dims.width, screenCenter) + dims.width; //adding on padding for drawing from center of card\n        this.y = Card.calcY(dims.height, row, screenCenter) + dims.height;\n    }\n\n    private onEnter: () => void = () => {\n        this.baseSprite.clearEffects();\n        this.baseSprite.addEffect(new Darken(0.2));\n    }\n\n    private onExit: () => void = () => {\n        this.baseSprite.clearEffects();\n    }\n\n    private static calcX(col: number, cardWidth: number, center: ex.Vector): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return leftSide + (cardWidth * col) + (Config.gridPadding * col)\n    }\n\n    private static calcY(cardHeight: number, row: number, center: ex.Vector) {\n        const top = center.y // center of screen\n            + (SizingManager.get().getMenuHeight()/2) //adjust for menu size\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardHeight)\n            - ((ProgressionManager.get().getGameGridSize() - 1) * Config.gridPadding) / 2;\n\n        return top + (cardHeight * row) + (Config.gridPadding * row);\n    }\n\n    public static calcCardDimensions(screenHeight: number, screenWidth: number): IDimensions {\n        const { height, width } = Resources.card;\n        const usableHeight = screenHeight - SizingManager.get().getMenuHeight();\n        const maxHeight = Card.calcMaxCardHeight(usableHeight);\n        const maxWidth = Card.calcMaxCardWidth(screenWidth);\n        const scaleByWidth = maxWidth / width;\n\n        if ((scaleByWidth * (height * (ProgressionManager.get().getGameGridSize() + 1))) > usableHeight) {\n            // using width as the scale base pushes height out of the screen\n            const scaleByHeight = maxHeight / height;\n            return {\n                width: width * scaleByHeight,\n                height: maxHeight,\n                scale: new Vector(scaleByHeight, scaleByHeight)\n            }\n        } else {\n            return {\n                width: maxWidth,\n                height: height * scaleByWidth,\n                scale: new Vector(scaleByWidth, scaleByWidth)\n            }\n        }\n    }\n\n    private static calcMaxCardHeight(screenHeight: number): number {\n        const workableScreenHeight = screenHeight * 0.95;\n        return (workableScreenHeight / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static calcMaxCardWidth(screenWidth: number): number {\n        const workableWidth = screenWidth * 0.95;\n        return (workableWidth / (ProgressionManager.get().getGameGridSize() + 1)) - Config.gridPadding;\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = new Sprite(texture, 0, 0, texture.width, texture.height);\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    private fullOnClick(): void {\n        if (!this.flipped) {\n            this.silentSetFlipped();\n            SoundManager.get().playSoundInterrupt(\n                Resources.cardSound,\n                this.playSound\n            );\n            this.passedInOnClick();\n        }\n    }\n\n    public silentSetFlipped() {\n        this.flipped = true;\n        this.setDrawing(\"flip\");\n    }\n    public type(): CardType {\n        return this.cardType;\n    }\n\n    private playSound: () => void = () => {\n        let sound: ex.Sound;\n        if (this.cardType === CardType.SKELETON) {\n            sound = Resources.boneSound;\n        } else if (this.cardType === CardType.ATTACK) {\n            sound = Resources.swordSound;\n        } else if (this.cardType === CardType.COIN) {\n            sound = Resources.coinSound;\n        } else if (this.cardType === CardType.POTION) {\n            sound = Resources.potionSound;\n        }\n        SoundManager.get().playSoundInterrupt(sound);\n    }\n\n    public getRow(): number {\n        return this.row;\n    }\n\n    public getCol(): number {\n        return this.col;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public static skeleton(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.White, CardType.SKELETON, Resources.skull);\n    }\n\n    public static potion(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Red, CardType.POTION, Resources.potion);\n    }\n\n    public static attack(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Gray, CardType.ATTACK, Resources.sword);\n    }\n\n    public static coin(screenCenter: ex.Vector, row: number, col: number, onClick: Supplier<void>): Card {\n        return new Card(screenCenter, col, row, onClick, ex.Color.Yellow, CardType.COIN, Resources.coin);\n    }\n\n    public static create(screenCenter: ex.Vector, row: number, col: number, callbackProvider: CardCallbackProvider, type: CardType, flipped:boolean): Card {\n        let card: Card;\n        if (type === CardType.SKELETON) {\n            card = Card.skeleton(screenCenter, row, col, callbackProvider.skeletonCardCallback);    \n        } else if (type === CardType.ATTACK) {\n            card = Card.attack(screenCenter, row, col, callbackProvider.attackCardCallback);    \n        } else if (type === CardType.COIN) {\n            card = Card.coin(screenCenter, row, col, callbackProvider.coinCardCallback);    \n        } else if (type === CardType.POTION) {\n            card = Card.potion(screenCenter, row, col, callbackProvider.potionCardCallback);    \n        }\n        \n        if (flipped) {\n            card.silentSetFlipped();\n        }\n        return card;\n    }\n}\n\n","import ButtonBase from \"./buttonBase\";\nimport { Vector, Engine } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport { Supplier } from \"java8script\";\n\nexport class ExitButton extends ButtonBase {\n\n    public constructor(engine: Engine, onExit: Supplier<void>) {\n        const texture = Resources.uiX;\n        super(texture, onExit);\n        this.scale = new Vector(Config.exitButtonSize / texture.width, Config.exitButtonSize / texture.height);\n        this.setHeight(Config.exitButtonSize);\n        this.setWidth(Config.exitButtonSize);\n        this.x = engine.drawWidth - Config.exitButtonSize / 2 - Config.gridPadding;\n        this.y = Config.exitButtonSize / 2 + Config.gridPadding;\n    }\n}","import { SpriteFont } from \"excalibur\";\nimport { Resources } from \"../resources\";\n\nexport default class FontManager {\n\n    private generalMono: SpriteFont;\n    private static singleton: FontManager;\n    \n    //this class should not be constructed until after the resources have been loaded\n    private constructor() {\n        this.generalMono = new SpriteFont(Resources.myMono, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.: ', true, 12, 4, 99, 135);\n    }\n\n    public static get(): FontManager {\n        if(this.singleton) {\n            return this.singleton;\n        } else {\n            return new FontManager();\n        }\n    }\n\n    public getMono(): SpriteFont {\n        return this.generalMono;\n    }\n\n}","import { Scene, Engine, Axis, Texture } from \"excalibur\";\nimport BackgroundManager from \"../engine/backgroundManager\";\nimport { Config } from \"../resources\";\nimport ScrollBar from \"../actors/bars/scrollBar\";\nimport { IDimensions } from \"../engine/helpers\";\nimport ButtonBase from \"../actors/bars/buttonBase\";\n\nexport default class BaseScene extends Scene {\n\n    public scrollBar: ScrollBar;\n    public engine: Engine;\n\n    constructor(engine: Engine) {\n        super(engine);\n        this.engine = engine;\n        this.scrollBar = new ScrollBar(engine);\n        this.add(this.scrollBar);//for some reason adding in the initialize makes the drag stop working\n    }\n\n    public setBackround(bottomOfBottomElement: number) {\n        if (bottomOfBottomElement > this.engine.drawHeight) {\n            this.addTileMap(BackgroundManager.getCustomTileMap(this.engine.drawWidth, bottomOfBottomElement + Config.optionPadding));//need to draw to fit the whole canvas rather than just the screen \n        } else {\n            this.addTileMap(BackgroundManager.getDefaultTileMap(this.engine));\n        }\n    }\n\n    public initScroll(bottomOfBottomElement: number) {\n        this.scrollBar.setScrollBottom(this.engine.drawHeight / 2 + (bottomOfBottomElement - this.engine.drawHeight) + Config.optionPadding)\n        this.camera.strategy.lockToActorAxis(this.scrollBar, Axis.Y)\n    }\n\n    public createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n        const button = new ButtonBase(texture, onClick);\n        button.x = x\n        button.y = y\n        button.scale = dims.scale;\n        button.setHeight(dims.height);\n        button.setWidth(dims.width);\n        return button;\n    }\n}","import { GameCoordinator } from '../../coordinator/coordinator';\nimport SoundManager from '../../engine/soundManager';\nimport BackgroundManager from '../../engine/backgroundManager';\nimport { Engine, Scene } from 'excalibur';\nimport { Scenes } from '../scenes';\nimport { ExitButton } from '../../actors/bars/exitButton';\n\nexport abstract class GameWindowBase extends Scene {\n\n  protected coordinator: GameCoordinator;\n  protected engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n    this.coordinator = GameCoordinator.initialize(this.engine);\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicStart();\n    this.coordinator.getAllActors()\n      .forEach(c => this.add(c));\n  }\n\n  public onDeactivate() {\n    this.coordinator.getAllActors()\n      .forEach(c => this.remove(c));\n  }\n} \n","import { CardType } from \"../../actors/card/card\";\nimport { SaveDataGrid, SaveCellData } from \"./playerSettingsManager\";\nimport { Stream } from \"java8script\";\n\nexport class GridState {\n    private gridSize: number;\n    private grid: CardState[][];\n\n    constructor(gridSize: number, grid: CardState[][]) {\n        this.gridSize = gridSize;\n        this.grid = grid;\n    }\n\n    public getGridSize(): number {\n        return this.gridSize;\n    }\n\n    public getGridState(): CardState[][] {\n        return this.grid;\n    }\n\n    public toSaveState(): SaveDataGrid {\n        const saveGridState: SaveCellData[][] = Stream.ofValues(...this.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(cardState => cardState.toSaveState())\n                .toArray())\n            .toArray();\n        return {\n            gridSize: this.gridSize,\n            grid: saveGridState,\n        };\n    }\n\n    public static fromSaveState(save: SaveDataGrid): GridState {\n        const saveGridState: CardState[][] = Stream.ofValues(...save.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(cardState => CardState.fromSaveState(cardState))\n                .toArray())\n            .toArray();\n        return new GridState(save.gridSize, saveGridState);\n    }\n}\n\nexport class CardState {\n    private type: CardType;\n    private flipped: boolean;\n\n    constructor(type: CardType, flipped: boolean) {\n        this.type = type;\n        this.flipped = flipped;\n    }\n\n    public getType(): CardType {\n        return this.type;\n    }\n\n    public isFlipped(): boolean {\n        return this.flipped;\n    }\n\n    public toSaveState(): SaveCellData {\n        return {\n            type: this.type,\n            flipped: this.flipped,\n        };\n    }\n\n    public static fromSaveState(save: SaveCellData): CardState {\n        return new CardState(\n            save.type,\n            save.flipped\n        );\n    }\n}","import { Stream } from \"java8script\";\n\ntype Factors = {\n    skullFactor: number;\n    buffFactor: number;\n}\n\nexport class Difficulty {\n    public static VERY_EASY = new Difficulty(1, 3.0, 0.0, \"Very Easy\");\n    public static EASY = new Difficulty(2, 2.5, 0.0, \"Easy\");\n    public static NORMAL = new Difficulty(3, 2.5, 1.0, \"Normal\");\n    public static HARD = new Difficulty(4, 2.0, 1.0, \"Hard\");\n    public static VERY_HARD = new Difficulty(5, 2.0, 2.0, \"Very Hard\");\n    \n    private difficultyLevel: number; \n    private buffFactor: number;\n    private skeletonFactor: number;\n    private difficultyName: string;\n\n    private constructor(difficultyLevel: number, skeleton: number, buff: number, text: string) {\n        this.difficultyLevel = difficultyLevel;\n        this.buffFactor = buff;\n        this. skeletonFactor = skeleton;\n        this.difficultyName = text;\n    }\n\n    public getSkeletonFactor(): number {\n        return this.skeletonFactor;\n    } \n\n    public getBuffFactor(): number {\n        return this.buffFactor;\n    }\n\n    public getDifficultyLevel(): number {\n        return this.difficultyLevel;\n    }\n\n    public static getByDifficultyLevel(level: number): Difficulty {\n        return Stream.of([\n            this.VERY_EASY,\n            this.EASY,\n            this.NORMAL,\n            this.HARD,\n            this.VERY_HARD\n        ]).filter(diff => diff.getDifficultyLevel() === level)\n        .findFirst()\n        .orElseThrow(() => new Error(\"Difficulty not found for that number\"));\n    }\n}\n\n\n\n","module.exports = __webpack_public_path__ + \"7bc9ef00f9c3eac4ed90e0f78fe053f4.png\";","module.exports = __webpack_public_path__ + \"8c33cba37ae9cda19c0c4706219cd540.png\";","module.exports = __webpack_public_path__ + \"78b5b4973f64552277b581a279a72a42.png\";","module.exports = __webpack_public_path__ + \"2a3f5e19c5b2efd0462fb7cc1b704558.png\";","module.exports = __webpack_public_path__ + \"60875f949f42a486e64184bc743af777.png\";","module.exports = __webpack_public_path__ + \"c150a67e689f09935b6d97e1989f8b56.png\";","module.exports = __webpack_public_path__ + \"17b342f332f5ab3ea92edee594cc0ff7.png\";","module.exports = __webpack_public_path__ + \"bfc4eed12d62bc8834e80f5ad6a79e14.png\";","module.exports = __webpack_public_path__ + \"0cfb30ca844b8dc2e00ca6a6b6125ca5.png\";","import { GameWindowBase } from './gameWindowBase';\nimport ProgressionManager from '../../engine/progression/progressionManager';\n\nexport class GridGameWindow extends GameWindowBase {\n\n  private currentOptionGridSize: number;\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    this.currentOptionGridSize = ProgressionManager.get().getOptionGridSize()\n  }\n\n  //Override\n  public onActivate(): void {\n    const newSize = ProgressionManager.get().getOptionGridSize()\n    if(this.currentOptionGridSize != newSize) {\n      this.currentOptionGridSize = newSize;\n      this.coordinator.resetGame(true);\n    }\n    super.onActivate();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../../resources';\nimport { Card } from './card';\nimport { Vector } from 'excalibur';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\n\ntype CountType = 'col' | 'row';\n\nexport default class Count extends ex.Actor {\n\n    private type: CountType;\n    private index: number;\n    private screenCenter: ex.Vector;\n\n    public constructor(type: CountType, index: number, screenCenter: ex.Vector, initialCount: number) {\n        super();\n        this.type = type;\n        this.index = index;\n        this.screenCenter = screenCenter;\n        const dims = Card.calcCardDimensions(screenCenter.y*2, screenCenter.x*2)\n\n        this.addDrawing(\"0\", Count.sprite(Resources[0], dims.scale));\n        this.addDrawing(\"1\", Count.sprite(Resources[1], dims.scale));\n        this.addDrawing(\"2\", Count.sprite(Resources[2], dims.scale));\n        this.addDrawing(\"3\", Count.sprite(Resources[3], dims.scale));\n        this.addDrawing(\"4\", Count.sprite(Resources[4], dims.scale));\n        this.addDrawing(\"5\", Count.sprite(Resources[5], dims.scale));\n        this.addDrawing(\"6\", Count.sprite(Resources[6], dims.scale));\n        this.addDrawing(\"7\", Count.sprite(Resources[7], dims.scale));\n        this.addDrawing(\"8\", Count.sprite(Resources[8], dims.scale));\n        this.addDrawing(\"9\", Count.sprite(Resources[9], dims.scale));\n        this.setWidth(dims.width);\n        this.setHeight(dims.height);\n        this.x = Count.calcX(type, index, screenCenter, dims.width) + dims.width;\n        this.y = Count.calcY(type, index, screenCenter, dims.height) + dims.height;\n        this.setCount(initialCount);\n    }\n\n    private static calcX(type: CountType, index: number, center: ex.Vector, cardWidth: number): number {\n        const leftSide = center.x\n            - ((ProgressionManager.get().getGameGridSize() / 2) * cardWidth)\n            - cardWidth\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding) / 2;\n\n        if (type === \"row\") {\n            return leftSide;\n        } else {\n            return leftSide + cardWidth + (cardWidth * index) + (Config.gridPadding * (index+1));\n        }\n    }\n\n    private static calcY(type: CountType, index: number, center: ex.Vector, cardHeight: number): number {\n        const top = center.y\n            + SizingManager.get().getMenuHeight() / 2\n            - ((ProgressionManager.get().getGameGridSize()/2)* cardHeight)\n            - cardHeight\n            - ((ProgressionManager.get().getGameGridSize()+1) * Config.gridPadding)/2;\n\n            if(type === \"col\") {\n                return top;\n            } else {\n                return top + cardHeight + (cardHeight * index) + (Config.gridPadding * (index + 1))\n            }\n    }\n\n    private static sprite(texture: ex.Texture, scale: Vector): ex.Sprite {\n        const sprite: ex.Sprite = texture.asSprite().clone();\n        sprite.scale = scale;\n        return sprite;\n    }\n\n    public setCount(count: number): Count {\n        this.setDrawing(`${count}`);\n        return this;\n    }\n}","import { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\";\nimport { Stream, Function } from \"java8script\";\nimport * as ex from 'excalibur';\nimport { Vector } from \"excalibur\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport PlayerSettingsManager from \"../engine/progression/playerSettingsManager\";\nimport { GridState, CardState } from \"../engine/progression/gridState\";\n\n\nexport class GridCoordinator {\n\n    private grid: Card[][];\n    private gridSize: number;\n    private skeletonCount: number;\n    private potionCount: number;\n    private swordCount: number;\n    private callbackProvider: CardCallbackProvider;\n    private screenCenter: ex.Vector;\n\n    private constructor(callbackProvider: CardCallbackProvider, gridSize: number, screenCenter: ex.Vector) {\n        this.skeletonCount = 0;\n        this.potionCount = 0;\n        this.swordCount = 0;\n        this.gridSize = gridSize;\n        this.callbackProvider = callbackProvider;\n        this.screenCenter = screenCenter;\n        this.grid = GridCoordinator.blankGrid(gridSize, callbackProvider, this.screenCenter);\n    }\n\n    public saveCurrentGrid() {\n        const cardStates: CardState[][] = Stream.ofValues(...this.grid)\n            .map(row => Stream.ofValues(...row)\n                .map(card => new CardState(card.type(), card.isFlipped()))\n                .toArray())\n            .toArray();\n\n        const state: GridState = new GridState(this.gridSize, cardStates);\n        PlayerSettingsManager.get().saveGridState(state);\n    }\n\n    public getGridAsList(): Card[] {\n        const list = Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(Function.identity())\n            .toArray();\n\n        return list;\n    }\n\n    public getRow(rowIndex: number): Card[] {\n        return Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(l => l)\n            .filter(card => card.getRow() == rowIndex)\n            .toArray();\n    }\n\n    public getCol(colIndex: number): Card[] {\n        return Stream.of(this.grid)\n            .map(a => Stream.ofValues(...a))\n            .flatMap(l => l)\n            .filter(card => card.getCol() == colIndex)\n            .toArray();\n    }\n\n    private static blankGrid(gridSize: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[][] {\n        return Stream.range(0, gridSize)\n            .map(rowNum => this.blankGridRow(gridSize, rowNum, callbackProvider, screenCenter))\n            .toArray();\n    }\n\n    private static blankGridRow(gridSize: number, rowIndex: number, callbackProvider: CardCallbackProvider, screenCenter: ex.Vector): Card[] {\n        return Stream.range(0, gridSize)\n            .map(columnIndex => Card.coin(screenCenter, rowIndex, columnIndex, callbackProvider.coinCardCallback))\n            .toArray();\n    }\n\n    private initializeSkeletons(): void {\n        while (this.needMoreSkeletons()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if (this.isCoin(row, col)) {\n                this.insertCard(row, col, Card.skeleton(this.screenCenter, row, col, this.callbackProvider.skeletonCardCallback));\n            }\n        }\n    }\n\n    private initializeBuffs(): void {\n        while (this.needMoreBuffs()) {\n            const row: number = this.randomCoord();\n            const col: number = this.randomCoord();\n            if (this.isCoin(row, col)) {\n                this.insertCard(row, col, this.generateBuffCard(row, col))\n            }\n        }\n    }\n\n    private initializeFromState(state: GridState): void {\n        this.gridSize = state.getGridSize();\n        state.getGridState().forEach((row: CardState[], rowIndex:number) => {\n            row.forEach((card: CardState, colIndex: number) => {\n                const createdCard = Card.create(this.screenCenter, rowIndex, colIndex, this.callbackProvider, card.getType(), card.isFlipped());\n                this.insertCard(rowIndex, colIndex, createdCard);\n            });\n        });\n    }\n\n    private generateBuffCard(row: number, col: number): Card {\n        return Math.random() < 0.5\n            ? Card.attack(this.screenCenter, row, col, this.callbackProvider.attackCardCallback)\n            : Card.potion(this.screenCenter, row, col, this.callbackProvider.potionCardCallback)\n    }\n\n    private insertCard(row: number, col: number, card: Card): void {\n        if (card.type() == CardType.SKELETON) {\n            this.skeletonCount++;\n        } else if (card.type() == CardType.ATTACK) {\n            this.swordCount++;\n        } else if (card.type() == CardType.POTION) {\n            this.potionCount++;\n        }\n        this.grid[row][col] = card;\n    }\n\n    private isCoin(row: number, col: number): boolean {\n        return this.grid[row][col].type() == CardType.COIN;\n    }\n\n    private needMoreSkeletons(): boolean {\n        return this.skeletonCount < Math.ceil(((this.gridSize * this.gridSize)) / ProgressionManager.get().getSkullFactor());\n    }\n\n    private needMoreBuffs() {\n        const totalBuffs = this.potionCount + this.swordCount;\n        return totalBuffs < this.skeletonCount - ProgressionManager.get().getBuffFactor();\n    }\n\n    private randomCoord(): number {\n        return Math.floor(Math.random() * this.gridSize);\n    }\n\n    public static createGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        return PlayerSettingsManager.get().getGridState()\n        .map(state => GridCoordinator.loadSavedGrid(callbackProvider, engine, state))\n        .orElseGet(() => GridCoordinator.createNewGrid(callbackProvider, gridSize, engine))\n    }\n\n    private static loadSavedGrid(callbackProvider: CardCallbackProvider, engine: ex.Engine, gridState: GridState): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth / 2, engine.drawHeight / 2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridState.getGridSize(), screenCenter);\n        coord.initializeFromState(gridState);\n        return coord;\n    }\n\n    public static createNewGrid(callbackProvider: CardCallbackProvider, gridSize: number, engine: ex.Engine): GridCoordinator {\n        const screenCenter = new Vector(engine.drawWidth / 2, engine.drawHeight / 2);\n        const coord: GridCoordinator = new GridCoordinator(callbackProvider, gridSize, screenCenter);\n        coord.initializeSkeletons();\n        coord.initializeBuffs();\n        coord.saveCurrentGrid();\n        return coord;\n    }\n}","import { Actor, Vector, Sprite, Texture } from \"excalibur\";\nimport SizingManager from \"../../engine/sizingManager\";\n\nexport default class StatTracker extends Actor {\n    private enabled: boolean;\n    public sprite: Sprite;\n    private static DISABLED_OPACITY: number = 0.50;\n\n    public constructor(enabled: boolean, x: number, y: number, texture: Texture) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.sprite = new Sprite(texture, 0, 0, texture.width, texture.height );\n        this.scale = new Vector(SizingManager.get().getUIItemSize()/texture.width, SizingManager.get().getUIItemSize()/texture.height);\n        this.addDrawing(this.sprite);\n        this.setEnabled(enabled);\n        \n    }\n\n    public setEnabled(enabled: boolean): StatTracker {\n        this.enabled = enabled;\n        this.sprite.clearEffects();\n        if(enabled) {\n            this.sprite.opacity(1);\n        } else {\n            this.sprite.opacity(StatTracker.DISABLED_OPACITY);\n        }\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n}","import { Texture } from \"excalibur\";\nimport { Supplier, Stream } from \"java8script\";\nimport StatTracker from \"../actors/bars/statTracker\";\nimport SizingManager from \"../engine/sizingManager\";\n\nexport class NumberCoordinator {\n    private max: number;\n    private current: number;\n    private onZero: Supplier<void>;\n\n    private statActors: StatTracker[];\n\n    private constructor(max, current, onZeroCallback: Supplier<void>, statActors: StatTracker[]) {\n        this.current = current;\n        this.max = max;\n        this.onZero = onZeroCallback;\n        this.statActors = statActors;\n    }\n\n    public static create(x, y, max:number, onZeroCallback: Supplier<void>, texture: Texture, current?: number): NumberCoordinator {\n        const defaultedCurrent: number = current ? current : 0;\n        const statActors = Stream.range(0, max)\n                            .map(idx => {\n                                if(idx > (defaultedCurrent - 1)) {\n                                    return new StatTracker(false, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                } else {\n                                    return new StatTracker(true, x + (idx * SizingManager.get().getUIItemSize()), y, texture);\n                                }\n                            })\n                            .toArray();\n    \n        return new NumberCoordinator(\n            max,\n            defaultedCurrent,\n            onZeroCallback,\n            statActors\n        );\n    }\n\n    //adds value to the current, respecting the maximum.\n    //returns the current value after the update\n    public add(value: number): number {\n        if((this.current + value) > this.max) {\n            this.current = this.max;\n        } else {\n            this.current = this.current + value;\n        }\n       this.statActors[this.current - 1].setEnabled(true);\n        return this.current;\n    }\n\n    //subtracts the value from the current, respecting 0 as the lower bound.\n    public subtract(value: number): number {\n        if(this.current - value <= 0) {\n            this.current = 0;\n            this.onZero();\n        } else {\n            this.current = this.current - value;\n        }\n        this.statActors[this.current].setEnabled(false);\n        return this.current;\n    }\n\n    //returns the current value\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public getStatActors(): StatTracker[] {\n        return this.statActors;\n    }\n }","import { NumberCoordinator } from \"./numberCoordinator\";\nimport { Card, CardType } from \"../actors/card/card\";\nimport { CardCallbackProvider } from \"../actors/card/cardCallbackProvider\"\nimport { Config, Resources } from \"../resources\";\nimport { Stream } from \"java8script\";\nimport { GridCoordinator } from \"./gridCoordinator\";\nimport * as ex from \"excalibur\";\nimport { Vector, Actor, Scene } from \"excalibur\";\nimport { Scenes } from \"../scenes/scenes\";\nimport Count from \"../actors/card/count\";\nimport ProgressionManager from \"../engine/progression/progressionManager\";\nimport SizingManager from \"../engine/sizingManager\";\nimport PlayerSettingsManager from \"../engine/progression/playerSettingsManager\";\n\n//this class will handle the building and coordinating of data between the game cards and other UI pieces\nexport class GameCoordinator implements CardCallbackProvider {\n    private engine: ex.Engine;\n    private healthCoordinator: NumberCoordinator;\n    private attackCoordinator: NumberCoordinator;\n    private gridCoordinator: GridCoordinator;\n\n    private rowCounts: Count[];\n    private columnCounts: Count[];\n\n    private constructor(engine: ex.Engine) {\n        this.engine = engine;\n        this.resetGame(false);\n    }\n\n    public static initialize(engine: ex.Engine): GameCoordinator {\n        const coordinator: GameCoordinator = new GameCoordinator(engine);\n        return coordinator;\n    }\n\n    public resetGame(shouldCreateFresh: boolean): void {\n        const mm: SizingManager = SizingManager.get();\n        this.healthCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() / 2, Config.maxHealth, () => { }, Resources.uiHeart, Config.maxHealth);\n        this.attackCoordinator = NumberCoordinator.create(mm.getUIItemSize() / 2, mm.getUIItemSize() * 1.5, Config.maxAttack, () => { }, Resources.uiSword);\n        this.gridCoordinator = shouldCreateFresh\n            ? GridCoordinator.createNewGrid(this, ProgressionManager.get().getGameGridSize(), this.engine)\n            : GridCoordinator.createGrid(this, ProgressionManager.get().getGameGridSize(), this.engine);\n        this.rowCounts = this.createRowCountCards();\n        this.columnCounts = this.createColCountCards();\n    }\n\n    private getStatTrackers(): ex.Actor[] {\n        return [\n            ...this.healthCoordinator.getStatActors(),\n            ...this.attackCoordinator.getStatActors()\n        ]\n    }\n\n    private getRowCountCards(): Count[] {\n        return this.rowCounts;\n    }\n\n    private getColCountCards(): Count[] {\n        return this.columnCounts;\n    }\n\n    private createColCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getRow(0))\n            .map(card => new Count(\"col\", card.getCol(), center, this.skeletonCountForCol(card.getCol())))\n            .toArray();\n    }\n\n    private createRowCountCards(): Count[] {\n        const center = new Vector(this.engine.drawWidth / 2, this.engine.drawHeight / 2);\n        return Stream.of(this.gridCoordinator.getCol(0))\n            .map(card => new Count(\"row\", card.getRow(), center, this.skeletonCountForRow(card.getRow())))\n            .toArray();\n    }\n\n    private skeletonCountForRow(row: number) {\n        return Stream.of(this.gridCoordinator.getRow(row))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private skeletonCountForCol(col: number) {\n        return Stream.of(this.gridCoordinator.getCol(col))\n            .filter(c => !c.isFlipped())\n            .filter(c => c.type() == CardType.SKELETON)\n            .count();\n    }\n\n    private getGridAsList(): Card[] {\n        return this.gridCoordinator.getGridAsList();\n    }\n\n    public getAllActors(): Actor[] {\n        return Stream.ofValues<Actor[]>(\n            this.gridCoordinator.getGridAsList(),\n            this.getColCountCards(),\n            this.getRowCountCards(),\n            this.getStatTrackers()\n        ).flatMap(a => Stream.ofValues(...a))\n            .toArray();\n    }\n\n    private updateLabels = () => {\n        this.rowCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForRow(idx));\n        });\n\n        this.columnCounts.forEach((count, idx) => {\n            count.setCount(this.skeletonCountForCol(idx));\n        });\n    }\n\n    private checkIfCompleteGame(): void {\n        const allFlipped = Stream.of(this.getGridAsList())\n            .allMatch(card => card.isFlipped());\n        if (this.healthCoordinator.getCurrent() === 0) {\n            this.engine.goToScene(Scenes.GAME_OVER);\n            ProgressionManager.get().resetProgress();\n            this.resetGame(true);\n        } else if (allFlipped && this.healthCoordinator.getCurrent() > 0) {\n            this.engine.goToScene(Scenes.VICTORY);\n            ProgressionManager.get().progress();\n            this.resetGame(true);\n        }\n    }\n\n    public skeletonCardCallback = (): void => {\n        if (this.attackCoordinator.getCurrent() > 0) {\n            this.attackCoordinator.subtract(1);\n        } else {\n            this.healthCoordinator.subtract(1);\n        }\n        this.updateLabels();\n        this.gridCoordinator.saveCurrentGrid();\n        this.checkIfCompleteGame();\n    }\n\n    public coinCardCallback = (): void => {\n        this.gridCoordinator.saveCurrentGrid();\n        this.checkIfCompleteGame();\n    }\n\n    public attackCardCallback = (): void => {\n        this.attackCoordinator.add(1);\n        this.gridCoordinator.saveCurrentGrid();\n        this.checkIfCompleteGame();\n    }\n\n    public potionCardCallback = (): void => {\n        this.healthCoordinator.add(1);\n        this.gridCoordinator.saveCurrentGrid();\n        this.checkIfCompleteGame();\n    }\n}","import { Label, BaseAlign, TextAlign } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\nimport ProgressionManager from \"../../engine/progression/progressionManager\";\n\nexport default class LevelDisplay extends Label {\n    private static PREFIX: string = \"Level\";\n    public constructor(x: number, y: number, size: number, startingLevel: string) {\n        super(\n            LevelDisplay.createLabelText(startingLevel),\n            x,\n            y,\n            null,\n            FontManager.get().getMono()\n        );\n\n        this.fontSize = size;\n        this.baseAlign = BaseAlign.Middle;\n        this.textAlign = TextAlign.Center;\n\n    }\n\n    private static createLabelText(level: string) {\n        return ProgressionManager.get().isProgressionDisabled() ? \"\" :`${LevelDisplay.PREFIX} ${level}`;\n    }\n\n    public updateLevel(newLevel: string): void {\n        this.text = LevelDisplay.createLabelText(newLevel);\n    }\n\n}","import * as ex from 'excalibur';\nimport LevelDisplay from '../../actors/bars/level';\nimport ProgressionManager from '../../engine/progression/progressionManager';\nimport SizingManager from '../../engine/sizingManager';\nimport { GameWindowBase } from './gameWindowBase';\n\nexport class StoryGameWindow extends GameWindowBase {\n\n  private levelDisplay: LevelDisplay;\n\n  public onInitialize(engine: ex.Engine) {\n    super.onInitialize(engine);\n    const mm: SizingManager = SizingManager.get();\n    this.levelDisplay = new LevelDisplay(engine.drawWidth / 2, mm.getMenuHeight() - mm.getUIItemSize() / 2, mm.getUIItemSize(), ProgressionManager.get().getLevelString());\n    this.add(this.levelDisplay);\n\n  }\n\n  public onActivate() {\n    super.onActivate();\n    this.levelDisplay.updateLevel(ProgressionManager.get().getLevelString());\n  }\n} \n","\nimport * as React from 'react';\nimport ReactModal = require('react-modal');\nimport { render } from 'react-dom';\nimport { Config } from '../resources';\nimport { TextAlignProperty } from 'csstype';\nconst xButton = require('../images/ui/x.png');\nconst skullImage = require('../images/skull.png');\nconst swordImage = require('../images/sword.png');\nconst potionImage = require('../images/potion.png');\nconst coinImage = require('../images/coin.png');\nconst heartUIImg = require('../images/ui/heart.png');\nconst swordUIImage = require('../images/ui/sword.png');\nconst threeImage = require('../images/numbers/3.png');\n\ninterface Styles {\n    p: {\n        padding: string,\n        margin: string,\n        fontSize: number,\n        flex: number,\n        textAlign: TextAlignProperty,\n    },\n    h1: {\n        textAlign: TextAlignProperty,\n    },\n    holder: {\n        width: string,\n    }\n    imgHolder: {\n        width: string,\n        textAlign: TextAlignProperty,\n    }\n    cardImg: {\n        width: number,\n    }\n}\n\nconst styles: Styles = {\n    p: { padding: \"16px\", margin: \"0px\", fontSize: 20, flex: 1, textAlign: \"center\" },\n    h1: { textAlign: \"center\" },\n    holder: {\n        width: \"100%\"\n    },\n    imgHolder: {\n        width: \"100%\",\n        textAlign: \"center\"\n    },\n    cardImg: {\n        width: 100\n    }\n}\n\nexport class ModalRenderer {\n\n    private isOpen: boolean;\n\n    constructor(isOpen: boolean) {\n        this.isOpen = isOpen;\n    }\n\n    public introModal() {\n        const innerStuff = (<div>\n            <h1 style={styles.h1}>Introduction</h1>\n            <p style={styles.p}>Welcome to Skeleton Flip!</p>\n            <p style={styles.p}>Flip cards, find coins, drink potions and kill skeletons. The goal of the game is to flip all the cards on the board without running out of hearts.</p>\n            <p style={styles.p}>In Story Mode, you progress through increasingly larger and larger grids, you can unlock larger grid sizes and harder difficulties by collecting coins and unlocking upgrades.</p>\n            <p style={styles.p}>If Story Mode is disabled, you may choose to practice any grid size you like.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public howToPlayModal() {\n        const innerStuff = (<div>\n            <h1 style={styles.h1}>How To Play</h1>\n            <p style={styles.p}>The top right of the game screen shows your health (<img width={20} src={heartUIImg} alt=\"heart\" />) and current attack (<img width={20} src={swordUIImage} alt=\"sword\" />). If you run out of health you lose!</p>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={threeImage} alt=\"three\" />\n            </div>\n            <p style={styles.p}>The numbers on the outer edges of the grid indicate how many skeletons are hiding in that row or column.</p>\n            <p style={styles.p}>Tap cards inside the grid to flip them over. Remember you need to flip every card in the grid to advance, so choose your path wisely!</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public cardModal() {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>Cards</h1>\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={skullImage} alt=\"skull\" />\n            </div>\n            <p style={styles.p}>Oh no! Flipping over a skeleton card will hurt you, taking away one health unless you have a sword to defend yourself.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={swordImage} alt=\"sword\" />\n            </div>\n            <p style={styles.p}>Sweep Low! Flipping over a sword card will add to your attack count, no need to fear the next skeleton you flip over, the sword will take care of it!</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={potionImage} alt=\"potion\" />\n            </div>\n            <p style={styles.p}>Tastes like Strawberry! Flipping over a potion card will heal any wounds that you have taken from those nasty skeletons.</p>\n\n            <div style={styles.imgHolder}>\n                <img width={styles.cardImg.width} src={coinImage} alt=\"coin\" />\n            </div>\n            <p style={styles.p}>Take that to the bank! Flipping over a coin card will add to your riches, if you complete a level you will keep the coins you found and can use them for upgrades.</p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    public textModal(title: string, text: string) {\n        const innerStuff = (<div style={styles.holder}>\n            <h1 style={styles.h1}>{title}</h1>\n            <p style={styles.p}>\n                {text}\n            </p>\n        </div>);\n        this.setOpenAndRerender(true, innerStuff);\n    }\n\n    private setOpenAndRerender = (isOpen: boolean, innerStuff?: any) => {\n        this.isOpen = isOpen;\n        this.render({\n            innerStuff: innerStuff,\n            open: this.isOpen,\n            closeFunc: () => this.setOpenAndRerender(false)\n        });\n    }\n\n    private render = (props: Props) => {\n        render(<E {...props} />,\n            document.getElementById('modal')\n        );\n    }\n}\n\ninterface Props {\n    open: boolean;\n    closeFunc: () => void;\n    innerStuff?: any;\n}\n\ninterface State {\n}\n\nexport default class E extends React.Component<Props, State> {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <ReactModal\n                style={{\n                    content: {\n                        borderRadius: \"0px\",\n                        backgroundColor: '#a77600',\n                        borderWidth: 8,\n                        borderColor: \"#402f08\",\n                        padding: \"16px\",\n                    }\n                }}\n                appElement={document.getElementById('modal')}\n                isOpen={this.props.open}>\n                <div style={{ float: \"right\", height: Config.exitButtonSize, position: \"fixed\", right: \"24px\", top: \"24px\" }}>\n                    <a style={{}}>\n                        <img height={Config.exitButtonSize} width={Config.exitButtonSize} src={xButton} alt=\"exit\" onPointerUp={this.props.closeFunc} />\n                    </a>\n                </div>\n                <div style={{ borderRadius: \"16px\", borderStyle: \"solid\", borderWidth: \"4px\", minHeight: \"95%\", backgroundColor: \"#896000\", borderColor: \"#402f08\", display: \"flex\" }}>\n                    {this.props.innerStuff}\n                </div>\n            </ReactModal>\n        );\n    }\n}","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Texture, Vector, Actor, Engine, Axis } from 'excalibur';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport { calcDimensionsSingleObjectTexture, IDimensions } from '../engine/helpers';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport { ModalRenderer } from '../modal/modal';\nimport SizingManager from '../engine/sizingManager';\nimport BaseScene from './BaseScene';\n\nexport class Help extends BaseScene {\n\n  private modalRenderer: ModalRenderer;\n\n  public onInitialize(engine: ex.Engine) {\n\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n\n    const titleDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.helpTitle, 0.6, 1);\n    const title = new Actor(\n      engine.drawWidth / 2,\n      titleDims.height / 2 + Config.gridPadding,\n      titleDims.width,\n      titleDims.height\n    );\n    title.addDrawing(Resources.helpTitle);\n    title.scale = titleDims.scale;\n    this.add(title);\n\n    this.modalRenderer = new ModalRenderer(false);\n\n    const centerx = engine.drawWidth / 2;\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.introMenu, sizing.padding, sizing.maxScale);\n\n    const intro = this.createButton(dims, centerx, title.getBottom() + dims.height / 2 + Config.optionPadding, Resources.introMenu, () => this.modalRenderer.introModal());\n    const playing = this.createButton(dims, centerx, intro.getBottom() + Config.gridPadding + dims.height / 2, Resources.playingMenu, () => this.modalRenderer.howToPlayModal());\n    const cards = this.createButton(dims, centerx, playing.getBottom() + Config.gridPadding + dims.height / 2, Resources.cardMenu, () => this.modalRenderer.cardModal());\n    const credits = this.createButton(dims, centerx, cards.getBottom() + Config.gridPadding + dims.height / 2, Resources.creditsMenu, () => this.modalRenderer.textModal(\"Credits\", \"Made by Andrew\"));\n\n    this.add(intro);\n    this.add(playing);\n    this.add(cards);\n    this.add(credits);\n\n\n    this.initScroll(credits.getBottom());\n    this.setBackround(credits.getBottom());\n  }\n\n  public createButton(dims: IDimensions, x: number, y: number, texture: Texture, onClick: () => void): ButtonBase {\n    const button = new ButtonBase(texture, onClick);\n    button.x = x\n    button.y = y\n    button.scale = dims.scale;\n    button.setHeight(dims.height);\n    button.setWidth(dims.width);\n    return button;\n  }\n\n  public onActivate() {\n  }\n\n  public onDeactivate() {\n  }\n} \n","import { Sprite, Actor, Vector, SpriteFont } from \"excalibur\";\nimport { Resources } from \"../../resources\";\nimport { Darken } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Supplier, Function, Optional, Consumer } from \"java8script\";\nimport SoundManager from \"../../engine/soundManager\";\n\nexport default class RadioButton extends Actor {\n    private checked: boolean;\n    private checkedSprite: Sprite;\n    private uncheckedSprite: Sprite;\n    private onToggle: Optional<Consumer<boolean>>\n\n    constructor(size: number, x: number, y: number, defaultValue: boolean, onToggle?: Consumer<boolean>) {\n        super();\n        this.checked = defaultValue;\n        this.checkedSprite = new Sprite(Resources.uiX, 0, 0, Resources.uiX.width, Resources.uiX.height);\n        this.uncheckedSprite = new Sprite(Resources.uiBlank, 0, 0, Resources.uiBlank.width, Resources.uiBlank.height);\n        this.scale = new Vector(size / Resources.uiX.width, size / Resources.uiX.height);\n        this.setHeight(size);\n        this.setWidth(size);\n        this.x = x;\n        this.y = y;\n        this.onToggle = Optional.ofNullable(onToggle);\n\n        //get drawing ready\n        this.addDrawing(\"checked\", this.checkedSprite);\n        this.addDrawing(\"unchecked\", this.uncheckedSprite);\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n        this.on(\"pointerdown\", this.onDown);\n        this.on(\"pointerenter\", this.onEnter);\n        this.on(\"pointerleave\", this.onExit);\n        this.on(\"pointerup\", this.onClickWrapper(this.toggleButton))\n    }\n\n    public setOnToggle(onToggle: Consumer<boolean>): void {\n        this.onToggle = Optional.of(onToggle);\n    }\n    public isChecked(): boolean {\n        return this.checked;\n    }\n\n    public setChecked(isChecked: boolean): void {\n        this.checked = isChecked;\n        this.setCheckedDrawing();\n    }\n\n    private onClickWrapper(onClick: Supplier<void>) {\n        return (event?: any) => {\n            if (event.ev.type === \"pointerup\") {\n                //this is kinda nasty need to filter out the duplicate touch events, only accept the regular pointer up ones\n                this.currentSprite().clearEffects();\n                SoundManager.get().playSoundInterrupt(Resources.buttonSound)\n                onClick();\n                this.onEnter();\n            } else {\n            }\n        }\n    }\n\n    private currentSprite(): Sprite {\n        return this.checked ? this.checkedSprite : this.uncheckedSprite;\n    }\n\n    private onDown: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.2))\n    }\n\n    private onEnter: () => void = () => {\n        this.currentSprite().clearEffects();\n        this.currentSprite().addEffect(new Darken(0.1))\n    }\n\n    private onExit: () => void = () => {\n        this.currentSprite().clearEffects();\n    }\n\n    private setCheckedDrawing() {\n        if (this.checked) {\n            this.setDrawing(\"checked\");\n        } else {\n            this.setDrawing(\"unchecked\");\n        }\n    }\n\n\n    private toggleButton = () => {\n        this.checked = !this.checked;\n        this.setCheckedDrawing();\n        this.onToggle.ifPresent(func => func(this.checked));\n    }\n\n}","import RadioButton from \"./radioButton\";\nimport { Label, Actor, BaseAlign, TextAlign, Engine } from \"excalibur\";\nimport FontManager from \"../../engine/fontManager\";\n\nexport default class LabeledRadio {\n\n    private radio: RadioButton;\n    private label: Label;\n\n    constructor(label: string, size: number, x: number, y: number, defaultVal: boolean, engine: Engine, onToggle?: (checked:boolean) => void) {\n        const textSize = size - (size * 0.25)\n        const buttonSize = size + (size * 0.25);\n        \n\n        this.label = new Label(label, x, y, null, FontManager.get().getMono());//need to x adjust after\n        this.label.fontSize = textSize;\n        this.label.baseAlign = BaseAlign.Middle;\n        this.label.textAlign = TextAlign.Center;\n        const labelWidth = this.label.getTextWidth(engine.ctx);\n        this.label.x = x - labelWidth/3;\n        \n        this.radio = new RadioButton(buttonSize, x+labelWidth*(3/4), y, defaultVal, onToggle);\n        \n    }\n\n    public addOnToggle(onToggle: (checked:boolean) => void): void {\n        this.radio.setOnToggle(onToggle);\n    }\n    \n    public setChecked(isChecked: boolean): void {\n        this.radio.setChecked(isChecked);\n    }\n\n    public isChecked(): boolean {\n        return this.radio.isChecked();\n    }\n\n    public getBottom() {\n        return Math.max(this.radio.getBottom(), this.label.getBottom());\n    }\n\n    public getDrawables(): Actor[] {\n        return [\n            this.radio,\n            this.label\n        ];\n    }\n}","import { Actor, Label, Vector, TextAlign, BaseAlign, Color, Sprite } from \"excalibur\";\nimport { Resources, Config } from \"../../resources\";\nimport ButtonBase from \"./buttonBase\";\nimport FontManager from \"../../engine/fontManager\";\nimport { Colorize } from \"excalibur/dist/Drawing/SpriteEffects\";\nimport { Stream } from \"java8script\";\n\nexport default class NumberSelector {\n    private min: number;\n    private max: number;\n    private current: number;\n    private fontSize: number;\n    private labelText: string;\n\n    private leftButtonSprite:Sprite;\n    private leftButton: ButtonBase;\n    private rightButtonSprite: Sprite;\n    private rightButton: ButtonBase;\n    private numberLabel: Label;\n    private topLabel: Label;\n\n    public constructor(label: string, min: number, max: number, current: number, x: number, y: number, fontSize: number, disabled: boolean) {\n        this.labelText = label;\n        this.min = min;\n        this.max = max;\n        this.current = current;\n        this.fontSize = fontSize;\n\n        const textSize = this.fontSize - (this.fontSize * 0.25)\n        const buttonSize = this.fontSize + (this.fontSize * 0.25);\n        \n        //top text\n        this.topLabel = new Label(this.labelText, x, y-Config.gridPadding, null, FontManager.get().getMono());\n        this.topLabel.fontSize = textSize\n        this.topLabel.baseAlign = BaseAlign.Middle;\n        this.topLabel.textAlign = TextAlign.Center;\n        \n        //central Number Label\n        this.numberLabel = new Label(`${current}`, x, y+buttonSize, null, FontManager.get().getMono());\n        this.numberLabel.fontSize = textSize\n        this.numberLabel.baseAlign = BaseAlign.Middle;\n        this.numberLabel.textAlign = TextAlign.Center;\n\n        //left button\n        \n        this.leftButton = new ButtonBase(Resources.uiLeft, () => this.addBy(-1));\n        this.leftButtonSprite = this.leftButton.getSprite();\n        this.leftButton.x = x - buttonSize*1.5\n        this.leftButton.y = y + buttonSize;\n        this.leftButton.scale = new Vector(buttonSize/Resources.uiLeft.width, buttonSize/Resources.uiLeft.height);\n        this.leftButton.setHeight(buttonSize);\n        this.leftButton.setWidth(buttonSize);\n        \n        //right button\n        this.rightButton = new ButtonBase(Resources.uiRight, () => this.addBy(1));\n        this.rightButtonSprite = this.rightButton.getSprite();\n        this.rightButton.x = x + buttonSize*1.5;\n        this.rightButton.y = y + buttonSize;\n        this.rightButton.scale = new Vector(buttonSize/Resources.uiRight.width, buttonSize/Resources.uiRight.height);\n        this.rightButton.setHeight(buttonSize);\n        this.rightButton.setWidth(buttonSize);\n\n        this.updateDisabled(disabled);\n    }\n\n    public updateDisabled = (isDisabled: boolean) => {\n        this.leftButtonSprite.clearEffects();\n        this.rightButtonSprite.clearEffects();\n        if(isDisabled) {\n            const disColor = Color.Gray;\n            this.topLabel.color = disColor\n            this.numberLabel.color = disColor;\n            this.leftButtonSprite.addEffect(new Colorize(disColor));\n            this.rightButtonSprite.addEffect(new Colorize(disColor));\n            this.leftButton.setDisabled(true);\n            this.rightButton.setDisabled(true);\n        } else {\n            this.topLabel.color = Color.Black;\n            this.numberLabel.color = Color.Black;\n            this.leftButton.setDisabled(false);\n            this.rightButton.setDisabled(false);\n        }\n    }\n\n    //add can be negative\n    private addBy(add: number): void {\n        const nextCurrent = this.current + add;\n        if(this.min <= nextCurrent && this.max >= nextCurrent) {\n            this.current = nextCurrent;\n            this.numberLabel.text = `${nextCurrent}`;\n        }\n    }\n\n    public getCurrent(): number {\n        return this.current;\n    }\n\n    public setCurrent(newCurrent: number): void {\n        this.current = newCurrent;\n        this.numberLabel.text = `${newCurrent}`;\n    }\n\n    public getBottom() {\n        return Stream.ofValues<Actor>(this.leftButton, this.rightButton, this.numberLabel)\n        .map(a => a.getBottom())\n        .max()\n        .orElse(0);\n    }\n    public getDrawables(): Actor[] {\n        return [\n            this.leftButton, \n            this.rightButton,\n            this.numberLabel,\n            this.topLabel\n        ];\n    }\n}","import { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport { Actor, Engine } from 'excalibur';\nimport NumberSelector from '../actors/bars/numberSelector';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport LabeledRadio from '../actors/bars/labeledRadio';\nimport SizingManager from '../engine/sizingManager';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport { Consumer } from 'java8script';\nimport PlayerSettingsManager from '../engine/progression/playerSettingsManager';\nimport { ExitButton } from '../actors/bars/exitButton';\nimport BaseScene from './BaseScene';\n\nexport class Options extends BaseScene {\n\n  private gridSize: NumberSelector;\n  private difficulty: NumberSelector;\n  private sound: LabeledRadio;\n  private progressionToggle: LabeledRadio;\n  private title: Actor;\n\n  public onInitialize(engine: Engine) {\n    const itemSize = SizingManager.get().getUIItemSize();\n    this.add(new ExitButton(engine, () => engine.goToScene(Scenes.MAIN_MENU)));\n\n    this.addTitle();\n    this.addSoundToggle(itemSize);\n    this.addDifficultySize(itemSize);\n    this.addProgressionToggle(itemSize)\n    const callbackForEnabling = this.addGridSize(itemSize);\n    this.progressionToggle.addOnToggle(callbackForEnabling);\n\n    const sizing = SizingManager.get().getUIButtonSizing();\n    const createbuttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.confirmMenu, sizing.padding, sizing.maxScale);\n\n    const createButtonY =\n      this.gridSize.getBottom() < engine.drawHeight - createbuttonDims.height\n        ? engine.drawHeight - createbuttonDims.height / 2 - Config.optionPadding //grid size and confirm dont overelap so all good, draw at the bottom of screen \n        : this.gridSize.getBottom() + Config.optionPadding + createbuttonDims.height / 2;\n    const createButton = this.createButton(\n      createbuttonDims,\n      engine.drawWidth / 2,\n      createButtonY,\n      Resources.confirmMenu,\n      () => this.onConfirm()\n    );\n    this.add(createButton);\n\n    this.initScroll(createButton.getBottom());\n    this.setBackround(createButton.getBottom())\n  }\n\n  private onConfirm = () => {\n    ProgressionManager.get().setGridSize(this.gridSize.getCurrent());\n    ProgressionManager.get().setDifficulty(this.difficulty.getCurrent());\n    ProgressionManager.get().setProgressionDisabled(!this.progressionToggle.isChecked());\n    PlayerSettingsManager.get().setIsSoundOff(!this.sound.isChecked())\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  }\n\n\n  private addTitle(): void {\n    const dims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.optionTitle, 0.6, 1);\n    const sprite = Resources.optionTitle.asSprite();\n    const title = new Actor();\n    title.addDrawing(sprite);\n    title.x = this.engine.drawWidth / 2;\n    title.y = dims.height / 2 + Config.gridPadding;\n    title.setHeight(dims.height);\n    title.setWidth(dims.width);\n    title.scale = dims.scale;\n    this.title = title;\n    this.add(title);\n  }\n\n  private addSoundToggle(itemSize) {\n    this.sound = new LabeledRadio(\"Sound\",\n      itemSize, this.engine.drawWidth / 2,\n      this.title.getBottom() + Config.optionPadding * 2,\n      !PlayerSettingsManager.get().isSoundOff(),\n      this.engine\n    );\n\n    this.sound.getDrawables()\n      .forEach(e => this.add(e));\n  }\n\n  private addDifficultySize(itemSize): void {\n    this.difficulty = new NumberSelector(\"DIFFICULTY\", 1, 5, ProgressionManager.get().getDifficulty().getDifficultyLevel(), this.engine.drawWidth / 2,\n      this.sound.getBottom() + itemSize * 0.5 + Config.optionPadding,\n      itemSize, false);\n    this.difficulty.getDrawables()\n      .forEach(i => this.add(i));\n  }\n\n  private addProgressionToggle(itemSize) {\n    this.progressionToggle = new LabeledRadio(\"Story Mode\", itemSize, this.engine.drawWidth / 2,\n      this.difficulty.getBottom() + itemSize * 1 + Config.optionPadding,\n      !ProgressionManager.get().isProgressionDisabled(), this.engine);\n\n    this.progressionToggle.getDrawables()\n      .forEach(e => this.add(e));\n  }\n\n  //returns callback for toggling the objects\n  private addGridSize(itemSize): Consumer<boolean> {\n    this.gridSize = new NumberSelector(\"GRID SIZE\", 2, 9, ProgressionManager.get().getOptionGridSize(), this.engine.drawWidth / 2,\n      this.progressionToggle.getBottom() + itemSize * 0.5 + Config.optionPadding, itemSize,\n      !ProgressionManager.get().isProgressionDisabled());\n    this.gridSize.getDrawables()\n      .forEach(i => this.add(i));\n\n    return this.gridSize.updateDisabled;\n  }\n\n  public onActivate() {\n    this.sound.setChecked(!PlayerSettingsManager.get().isSoundOff());\n    this.gridSize.setCurrent(ProgressionManager.get().getOptionGridSize());\n    this.difficulty.setCurrent(ProgressionManager.get().getDifficulty().getDifficultyLevel());\n    this.progressionToggle.setChecked(!ProgressionManager.get().isProgressionDisabled())\n  }\n\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport {calcDimensionsSingleObjectTexture, safePointerUp } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport SizingManager, { IButtonSizing } from '../engine/sizingManager';\n\nexport class Victory extends ex.Scene {\n\n  private engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n    const sizing: IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.nextMenu, sizing.padding, sizing.maxScale);\n    const imageDims = calcDimensionsSingleObjectTexture(this.engine.drawHeight, this.engine.drawWidth, Resources.victory, 0.8, 1)\n    const offset = buttonDims.height/2 + Config.optionPadding;\n\n    const victoryActor = new ex.Actor(\n      this.engine.drawWidth / 2,\n      this.engine.drawHeight / 2 - offset,\n      imageDims.width,\n      imageDims.height\n    );\n    victoryActor.addDrawing(Resources.victory.asSprite());\n    victoryActor.scale = imageDims.scale;\n    this.add(victoryActor);\n\n    const nextButton = new ButtonBase(\n      Resources.nextMenu, \n      this.onNext,\n    );\n    nextButton.setHeight(buttonDims.height);\n    nextButton.setWidth(buttonDims.width);\n    nextButton.scale = buttonDims.scale;\n    nextButton.x = engine.drawWidth/2;\n    nextButton.y = engine.drawHeight - offset;\n    this.add(nextButton);\n  }\n\n  private onNext = () => {\n    this.engine.goToScene(getGameWindow());\n  }\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.victorySound);\n  }\n  public onDeactivate() {\n  }\n} \n","import * as ex from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes } from './scenes';\nimport SoundManager from '../engine/soundManager';\nimport { Engine } from 'excalibur';\nimport ProgressionManager from '../engine/progression/progressionManager';\nimport { calcDimensionsSingleObject, safePointerUp, calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport BackgroundManager from '../engine/backgroundManager';\nimport ButtonBase from '../actors/bars/buttonBase';\nimport SizingManager, { IButtonSizing } from '../engine/sizingManager';\n\nexport class GameOver extends ex.Scene {\n\n  private engine: Engine;\n\n  public onInitialize(engine: ex.Engine) {\n    this.engine = engine;\n    this.add(BackgroundManager.getDefaultTileMap(engine))\n\n    const imageDims = calcDimensionsSingleObject(this.engine.drawHeight, this.engine.drawWidth, 360, 360, 0.8, 1.5);\n    const sizing: IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.menuMenu, sizing.padding, sizing.maxScale);\n    const offset = buttonDims.height/2 + Config.optionPadding;\n\n\n    const gameOverActor = new ex.Actor();\n    const spritesheet = new ex.SpriteSheet(Resources.gameOver, 3, 1 ,360, 360);\n    const playerIdleAnimation = spritesheet.getAnimationForAll(this.engine, 125);\n    gameOverActor.addDrawing(\"idle\", playerIdleAnimation);\n    this.add(gameOverActor);\n    gameOverActor.x = this.engine.drawWidth/2;\n    gameOverActor.y = this.engine.drawHeight/2 - offset;\n    gameOverActor.setHeight(engine.drawHeight);\n    gameOverActor.setWidth(engine.drawWidth);\n    gameOverActor.scale = imageDims.scale;\n\n    const menuButton = new ButtonBase(\n      Resources.menuMenu, \n      this.onMenu,\n    );\n    menuButton.setHeight(buttonDims.height);\n    menuButton.setWidth(buttonDims.width);\n    menuButton.scale = buttonDims.scale;\n    menuButton.x = engine.drawWidth/2;\n    menuButton.y = engine.drawHeight - offset;\n    this.add(menuButton)\n  }\n\n  private onMenu = () => {\n    this.engine.goToScene(Scenes.MAIN_MENU);\n  };\n\n  public onActivate() {\n    SoundManager.get().playSoundInterrupt(Resources.laughSound); \n  }\n\n  public onDeactivate() { \n    Resources.laughSound.stop();\n  }\n} \n","import * as ex from 'excalibur';\nimport { Config } from '../resources';\nconst logoImg = require('../images/title.png');\n\nexport class GameLoader extends ex.Loader {\n\n    public constructor() {\n        super();\n        this.backgroundColor = Config.backgroundColor.toString();\n        this.logo = logoImg;\n        this.logoHeight = 234;\n        this.logoWidth = 1260;\n    }\n}","import * as ex from 'excalibur';\n\nexport default class Game extends ex.Engine {\n\n  constructor() {\n    super({ \n      suppressConsoleBootMessage: true,\n      displayMode: ex.DisplayMode.FullScreen,\n      pointerScope: ex.Input.PointerScope.Canvas, //make it so clicks don't go \"through\" the help modals\n      suppressPlayButton: true, //todo think about customizing the button\n    });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","import { Actor, Color, Engine, Vector } from \"excalibur\";\nimport { Resources } from \"../../resources\";\n\nexport default class ScrollBar extends Actor {\n\n    private scrollBarTop: number;\n    private scrollBarBotton: number;\n    private isDragging = false;\n\n    constructor(engine: Engine) {\n        super();\n        this.scrollBarBotton = engine.drawHeight / 2;\n        this.scrollBarTop = engine.drawHeight / 2; // dont want to be able to go past the top of the screen\n        const sprite = Resources.uiScroll.asSprite();\n        const scrollItemSize = 50;\n        this.x = engine.drawWidth - 25;\n        this.y = engine.drawHeight / 2;\n        this.addDrawing(Resources.uiScroll.asSprite());\n        this.setWidth(scrollItemSize);\n        this.setHeight(scrollItemSize);\n        this.scale = new Vector(scrollItemSize/192, scrollItemSize/192); // 192 is the sprite original width/height\n\n        this.on('pointerdragstart', (pe: ex.Input.PointerEvent) => {\n            this.isDragging = true;\n        });\n\n        this.on('pointerdragend', (pe: ex.Input.PointerEvent) => {\n            this.isDragging = false;\n        });\n\n        this.on('pointerdragmove', (pe: ex.Input.PointerEvent) => {\n            if (this.isDragging) {\n                const worldY = pe.pointer.lastWorldPos.y;\n                if (worldY > this.scrollBarTop && worldY < this.scrollBarBotton) {\n                    this.y = pe.pointer.lastWorldPos.y;\n                }\n            }\n        });\n\n        this.on('pointerdragleave', (pe: ex.Input.PointerEvent) => {\n            if (this.isDragging) {\n                const worldY = pe.pointer.lastWorldPos.y;\n                if (worldY > this.scrollBarTop && worldY < this.scrollBarBotton) {\n                    this.y = pe.pointer.lastWorldPos.y;\n                }\n            }\n        });\n    }\n\n    public setScrollBottom(num: number) {\n        this.scrollBarBotton = num;\n        if(Math.floor(this.scrollBarBotton) <= Math.floor(this.scrollBarTop)) {\n            this.visible = false;\n        }\n    }\n}","import { Actor } from 'excalibur';\nimport { Resources, Config } from '../resources';\nimport { Scenes, getGameWindow } from './scenes';\nimport { calcDimensionsSingleObjectTexture } from '../engine/helpers';\nimport SoundManager from '../engine/soundManager';\nimport SizingManager, { IButtonSizing } from '../engine/sizingManager';\nimport BaseScene from './BaseScene';\n\nexport class MainMenu extends BaseScene {\n  public onInitialize(engine: ex.Engine) {\n    const centerX = engine.drawWidth / 2;\n\n\n    const dims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.title, 0.9, 0.8);\n    const title = new Actor(centerX, dims.height/2 + Config.gridPadding, dims.width, dims.height);\n    title.scale = dims.scale;\n    title.addDrawing(Resources.title);\n    this.add(title);\n\n    const {padding, maxScale} :IButtonSizing = SizingManager.get().getUIButtonSizing();\n    const buttonDims = calcDimensionsSingleObjectTexture(engine.drawHeight, engine.drawWidth, Resources.startMenu, padding, maxScale );\n\n    const start = this.createButton(buttonDims, centerX,  title.getBottom() + Config.optionPadding + buttonDims.height/2, Resources.startMenu, () => engine.goToScene(getGameWindow()));\n    const options = this.createButton(buttonDims, centerX, start.getBottom() + Config.gridPadding + buttonDims.height/2, Resources.optionMenu, () => engine.goToScene(Scenes.OPTIONS));\n    const help = this.createButton(buttonDims, centerX, options.getBottom() + Config.gridPadding+ buttonDims.height/2, Resources.helpMenu, () => engine.goToScene(Scenes.HELP));\n    \n    this.add(start);\n    this.add(options);\n    this.add(help);\n\n    this.setBackround(help.getBottom());\n    this.initScroll(help.getBottom());\n  }\n\n  public onActivate() {\n    SoundManager.get().backgroundMusicEnd();\n  }\n\n  public onDeactivate() { }\n}","module.exports = __webpack_public_path__ + \"d906ca717fba5c1dc816ff2688f30fed.png\";","module.exports = __webpack_public_path__ + \"00f14d085530ea0ae58c17a32b3fe27f.wav\";","module.exports = __webpack_public_path__ + \"5acc4c358abe356ab34cb46990213c87.mp3\";","module.exports = __webpack_public_path__ + \"e1587389071cad642af4ea472a7657df.wav\";","module.exports = __webpack_public_path__ + \"7969b4d1ca99e09c909f6b4247f2e20a.wav\";","module.exports = __webpack_public_path__ + \"ec591911768b22068d38bb5b2a321448.ogg\";","module.exports = __webpack_public_path__ + \"c17429a3194184f1823e8652b19665db.wav\";","module.exports = __webpack_public_path__ + \"9b230c404133d31e8b32b72e4f4709d6.wav\";","module.exports = __webpack_public_path__ + \"84f7a92ac15bb28de085370686c46b57.wav\";","module.exports = __webpack_public_path__ + \"b58455f5ec6aaf2a19902f196a55e98a.wav\";","module.exports = __webpack_public_path__ + \"7765777ed029910c394ea6ecdc46e707.png\";","module.exports = __webpack_public_path__ + \"6c9f119213f2371e5ffa564621e7c7cf.png\";","module.exports = __webpack_public_path__ + \"21c2960a6ef19bc7b845d01041d556b9.png\";","module.exports = __webpack_public_path__ + \"5bbe8e44117d6281e0990e5a0213c814.png\";","module.exports = __webpack_public_path__ + \"031849bdaba0fc1f7b8e931a8cd4b081.png\";","module.exports = __webpack_public_path__ + \"252e335cd8e95aa7f9af810197527c88.png\";","module.exports = __webpack_public_path__ + \"4be259f95a7562b19fc50f5956f3064a.png\";","module.exports = __webpack_public_path__ + \"f37c84d41789ca95567a2e9f9b3288cb.png\";","module.exports = __webpack_public_path__ + \"57df989eadc0b9703add8cdbd84d82f9.png\";","module.exports = __webpack_public_path__ + \"6944ce0fd23293c610a6b7881300e188.png\";","module.exports = __webpack_public_path__ + \"0574a2e0749918363ef5593ddc58b2e7.png\";","module.exports = __webpack_public_path__ + \"e7192d5fba02e9c6c174e7e3d9487a6b.png\";","module.exports = __webpack_public_path__ + \"46f00f6169dccc5ee028881800a09fe3.png\";","module.exports = __webpack_public_path__ + \"3844e977328e0e91b54f2d32278684c5.png\";","module.exports = __webpack_public_path__ + \"56376cf0ad0de37681a110e6dbfc3fb8.png\";","module.exports = __webpack_public_path__ + \"4ce8baed92fdbe83ea831d09b512beb2.png\";","module.exports = __webpack_public_path__ + \"b6ac9dbcd6cad76692d5dc9ffd4d530d.png\";","module.exports = __webpack_public_path__ + \"d564e115a42fa163a7bc9e1328b2d216.png\";","module.exports = __webpack_public_path__ + \"29171ae82e287f9d176ab7ddd7f6b382.png\";","module.exports = __webpack_public_path__ + \"dd8089d1ad5e36afe0d889a9218a0559.png\";","module.exports = __webpack_public_path__ + \"53b20a23b0fa9be3ec391f1dd49a6492.png\";","module.exports = __webpack_public_path__ + \"fb261f33ec74628ffab99997289e2f44.png\";","module.exports = __webpack_public_path__ + \"d848ad40f4eee6a0b29882906e9b4c24.png\";","module.exports = __webpack_public_path__ + \"64c5b08a042975010b476c3ca33efd4d.png\";","module.exports = __webpack_public_path__ + \"d23070e309626133deb93bbabf5d25bb.png\";","module.exports = __webpack_public_path__ + \"5d8c965fd0efaf1fa74941ad5cbb8d3c.png\";","module.exports = __webpack_public_path__ + \"135852ebc677f398779a9ac03e3c396b.png\";","module.exports = __webpack_public_path__ + \"ccd1e8955823c41dd50406b82e3d7dc0.png\";","module.exports = __webpack_public_path__ + \"598df00bd95514ed5a3f054793f36da1.png\";","module.exports = __webpack_public_path__ + \"022ab466b958b1e014b14ab33cf74a84.png\";","import { Resources } from './resources';\nimport { Scenes } from './scenes/scenes';\nimport { MainMenu } from './scenes/mainMenu';\nimport Game from './engine/game';\nimport { GameLoader } from './engine/gameLoader';\nimport { GameOver } from './scenes/gameOver';\nimport { Victory } from './scenes/victory';\nimport { Options } from './scenes/options';\nimport { Help } from './scenes/help';\nimport SizingManager from './engine/sizingManager';\nimport PlayerSettingsManager from './engine/progression/playerSettingsManager';\nimport { StoryGameWindow } from './scenes/gameWindows/storyGameWindow';\nimport { GridGameWindow } from './scenes/gameWindows/gridGameWindow';\n\nconst game = new Game();\nconst mainMenu = new MainMenu(game);\nconst options = new Options(game);\ngame.add(Scenes.MAIN_MENU, mainMenu);\ngame.add(Scenes.GAME_OVER, new GameOver(game));\ngame.add(Scenes.STORY_GAME_WINDOW, new StoryGameWindow(game));\ngame.add(Scenes.GRID_GAME_WINDOW, new GridGameWindow(game));\ngame.add(Scenes.VICTORY, new Victory(game));\ngame.add(Scenes.OPTIONS, options);\ngame.add(Scenes.HELP, new Help(game));\n\nlet loader = new GameLoader();\nObject.keys(Resources)\n  .forEach(k => loader.addResource(Resources[k]));\n\ngame.start(loader).then(() => {\n  PlayerSettingsManager.initialize()\n    .then(() => {\n      SizingManager.initialize(game);\n      game.goToScene(Scenes.MAIN_MENU);\n    });\n});\n"],"sourceRoot":""}